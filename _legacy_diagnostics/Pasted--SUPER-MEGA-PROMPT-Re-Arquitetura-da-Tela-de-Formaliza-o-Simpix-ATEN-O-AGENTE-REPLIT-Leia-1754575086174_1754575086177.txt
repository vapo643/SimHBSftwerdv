üö® SUPER MEGA PROMPT: Re-Arquitetura da Tela de Formaliza√ß√£o (Simpix) üö®
ATEN√á√ÉO AGENTE REPLIT: Leia este prompt integralmente antes de iniciar qualquer a√ß√£o. O n√£o cumprimento das diretrizes resultar√° na falha da miss√£o.

1. DIRETRIZ MESTRA E OBJETIVO
IMPLEMENTAR: Re-arquitetura completa e implementa√ß√£o do fluxo ponta-a-ponta da "Tela de Formaliza√ß√£o".

DIRETRIZ MESTRA: Voc√™ N√ÉO deve implementar a solu√ß√£o inteira agora. Sua tarefa inicial √© analisar todos os requisitos e gerar um ROADMAP DE EXECU√á√ÉO detalhado. Ap√≥s apresentar o roadmap, voc√™ dever√° implementar APENAS A FASE 1 desse roadmap.

2. CONTEXTO E ESTADO ATUAL
CONTEXT: A "Tela de Formaliza√ß√£o" √© o m√≥dulo central do sistema de cr√©dito Simpix (React, Express, Drizzle/PostgreSQL). √â onde propostas aprovadas se tornam contratos legais (CCB), s√£o assinadas (ClickSign) e os instrumentos de cobran√ßa (Boletos Inter) s√£o gerados. A robustez deste fluxo √© cr√≠tica para a opera√ß√£o.

CURRENT STATE:

A gera√ß√£o da CCB ignora o template PDF fornecido e cria um documento novo e desformatado.

O fluxo de assinatura com a ClickSign √© inst√°vel e n√£o confi√°vel (webhooks incertos, download do documento assinado n√£o implementado).

A gera√ß√£o de boletos em lote (parcelas) n√£o funciona.

A Timeline de eventos na UI n√£o sincroniza corretamente com o estado real do backend.

EXPECTED (Estado Final de Sucesso):
Um fluxo de formaliza√ß√£o automatizado, robusto e transparente, onde:

A CCB √© gerada preenchendo perfeitamente o template_ccb.pdf.

A assinatura via ClickSign √© orquestrada (envio, link/QR code, webhook de confirma√ß√£o, download do documento assinado).

A gera√ß√£o de boletos no Banco Inter √© liberada somente ap√≥s a assinatura confirmada.

Todas as parcelas s√£o geradas e disponibilizadas para download (PDFs individuais e um arquivo .zip).

A Timeline da UI reflete cada etapa em tempo real (utilizando invalida√ß√£o de cache do React Query).

O status da proposta avan√ßa corretamente para os m√≥dulos de Pagamento/Cobran√ßa.

3. A√á√ÉO PRIM√ÅRIA: GERA√á√ÉO DO ROADMAP E EXECU√á√ÉO DA FASE 1
ROADMAP DE EXECU√á√ÉO:
Sua primeira tarefa √© analisar os "REQUISITOS DETALHADOS" (Se√ß√£o 4) e os "CONSTRANGIMENTOS T√âCNICOS" (Se√ß√£o 5) e criar um Roadmap de Execu√ß√£o.

O Roadmap deve ser dividido em Fases l√≥gicas (ex: Fase 1 - Gera√ß√£o e Armazenamento da CCB, Fase 2 - Integra√ß√£o de Envio ClickSign, Fase 3 - Webhooks e Download ClickSign, Fase 4 - Gera√ß√£o de Boletos Inter, Fase 5 - Download em Lote e Sincroniza√ß√£o UI).

Cada fase deve detalhar:

Objetivo da Fase.

Arquivos a serem modificados/criados (Frontend e Backend).

Tecnologias/Bibliotecas a serem utilizadas.

Crit√©rios de Aceite espec√≠ficos da fase.

APRESENTE ESTE ROADMAP PRIMEIRO. AP√ìS A APRESENTA√á√ÉO, EXECUTE IMEDIATAMENTE APENAS A FASE 1.

4. REQUISITOS DETALHADOS PARA O ROADMAP
4.1. Gera√ß√£o da CCB a partir de Template
Objetivo: Carregar template_ccb.pdf e preencher seus campos existentes com os dados da proposta.

Diretriz T√©cnica: Utilize a biblioteca pdf-lib no backend. Especificamente, use a funcionalidade de PDFForm. O processo deve ser: Carregar o PDF -> Acessar o formul√°rio (pdfDoc.getForm()) -> Ler os campos do template (form.getFields()) -> Mape√°-los para os dados da proposta -> Preench√™-los (ex: textField.setText()) -> Achatar o formul√°rio (form.flatten()) para tornar o texto permanente.

Restri√ß√£o Cr√≠tica: N√ÉO tente recriar o PDF do zero (usando pdfkit ou similares) ou extrair texto. Voc√™ DEVE usar o template como base para preservar o design exato.

Resultado: O PDF gerado deve ser armazenado no Supabase Storage e o caminho registrado na tabela propostas.

4.2. Fluxo de Assinatura (Envio - ClickSign)
Gatilho: Bot√£o "Enviar para Assinatura" (habilitado somente ap√≥s a CCB ser gerada).

A√ß√£o Backend:

Buscar o PDF gerado no Storage.

Chamar a API da ClickSign para criar o documento e os signat√°rios.

Armazenar os IDs retornados (Document Key, Signer Key) no banco de dados.

A√ß√£o Frontend: Exibir o link de assinatura retornado pela API e gerar um QR Code visualiz√°vel na tela (usar biblioteca qrcode.react ou similar).

4.3. Webhooks e Documento Assinado (Recebimento - ClickSign)
Infraestrutura: Criar um endpoint dedicado POST /api/webhooks/clicksign.

Seguran√ßa: Validar o HMAC/token do webhook para garantir a autenticidade da origem (seguran√ßa cr√≠tica).

L√≥gica de Neg√≥cio (Evento: signed ou closed):

Identificar a proposta pela Document Key.

Atualizar o status da proposta (assinatura_eletronica_concluida = true).

Imediatamente, fazer uma chamada autenticada √† API da ClickSign para baixar a vers√£o assinada da CCB.

Substituir a vers√£o n√£o assinada no Supabase Storage pela vers√£o assinada (ou versionar).

Biometria: Garantir que o mesmo fluxo trate a confirma√ß√£o de biometria, se aplic√°vel.

4.4. Gera√ß√£o de Boletos (Banco Inter)
Gatilho: Bot√£o "Gerar Boletos" (habilitado somente ap√≥s assinatura_eletronica_concluida = true).

L√≥gica de Neg√≥cio: Iterar com base no prazo da proposta (ex: 12 meses). Para cada itera√ß√£o, chamar o interBankService para gerar um boleto com a data de vencimento correta.

Transa√ß√£o (CR√çTICO): Toda a opera√ß√£o de gera√ß√£o de boletos deve ocorrer dentro de uma transa√ß√£o Drizzle (db.transaction()) para garantir atomicidade (ou todos s√£o gerados e salvos, ou nenhum √©).

Armazenamento: Registrar cada boleto na tabela inter_collections.

4.5. Download de Boletos (Banco Inter)
Gatilho: Bot√£o "Baixar Todos os Boletos".

A√ß√£o Backend:

Buscar todos os registros de inter_collections para a proposta.

Fazer requisi√ß√µes em lote √† API do Inter para baixar o PDF de cada boleto. Use Promise.allSettled para resili√™ncia em caso de falha parcial.

Usar uma biblioteca de compress√£o (ex: archiver ou jszip) para criar um √∫nico arquivo .zip contendo todos os PDFs.

Streamar o arquivo .zip como resposta ao frontend.

4.6. Sincroniza√ß√£o da Timeline (UI)
Objetivo: Garantir atualiza√ß√£o em tempo real sem recarregar a p√°gina.

Diretriz T√©cnica: Utilize o React Query de forma eficaz. Ap√≥s cada muta√ß√£o bem-sucedida (ex: gera√ß√£o de CCB, envio de assinatura, gera√ß√£o de boletos), utilize queryClient.invalidateQueries() mirando na chave da proposta (ex: ['proposta', id]) para for√ßar o refetch dos dados e da timeline.

5. CONSTRANGIMENTOS T√âCNICOS E QUALIDADE
BANCO (Drizzle/PostgreSQL): Uso obrigat√≥rio de Transa√ß√µes Drizzle para opera√ß√µes de escrita m√∫ltiplas (Se√ß√£o 4.4). Garanta que todos os schemas Drizzle estejam sincronizados com o banco.

INTEGRA√á√ÉO (APIs Externas): Implemente tratamento de erros robusto (try/catch, verifica√ß√£o de status HTTP) e logging detalhado para todas as intera√ß√µes com ClickSign e Banco Inter.

ROLES (RBAC): Mantenha a valida√ß√£o de roles (ADMINISTRADOR, FINANCEIRO) em todos os endpoints relevantes usando o middleware de autentica√ß√£o existente.

C√ìDIGO LIMPO: Mantenha a separa√ß√£o de responsabilidades (Services, Routes, UI Components). Tipagem TypeScript deve ser estrita.

AGORA, GERE O ROADMAP DE EXECU√á√ÉO E IMPLEMENTE APENAS A FASE 1.