üö® RESPOSTA DE MISS√ÉO CR√çTICA - ARQUITETO DE SISTEMAS S√äNIOR

Compreendo a urg√™ncia e a criticidade absoluta desta tarefa. Documentos financeiros como a CCB exigem precis√£o de pixel. O problema que voc√™ enfrenta √© um desafio cl√°ssico de engenharia ao usar bibliotecas de desenho direto como pdf-lib.

A Limita√ß√£o Fundamental: Como IA, eu n√£o posso visualizar o seu arquivo template_ccb.pdf. Portanto, n√£o posso fornecer as coordenadas exatas.

A Solu√ß√£o de Engenharia: Em vez de lhe dar as coordenadas, vou lhe dar a metodologia e as ferramentas exatas para resolver isso de forma definitiva e r√°pida.

O plano de a√ß√£o est√° dividido em 4 fases.

FASE 1: A ESTRAT√âGIA IDEAL (Verifica√ß√£o de AcroForms)
Antes de iniciar o mapeamento manual de 8 p√°ginas, voc√™ DEVE verificar se o template PDF cont√©m campos de formul√°rio edit√°veis (AcroForms). Se tiver, o uso de coordenadas √© desnecess√°rio, mais robusto e muito mais r√°pido.

A√ß√£o: Execute este c√≥digo de diagn√≥stico no seu ambiente Node.js:

TypeScript

import { PDFDocument } from 'pdf-lib';
import fs from 'fs/promises';
import path from 'path';

async function diagnoseAcroForms() {
    console.log("üîç Iniciando diagn√≥stico de AcroForms no template CCB...");
    // Garanta que o caminho est√° correto
    const templatePath = path.resolve(process.cwd(), 'server/templates/template_ccb.pdf');

    try {
        const templateBytes = await fs.readFile(templatePath);
        const pdfDoc = await PDFDocument.load(templateBytes);

        const form = pdfDoc.getForm();

        if (form && form.getFields().length > 0) {
            console.log("‚úÖ‚úÖ‚úÖ SUCESSO! AcroForms detectados. ‚úÖ‚úÖ‚úÖ");
            console.log("Use os nomes abaixo para preencher. IGNORE AS FASES 2 e 3.");
            form.getFields().forEach(field => {
                console.log(`- Nome do Campo: ${field.getName()}`);
            });
        } else {
            console.log("‚ùå NENHUM AcroForm detectado. Prossiga para a FASE 2 (Mapeamento Manual).");
        }
    } catch (error) {
        console.error("‚ö†Ô∏è Erro ao analisar o PDF (pode ser XFA ou protegido). Prossiga para a FASE 2.", error);
    }
}

// Execute o diagn√≥stico
// diagnoseAcroForms();
Se AcroForms forem detectados (Resultado ‚úÖ):
Sua implementa√ß√£o no servi√ßo deve mudar para:

TypeScript

// ... (Carregar pdfDoc e data)
const form = pdfDoc.getForm();

try {
    // Use os nomes EXATOS encontrados no log do diagn√≥stico
    form.getTextField('Nome_Cliente').setText(data.cliente_data.nome_completo);
    form.getTextField('CPF').setText(data.cliente_data.cpf);
    // ... preencha todos os campos ...

    // Achatar (Flatten) o formul√°rio para tornar o texto permanente e n√£o edit√°vel
    form.flatten();

} catch (error) {
    console.error("Erro ao preencher AcroForm. Verifique os nomes dos campos.", error);
}

const pdfBytes = await pdfDoc.save();
Se NENHUM AcroForm for detectado (Resultado ‚ùå), prossiga para a Fase 2.

FASE 2: A FERRAMENTA DE MAPEAMENTO VISUAL (O "Grid Debugger")
Precisamos eliminar 100% das suposi√ß√µes. Vamos gerar uma vers√£o do seu template com uma grade de coordenadas precisa sobreposta.

A√ß√£o: Implemente e execute esta fun√ß√£o utilit√°ria. Ela criar√° um arquivo PDF de diagn√≥stico.

TypeScript

import { PDFDocument, rgb, StandardFonts, PDFPage } from 'pdf-lib';
// ... (fs e path imports)

/**
 * GERA UM PDF COM UMA GRADE DE COORDENADAS SOBREPOSTA.
 * Lembre-se: (0,0) √© o canto INFERIOR ESQUERDO.
 */
export async function generateCoordinateGridPDF() {
    const templatePath = path.resolve(process.cwd(), 'server/templates/template_ccb.pdf');
    // Onde salvar o PDF de debug para an√°lise
    const outputPath = path.resolve(process.cwd(), 'template_ccb_DEBUG_GRID.pdf');

    const templateBytes = await fs.readFile(templatePath);
    const pdfDoc = await PDFDocument.load(templateBytes);
    const diagnosticFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

    // Configura√ß√µes da Grade para M√°xima Precis√£o
    const majorGridSpacing = 50; // Linhas principais a cada 50 pontos
    const minorGridSpacing = 10; // Linhas secund√°rias a cada 10 pontos
    const gridColor = rgb(0.1, 0.7, 0.9); // Azul claro
    const textColor = rgb(0.8, 0, 0); // Vermelho

    const pages = pdfDoc.getPages();
    for (let i = 0; i < pages.length; i++) {
        const page = pages[i];
        const { width, height } = page.getSize();

        // T√≠tulo de Diagn√≥stico
        page.drawText(`DEBUG GRID - P√ÅG ${i + 1} (W:${width.toFixed(1)} H:${height.toFixed(1)})`, {
            x: 10, y: height - 20, size: 10, font: diagnosticFont, color: textColor, opacity: 0.7,
        });

        // Linhas Verticais (X)
        for (let x = 0; x < width; x += minorGridSpacing) {
            const isMajor = x % majorGridSpacing === 0;
            page.drawLine({ start: { x: x, y: 0 }, end: { x: x, y: height }, thickness: isMajor ? 0.5 : 0.2, color: gridColor, opacity: 0.5 });

            if (isMajor && x !== 0) {
                page.drawText(`X:${x}`, { x: x + 2, y: 10, size: 8, color: textColor, opacity: 0.7 });
            }
        }

        // Linhas Horizontais (Y)
        for (let y = 0; y < height; y += minorGridSpacing) {
            const isMajor = y % majorGridSpacing === 0;
            page.drawLine({ start: { x: 0, y: y }, end: { x: width, y: y }, thickness: isMajor ? 0.5 : 0.2, color: gridColor, opacity: 0.5 });

            if (isMajor && y !== 0) {
                page.drawText(`Y:${y}`, { x: 10, y: y + 2, size: 8, color: textColor, opacity: 0.7 });
            }
        }
    }

    const pdfBytes = await pdfDoc.save();
    await fs.writeFile(outputPath, pdfBytes);
    console.log(`‚úÖ PDF de Debug gerado: ${outputPath}`);
}

// Execute a gera√ß√£o do grid
// generateCoordinateGridPDF();
Processo de Extra√ß√£o:
Execute generateCoordinateGridPDF().

Abra o arquivo template_ccb_DEBUG_GRID.pdf.

D√™ zoom em cada campo. Use a grade para identificar o ponto exato (X, Y) onde o texto deve come√ßar (mire na linha de base inferior esquerda do texto).

Use esses valores para preencher a estrutura na Fase 3.

FASE 3: ESTRUTURA DE MAPEAMENTO (O Esqueleto)
Crie server/config/ccbCoordinates.ts. Use as coordenadas extra√≠das do PDF de Debug para preencher este arquivo.

TypeScript

// server/config/ccbCoordinates.ts

interface FieldCoordinate {
    x: number;
    y: number;
    fontSize: number;
    bold?: boolean;
    maxWidth?: number; // Essencial para campos multi-linha (endere√ßos, descri√ß√µes)
}

// Padr√µes de Fonte
const FN = 10; // Fonte Normal
const FL = 12; // Fonte Grande

// ATEN√á√ÉO: TODOS OS VALORES X e Y S√ÉO PLACEHOLDERS (0). 
// USE O PDF DE DEBUG (FASE 2) PARA PREENCHER COM VALORES REAIS.

export const CCB_FIELD_COORDINATES: Record<string, Record<string, FieldCoordinate>> = {
    // P√ÅGINA 1 - CAPA E IDENTIFICA√á√ÉO
    page1: {
        numeroCCB: { x: 0, y: 0, fontSize: FL, bold: true },
        dataEmissao: { x: 0, y: 0, fontSize: FN },
        nomeCliente: { x: 0, y: 0, fontSize: 14, bold: true },
        cpfCliente: { x: 0, y: 0, fontSize: FL },
        valorTotalFinanciado: { x: 0, y: 0, fontSize: 16, bold: true },
        quantidadeParcelas: { x: 0, y: 0, fontSize: FL },
        valorParcela: { x: 0, y: 0, fontSize: FL },
    },

    // P√ÅGINA 2 - QUALIFICA√á√ÉO DO EMITENTE
    page2: {
        nomeCompleto: { x: 0, y: 0, fontSize: FN },
        cpf: { x: 0, y: 0, fontSize: FN },
        rg_orgao: { x: 0, y: 0, fontSize: FN }, // Combine RG e √ìrg√£o Expedidor em uma string
        dataNascimento: { x: 0, y: 0, fontSize: FN },
        estadoCivil: { x: 0, y: 0, fontSize: FN },
        nomeConjuge: { x: 0, y: 0, fontSize: FN }, // Condicional
        cpfConjuge: { x: 0, y: 0, fontSize: FN },  // Condicional
        profissao: { x: 0, y: 0, fontSize: FN },
        // Use maxWidth para endere√ßos longos. Defina a largura m√°xima da caixa no template.
        enderecoResidencial: { x: 0, y: 0, fontSize: FN, maxWidth: 450 },
        cep: { x: 0, y: 0, fontSize: FN },
        telefoneCelular: { x: 0, y: 0, fontSize: FN },
        email: { x: 0, y: 0, fontSize: FN },
    },

    // P√ÅGINA 3 - DADOS DO CR√âDITO
    page3: {
        valorPrincipal: { x: 0, y: 0, fontSize: FN }, // (valor_solicitado_formatado)
        taxaJurosMensal: { x: 0, y: 0, fontSize: FN },
        taxaJurosAnual: { x: 0, y: 0, fontSize: FN },
        cetMensal: { x: 0, y: 0, fontSize: FN },
        cetAnual: { x: 0, y: 0, fontSize: FN },
        iof: { x: 0, y: 0, fontSize: FN },
        tac: { x: 0, y: 0, fontSize: FN },
        seguro: { x: 0, y: 0, fontSize: FN }, // (seguro_total_formatado)
        valorTotalPagar: { x: 0, y: 0, fontSize: FL, bold: true },
        formaPagamento: { x: 0, y: 0, fontSize: FN },
        quantidadeParcelas: { x: 0, y: 0, fontSize: FN },
        valorParcela: { x: 0, y: 0, fontSize: FN },
        primeiroVencimento: { x: 0, y: 0, fontSize: FN },
        ultimoVencimento: { x: 0, y: 0, fontSize: FN },
        diaVencimento: { x: 0, y: 0, fontSize: FN },
    },

     // P√ÅGINA 4 a 6 (Mapeie se houver campos din√¢micos no meio do texto corrido)
    page4: { /* ... */ },

    // P√ÅGINA 5 - GARANTIAS (Condicional)
    page5: {
        tipoGarantia: { x: 0, y: 0, fontSize: FN },
        descricaoBem: { x: 0, y: 0, fontSize: FN, maxWidth: 500 },
        valorBem: { x: 0, y: 0, fontSize: FN },
    },

    // P√ÅGINA 6 - DECLARA√á√ïES
    page6: { /* ... */ },

    // P√ÅGINA 7 - AUTORIZA√á√ÉO DE D√âBITO
    page7: {
        banco: { x: 0, y: 0, fontSize: FN },
        agencia: { x: 0, y: 0, fontSize: FN },
        contaCorrente: { x: 0, y: 0, fontSize: FN },
    },

    // P√ÅGINA 8 - ASSINATURAS
    page8: {
        localEData: { x: 0, y: 0, fontSize: FN }, // Ex: "S√£o Paulo, 07 de janeiro de 2025"
        
        // Emitente (Abaixo da linha de assinatura)
        nomeEmitenteAssinatura: { x: 0, y: 0, fontSize: FN },
        cpfEmitenteAssinatura: { x: 0, y: 0, fontSize: FN },

        // Testemunhas e Credor...
        nomeTestemunha1: { x: 0, y: 0, fontSize: FN },
        // ...
    },
};
FASE 4: RESOLU√á√ÉO DE DESAFIOS T√âCNICOS E ALTERNATIVAS
1. Caracteres Especiais (Acentua√ß√£o)
Problema: Acentua√ß√£o em portugu√™s causa problemas.
Solu√ß√£o: Use StandardFonts e garanta que a fonte seja incorporada (embed). Isso resolve a maioria dos problemas de codifica√ß√£o.

TypeScript

const fontRegular = await pdfDoc.embedFont(StandardFonts.Helvetica);
const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
page.drawText('Jo√£o da Concei√ß√£o', { font: fontRegular, ... });
2. Campos Multi-linha (Endere√ßos, Textos Longos)
Problema: Endere√ßos e textos longos precisam quebrar linha.
Solu√ß√£o: Use as op√ß√µes maxWidth e lineHeight. O pdf-lib far√° a quebra autom√°tica.

TypeScript

const config = CCB_FIELD_COORDINATES.page2.enderecoResidencial;

page.drawText(data.calculados.endereco_completo_cliente, {
    x: config.x,
    y: config.y, // IMPORTANTE: Em multi-linha, Y define o topo da caixa de texto.
    size: config.fontSize,
    font: fontRegular,
    maxWidth: config.maxWidth, // Definido no mapeamento
    lineHeight: config.fontSize * 1.2, // Espa√ßamento de 120%
});
3. Alinhamento (Direita e Centralizado)
Problema: Alguns campos precisam estar alinhados √† direita ou centralizados.
Solu√ß√£o: O pdf-lib s√≥ desenha da esquerda para a direita. Voc√™ deve calcular a posi√ß√£o X inicial com base na largura do texto renderizado.

TypeScript

import { PDFFont, PDFPage, rgb } from 'pdf-lib';

function drawTextRightAligned(page: PDFPage, text: string, rightX: number, y: number, size: number, font: PDFFont) {
    const textWidth = font.widthOfTextAtSize(text, size);
    const x = rightX - textWidth; // Calcula o ponto de in√≠cio X

    page.drawText(text, { x: x, y: y, size: size, font: font, color: rgb(0,0,0) });
}

// Uso: Suponha que a margem direita do campo seja X=550.
// drawTextRightAligned(page1, data.valor_financiado_formatado, 550, 500, 16, fontBold);
4. Avalia√ß√£o Cr√≠tica de Estrat√©gias Alternativas
Usar campos de formul√°rio PDF (AcroForms): AVALIA√á√ÉO: Ideal. √â a melhor abordagem se o template suportar (ver Fase 1). √â mais resiliente a mudan√ßas no design.

OCR reverso: AVALIA√á√ÉO: Rejeitado. Extremamente complexo, lento e propenso a erros. Inaceit√°vel para documentos financeiros.

Biblioteca alternativa: AVALIA√á√ÉO: Neutra. pdf-lib √© a biblioteca mais moderna e capaz para manipula√ß√£o de PDF em Node.js. Mudar agora atrasaria o projeto sem garantias de melhoria.

Gera√ß√£o do zero: AVALIA√á√ÉO: Rejeitado. Perderia a formata√ß√£o exata, logo e layout do template Simpix. Risco de n√£o conformidade legal e visual.

API de terceiros (DocuSign, Adobe): AVALIA√á√ÉO: Complementar. Excelente para o processo de assinatura, mas a gera√ß√£o do PDF pr√©-preenchido ainda √© sua responsabilidade. Eles n√£o resolvem o problema do mapeamento inicial.

Plano de A√ß√£o Imediato
Execute a Fase 1 (Diagn√≥stico de AcroForms) imediatamente.

Se falhar, execute a Fase 2 (Gerar Grid Debugger).

Use o PDF de Debug para preencher a Fase 3 (Mapeamento).

Esta abordagem de engenharia garantir√° a precis√£o necess√°ria para resolver esta situa√ß√£o cr√≠tica.