**IMPLEMENTAR:**
A interface de usuário (UI) e a lógica de orquestração no frontend para o novo fluxo de geração de "carnê" de boletos na "Tela de Formalização".

**CONTEXT:**
O backend para nossa nova arquitetura de geração de carnês está 100% implementado e funcional. Agora, precisamos construir a interface do usuário que irá consumir estes novos endpoints e fornecer uma experiência fluida para o atendente. O fluxo é assíncrono: primeiro disparamos a sincronização de boletos para o nosso Storage, e depois disparamos a geração do carnê a partir do Storage.

**CURRENT STATE:**
A "Tela de Formalização" possui um botão de download que está obsoleto ou aponta para a lógica antiga. Precisamos refatorá-lo para orquestrar o novo fluxo de dois passos.

**EXPECTED (Estado Final de Sucesso):**
1.  A UI na "Tela de Formalização" deve ter um único botão principal, com o texto **"Gerar Carnê para Impressão"**.
2.  Ao clicar neste botão, o sistema deve executar a seguinte **sequência assíncrona**:
    - **Passo A (Sincronização):** Primeiro, a UI deve chamar o endpoint `POST /api/propostas/:id/sincronizar-boletos`. Uma notificação (toast) deve aparecer para o usuário com a mensagem "Iniciando sincronização dos boletos. Aguarde...".
    - **Passo B (Geração):** Assim que a chamada de sincronização retornar sucesso, a UI deve **imediatamente** chamar o segundo endpoint, `POST /api/propostas/:id/gerar-carne`. A notificação pode ser atualizada para "Sincronização concluída. Gerando o carnê...".
    - **Passo C (Download):** Este segundo endpoint retornará a URL assinada do carnê. A UI deve usar esta URL para iniciar o download do ficheiro PDF consolidado no navegador do usuário.
3.  A UI deve gerenciar os estados de carregamento de forma clara durante todo o processo (ex: desabilitar o botão, mostrar spinners, exibir notificações de sucesso ou erro).

**CONSTRAINTS:**
- Refatore o botão existente na "Tela de Formalização" para implementar esta nova lógica de orquestração de chamadas em sequência.
- Utilize nosso sistema de notificações (toast) existente para manter o usuário informado sobre o progresso.
- A lógica deve ser robusta e possuir tratamento de erro para cada uma das chamadas de API.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear os arquivos de frontend envolvidos.
2.  Implementar a lógica de orquestração de forma clara.
3.  Executar `get_latest_lsp_diagnostics` para garantir ZERO erros.
4.  Realizar um teste funcional completo a partir da UI.
5.  O critério final de sucesso é que o clique no botão inicie o **download de um único ficheiro PDF consolidado**, contendo todas as parcelas da proposta, e que o usuário seja informado do progresso via notificações.