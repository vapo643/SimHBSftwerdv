**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Refatorar a "Tela de Formalização" para que ela verifique automaticamente a existência de um "carnê" de boletos no carregamento da página e exiba o botão de ação correto ("Gerar Carnê" vs. "Baixar Carnê") com base nesse estado.
* **Intenção Estratégica (O Porquê):** A experiência do usuário atual é confusa e ineficiente. O atendente não sabe se o carnê já foi gerado, o que leva a ações desnecessárias e incerteza. Precisamos de uma UI "inteligente" que reflita o estado real dos artefatos no nosso sistema e guie o usuário para a ação correta.
* **Histórico Relevante (Consulta Obrigatória):** O backend para sincronização (`/sincronizar-boletos`) e geração de carnê (`/gerar-carne`) já está implementado e funcional. O desafio agora é puramente na orquestração do frontend para consumir estes serviços de forma inteligente.
* **Modelo Mental (Como se Encaixa):** O componente da "Tela de Formalização" deve evoluir. Em seu carregamento inicial (`useEffect`), ele precisa acionar uma chamada de API para um novo endpoint de "verificação de status". O resultado desta chamada determinará o estado inicial da UI e qual botão será renderizado.
* **Riscos Antecipados:** **Risco:** Múltiplas chamadas de API no carregamento da página podem criar "race conditions". **Contramedida:** A lógica de verificação de estado do carnê deve ser acionada a partir do `onSuccess` do `useQuery` principal que busca os dados da proposta, garantindo uma sequência de carregamento lógica e ordenada.

---

**IMPLEMENTAR:**
A lógica de verificação de estado automática na "Tela de Formalização" para exibir dinamicamente o botão de "Gerar Carnê para Impressão" ou "Baixar Carnê".

**CURRENT STATE:**
A tela carrega e exibe um botão de ação estático. Ela não verifica se o carnê já foi gerado e salvo no Storage, resultando em uma UX confusa e na possibilidade de reprocessamento desnecessário, além de não disponibilizar o download de um carnê já existente.

**EXPECTED (Estado Final de Sucesso):**
Um fluxo de usuário fluido e inteligente:
1.  O usuário abre a "Tela de Formalização" de uma proposta.
2.  A página carrega os dados da proposta e dos boletos.
3.  **IMEDIATAMENTE APÓS** o carregamento dos dados, o frontend faz uma chamada automática a um endpoint de backend para verificar se já existe um carnê gerado para esta proposta no Supabase Storage.
4.  **SE** um carnê já existir, a página deve renderizar **imediatamente** com o botão verde **"Baixar Carnê"** já visível e funcional.
5.  **SE** o carnê ainda não existir, a página deve renderizar com o botão azul **"Gerar Carnê para Impressão"**, que acionará o fluxo de geração que já construímos.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Backend - O Endpoint de "Consciência de Estado":**
    - **Ação:** Crie um novo endpoint `GET /api/propostas/:id/carne-status`.
    - **Implementação:** Este endpoint deve verificar no Supabase Storage se um ficheiro de carnê já existe na pasta `propostas/{propostaId}/carnes/`. Se existir, deve retornar um JSON como `{ "carneExists": true, "url": "URL_ASSINADA_PARA_DOWNLOAD" }`. Se não, `{ "carneExists": false }`.

**2. Frontend - A Lógica de Carregamento Inteligente (`formalizacao.tsx`):**
    - **Ação:** Refatore o componente. Utilize um hook `useEffect` ou o callback `onSuccess` do `useQuery` principal.
    - **Implementação:** Assim que os dados da proposta forem carregados, chame o novo endpoint `/carne-status`.
    - **Gerenciamento de Estado:** Use um `useState` para armazenar o estado do carnê (ex: `const [carneState, setCarneState] = useState({ exists: false, url: null, isLoading: true });`).
    - **Renderização Condicional:** Use o `carneState` para renderizar condicionalmente o botão "Gerar Carnê para Impressão" ou o botão "Baixar Carnê".

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear todos os arquivos envolvidos.
2.  Implementar primeiro o backend e depois o frontend.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Testar os dois cenários: abrir uma proposta **com** e **sem** um carnê pré-existente no Storage.
5.  O critério final de sucesso é uma UI que se adapta automaticamente ao estado real dos dados no momento do carregamento da página.