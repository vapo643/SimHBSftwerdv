**IMPLEMENTAR:**
Auditoria de diagnóstico completa da função `gerarCarneDoStorage` para identificar a causa raiz da falha na geração do "carnê" a partir dos PDFs armazenados no Supabase Storage.

**CONTEXT:**
O fluxo de geração de carnê está a falhar na segunda etapa. A sincronização dos boletos individuais para o Storage funciona, mas o processo de lê-los e fundi-los em um único PDF está a gerar um erro no frontend. Precisamos de um diagnóstico preciso do que está a falhar dentro do serviço de fusão.

**CURRENT STATE:**
Uma chamada ao endpoint `POST /api/propostas/:id/gerar-carne` resulta em erro.

**EXPECTED (Estado Final de Sucesso):**
Logs detalhados no console do Replit que nos mostrem exatamente em que ponto da função `gerarCarneDoStorage` o erro ocorre.

**CONSTRAINTS (Roadmap de Diagnóstico - NÃO FAÇA CORREÇÕES AINDA):**

**1. Instrumentação com Logs:**
    - **Ação:** Modifique a função `gerarCarneDoStorage` no ficheiro `server/services/boletoStorageService.ts`.
    - **Implementação:** Adicione `console.log` detalhados em CADA etapa do processo. Siga este roteiro de logging:
        1.  **Início:** `console.log('[CARNE DEBUG] Iniciando geração de carnê para a proposta {propostaId}');`
        2.  **Listagem de Ficheiros:** `console.log('[CARNE DEBUG] Listando ficheiros em propostas/{propostaId}/boletos/emitidos_pendentes/');`
        3.  **Resultado da Listagem:** Após a chamada ao Supabase para listar os ficheiros, logue o resultado: `console.log('[CARNE DEBUG] {numeroDeFicheiros} ficheiros encontrados.');`
        4.  **Início do Loop de Download:** `console.log('[CARNE DEBUG] Iniciando download dos buffers do Storage...');`
        5.  **Dentro do Loop:** Para cada ficheiro, logue o nome antes de tentar o download: `console.log('[CARNE DEBUG] Baixando ficheiro: {nomeDoFicheiro}');`
        6.  **Após o Loop:** `console.log('[CARNE DEBUG] Download de todos os {numeroDeBuffers} buffers concluído. Iniciando fusão com pdf-lib...');`
        7.  **Após a Fusão:** `console.log('[CARNE DEBUG] Fusão concluída com sucesso. Tamanho do carnê: {tamanhoDoBufferFinal} bytes. Iniciando upload para o Storage...');`
        8.  **Após o Upload:** `console.log('[CARNE DEBUG] Upload do carnê concluído. Gerando URL assinada...');`
        9.  **Sucesso Final:** `console.log('[CARNE DEBUG] URL do carnê gerada com sucesso.');`

**2. Execução do Teste:**
    - **Ação:** Após adicionar os logs, chame o endpoint `POST /api/propostas/:id/gerar-carne` para uma proposta que você sabe que já tem os boletos na pasta `emitidos_pendentes`.

**Relatório Final:**
O critério de sucesso desta missão é a apresentação do **output completo do console do Replit** gerado pela execução do teste. Os logs nos mostrarão exatamente até que ponto o processo funciona antes de falhar.