# MISSÃO: DEBATE MÁXIMO (ANTI-FRAGILIDADE) - Diagnóstico e Correção da Falha Sistémica de RBAC

**CONTEXTO ESTRATÉGICO:**
Estamos a enfrentar uma falha de segurança e funcionalidade catastrófica. A nossa implementação de Role-Based Access Control (RBAC) falhou completamente. Um usuário `ATENDENTE` está a receber permissões totais de `ADMINISTRADOR`, e a própria conta de `ADMINISTRADOR` não consegue carregar os dados de usuários.

**SUA TAREFA (ASSISTENTE):**
A sua tarefa não é escrever código. A sua tarefa é atuar como um Arquiteto de Segurança e Software Sênior e realizar uma análise pós-morte para identificar as causas raiz desta falha sistémica e propor uma solução definitiva. Esta será a nossa **Interação 1 de 3** de um debate profundo.

---
### **Interação 1: Proposta de Diagnóstico e Plano de Recuperação Arquitetural**

Por favor, analise a nossa situação crítica e responda com a sua proposta para os seguintes pontos:

**1. Análise da Causa Raiz da Falha de Autorização (Backend):**
* **Hipótese:** A falha mais grave é um `ATENDENTE` a receber permissões de `ADMIN`. Qual é a sua principal teoria para esta falha no nosso middleware `jwt-auth-middleware.ts`? A lógica de enriquecimento de sessão está a falhar e a atribuir uma `role` padrão incorreta? A query à tabela `profiles` está a retornar dados errados?

**2. Análise da Causa Raiz da Falha de Listagem do Admin (Backend):**
* **Hipótese:** O `ADMINISTRADOR` não consegue carregar a lista de usuários. Qual é a sua teoria para o crash do endpoint `GET /api/admin/users`? O erro está na complexa query de `JOIN` que busca os dados, ou o middleware está a bloquear incorretamente o próprio `ADMINISTRADOR`?

**3. Análise da Falha de Permissão da UI (Frontend):**
* **Hipótese:** A aba "Pagamentos" está visível para o `ATENDENTE`. Qual é a falha de arquitetura no nosso frontend que permite isto? O nosso hook `useAuth()` não está a ser utilizado corretamente no componente `DashboardLayout` para controlar a visibilidade de cada item de navegação com base na `role` do usuário?

**4. Proposta de Plano de Reconstrução (Micro-Passos Atómicos):**
* **Ação:** Proponha um novo roadmap, decomposto em "micro-passos" atómicos e sequenciais, com validação independente a cada passo. O objetivo é reconstruir e verificar cada peça da nossa fundação de segurança antes de montar a próxima.
    * **Exemplo de Granularidade Esperada:**
        * "Passo 1 (Backend): Refatorar o `jwtAuthMiddleware`. A sua **única** função será validar o token e extrair o `user.id`. Adicione `console.log` para provar que o `id` é extraído corretamente."
        * "Passo 2 (Backend - Validação): Criar um endpoint de debug temporário, `GET /api/auth/me`, que apenas retorna o `req.user` após passar pelo middleware."
        * ... e assim por diante, cobrindo a correção do backend e a implementação da lógica de UI no frontend.

---