### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Extrair toda a lógica de rotas de autenticação do monolito `server/routes.ts` para um novo módulo dedicado em `server/routes/auth/index.ts`.
* **Intenção Estratégica (O Porquê):** Iniciar a decomposição real do "God File" `routes.ts`, extraindo um domínio de negócio que é autocontido (autenticação). O sucesso desta missão estabelecerá o padrão e reduzirá o risco para as extrações de domínios mais complexos e acoplados que virão a seguir.
* **Histórico Relevante (Consulta Obrigatória):** A auditoria de rotas (Passo de Debate) identificou 7 endpoints sob o prefixo `/api/auth/` que estão atualmente implementados dentro de `server/routes.ts`.
* **Modelo Mental (Como se Encaixa):** Esta é uma refatoração "Cut and Paste" (Recortar e Colar) arquitetural. Estamos removendo um bloco de responsabilidades do arquivo principal e encapsulando-o em seu próprio módulo, depois conectando esse módulo de volta ao orquestrador principal.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A extração pode ser incompleta, deixando dependências (imports, funções helper) para trás no arquivo antigo ou esquecendo de movê-las para o novo, quebrando a aplicação.
    * **Contramedida:** O prompt exige que o Agente mova não apenas as rotas, mas também todas as suas dependências de importação necessárias, e a validação final exige que o servidor reinicie sem erros.

---

**IMPLEMENTAR:**
Extração e Modularização do Domínio de Autenticação

**CURRENT STATE:**
Os 7 endpoints de autenticação (login, register, logout, change-password, forgot-password, sessions) e sua lógica estão definidos diretamente dentro do arquivo monolítico `server/routes.ts`.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo `server/routes/auth/index.ts` é criado.
2.  Toda a lógica e as definições dos 7 endpoints de autenticação são **movidas** (recortadas) de `server/routes.ts` para o novo arquivo `server/routes/auth/index.ts`.
3.  O novo arquivo `auth/index.ts` importa o `express.Router`, define as rotas nele e o exporta como `default`.
4.  O arquivo `server/routes.ts` é limpo da lógica de autenticação e, em seu lugar, contém uma nova declaração de `import` para o roteador de autenticação e uma linha `app.use('/api/auth', authRouter)` para montá-lo.
5.  A aplicação reinicia e permanece 100% funcional, sem erros de inicialização.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Novo Módulo:** Crie o arquivo `server/routes/auth/index.ts`. Adicione o boilerplate inicial para um `express.Router`.
2.  **Identifique e Recorte:** Em `server/routes.ts`, localize o bloco de código que define os 7 endpoints de `/api/auth/`. Recorte este bloco inteiro.
3.  **Cole no Novo Módulo:** Cole a lógica das rotas no novo arquivo `auth/index.ts`, anexando-as à nova instância do `Router`.
4.  **Migre as Dependências:** Analise o código que você moveu. Copie todas as declarações de `import` necessárias de `server/routes.ts` para o topo de `auth/index.ts` para resolver as dependências.
5.  **Refatore o Monolito:** Em `server/routes.ts`, no local onde o código foi removido, adicione a importação para o novo módulo (`import authRouter from './auth/index';`) e monte o roteador no Express app (`app.use('/api/auth', authRouter);`).
6.  **Validação Final Mandatória:** Reinicie o servidor de aplicação. A missão só é considerada um sucesso se o servidor iniciar sem nenhum erro relacionado à montagem das rotas ou dependências ausentes. Reporte o status do servidor como prova final.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO. O risco principal é quebrar a inicialização do servidor se a migração de dependências for incompleta.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que todas as rotas de auth estão agrupadas no monolito e podem ser movidas em um único bloco."]
* **VALIDAÇÃO PENDENTE:** [Testes de regressão nos endpoints de autenticação são necessários após esta refatoração.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (`server/routes.ts` modificado, `server/routes/auth/index.ts` criado).
2.  Garantir que todas as importações necessárias foram migradas para o novo módulo.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0-100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (reiniciar o servidor e garantir que ele inicie sem erros).
7.  **Documentar Decisões Técnicas** confirmando o sucesso da refatoração.