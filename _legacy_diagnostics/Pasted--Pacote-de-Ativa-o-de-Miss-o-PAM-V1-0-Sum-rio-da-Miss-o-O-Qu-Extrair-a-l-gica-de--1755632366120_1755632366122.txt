### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Extrair a lógica de rotas do "Core de Propostas" do monolito `server/routes.ts` para um novo módulo dedicado em `server/routes/propostas/index.ts`.
* **Intenção Estratégica (O Porquê):** Remover o principal domínio de negócio do "God File". Esta extração representará a maior redução de complexidade e acoplamento no monolito, sendo o passo mais impactante para melhorar a manutenibilidade da arquitetura.
* **Histórico Relevante (Consulta Obrigatória):** As missões anteriores (2.3 e 2.4) estabeleceram um padrão de sucesso para extrair domínios. A auditoria inicial identificou cerca de 22 endpoints com o prefixo `/api/propostas/` no monolito.
* **Modelo Mental (Como se Encaixa):** Esta é a extração mais complexa até agora. O Agente deve aplicar o mesmo padrão tático das missões anteriores, mas com atenção redobrada às múltiplas dependências que a lógica de propostas possui.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A lógica de propostas é altamente acoplada a outros serviços e helpers. Uma migração de dependências incompleta resultará em falha total na inicialização do servidor.
    * **Contramedida:** O prompt exige uma análise cuidadosa das dependências e a aplicação do mesmo padrão de refatoração validado anteriormente. A validação final pelo reinício do servidor é mandatória.

---

**IMPLEMENTAR:**
Extração e Modularização do Domínio de Propostas

**CURRENT STATE:**
Aproximadamente 22 endpoints que gerenciam a criação, leitura, atualização e outras operações em propostas de crédito estão implementados diretamente dentro do arquivo monolítico `server/routes.ts`.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo `server/routes/propostas/index.ts` é criado.
2.  Toda a lógica e as definições dos endpoints de propostas (prefixo `/api/propostas/`) são **movidas** de `server/routes.ts` para o novo arquivo.
3.  O novo arquivo `propostas/index.ts` importa o `express.Router`, define as rotas nele e o exporta como `default`.
4.  O arquivo `server/routes.ts` é limpo da lógica de propostas e, em seu lugar, contém uma nova declaração de `import` para o roteador de propostas e uma linha `app.use('/api/propostas', propostasRouter)` para montá-lo.
5.  A aplicação reinicia e permanece 100% funcional, sem erros de inicialização.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Novo Módulo:** Crie o arquivo `server/routes/propostas/index.ts` e adicione o boilerplate para um `express.Router`.
2.  **Identifique e Recorte:** Em `server/routes.ts`, localize o bloco de código que define todos os endpoints que começam com `/api/propostas/`. Recorte este bloco.
3.  **Cole no Novo Módulo:** Cole a lógica das rotas no novo arquivo `propostas/index.ts`, anexando-as à instância do `Router`.
4.  **Migre as Dependências:** Analise meticulosamente o código movido. Copie todas as declarações de `import` necessárias de `server/routes.ts` para o topo de `propostas/index.ts` e ajuste os caminhos relativos.
5.  **Refatore o Monolito:** Em `server/routes.ts`, delete o código extraído e substitua-o pela importação do novo módulo (`import propostasRouter from './propostas/index';`) e pela montagem do roteador (`app.use('/api/propostas', propostasRouter);`).
6.  **Validação Final Mandatória:** Reinicie o servidor de aplicação. A missão só é considerada um sucesso se o servidor iniciar sem nenhum erro. Reporte o status do servidor e o resultado do `get_latest_lsp_diagnostics` como prova final.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO. Este é o passo de maior risco da Fase 2.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que todas as rotas de propostas estão agrupadas e podem ser movidas em um único bloco."]
* **VALIDAÇÃO PENDENTE:** [Testes de regressão extensivos em toda a funcionalidade de propostas são necessários após esta refatoração.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (`server/routes.ts` modificado, `server/routes/propostas/index.ts` criado).
2.  Garantir que todas as importações necessárias foram migradas para o novo módulo.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0-100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (reiniciar o servidor e garantir que ele inicie sem erros).
7.  **Documentar Decisões Técnicas** confirmando o sucesso da refatoração.