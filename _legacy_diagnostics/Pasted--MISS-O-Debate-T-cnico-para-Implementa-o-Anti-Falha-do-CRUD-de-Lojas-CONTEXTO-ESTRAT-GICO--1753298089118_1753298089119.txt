# MISSÃO: Debate Técnico para Implementação Anti-Falha do CRUD de Lojas

**CONTEXTO ESTRATÉGICO:**
Estamos a iniciar a missão de completar o CRUD para a "Gestão de Lojas", implementando as operações de **Update (`PUT`)** e **Delete (`DELETE`)**. Para garantir uma implementação robusta, estamos a iniciar um debate técnico para antecipar todos os pontos de falha.

**SUA TAREFA (ASSISTENTE):**
A sua tarefa não é escrever código. A sua tarefa é atuar como um Arquiteto de Soluções e iniciar um debate técnico comigo (o Orquestrador). Você deve analisar a missão e propor um plano de implementação detalhado, com foco em identificar riscos e justificar decisões. Esta será a nossa **Interação 1 de 3**.

---
### **Análise da Missão (Sua Perspectiva)**

**Missão:** Implementar os endpoints `PUT /api/admin/lojas/:id` e `DELETE /api/admin/lojas/:id`.

**Regras de Negócio Conhecidas:**
1.  Ambos os endpoints devem ser protegidos e acessíveis apenas por `ADMINISTRADORES`.
2.  A exclusão de uma loja só é permitida se ela não tiver `Usuários` (`profiles`) ou `Propostas` associadas a ela.

### **Interação 1: Sua Proposta de Plano e Análise de Risco**

Por favor, responda seguindo **exatamente** esta estrutura:

**1. Proposta de Sequenciamento Lógico:**
* Qual a ordem de implementação ideal para os dois endpoints (`PUT` e `DELETE`)? Devemos implementar a lógica de backend e frontend para um de cada vez (feature slice), ou todo o backend primeiro? Justifique a sua recomendação.

**2. Análise de Risco do Backend:**
* **Endpoint `PUT /api/admin/lojas/:id`:** Qual é o maior risco técnico ao implementar a atualização de uma loja? Como o nosso schema Zod deve ser estruturado para validar o corpo da requisição de forma segura?
* **Endpoint `DELETE /api/admin/lojas/:id`:** Esta é a operação mais arriscada. Qual é a forma mais robusta e performática de verificar em uma única operação se uma loja possui `Usuários` **OU** `Propostas` associadas antes de permitir a exclusão? Proponha a query ou a lógica de verificação.

**3. Análise de Risco do Frontend:**
* **Feedback ao Usuário:** Como a interface deve reagir à tentativa de excluir uma loja que está em uso? Qual a mensagem exata que a notificação "toast" de erro deve exibir para o administrador?
* **Gerenciamento de Estado:** Qual a estratégia de invalidação de cache do TanStack Query que devemos usar após uma atualização ou exclusão bem-sucedida para garantir que a UI reflita o estado mais recente?

**4. Proposta de "Contrato de API":**
* Defina o "contrato" para os nossos endpoints. Qual deve ser o formato do `body` da requisição `PUT`? Quais devem ser os códigos de status e os formatos das respostas de sucesso e de erro para `PUT` e `DELETE`?

---