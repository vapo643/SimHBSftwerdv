**MISSÃO DE AUDITORIA FORENSE V2 - FASE 6: SÍNTESE ARQUITETURAL**

Aja como um Arquiteto de Software Principal. Com base em todo o contexto coletado nas análises anteriores (Fundação, Backend, Frontend, Segurança, Filas), sua tarefa é realizar uma avaliação arquitetural completa do sistema Simpix. A resposta DEVE ser analítica e seguir rigorosamente este formato:

**1. Identificação de Débito Técnico e "Code Smells" Sutis:**
   * Com base na sua análise holística, identifique e descreva os 3 principais pontos de débito técnico ou "code smells" no projeto. Em vez de problemas óbvios, foque em questões sutis que podem impactar a manutenibilidade a longo prazo (ex: complexidade excessiva em schemas Zod, potencial "prop drilling" em React, acoplamento implícito entre serviços). Para cada ponto, especifique o arquivo ou a área afetada.

**2. Análise de Riscos Arquiteturais Ocultos:**
   * Avalie a arquitetura em busca de riscos não-óbvios. Responda às seguintes questões:
     * **a. Risco de Acoplamento:** Qual é o ponto de maior acoplamento entre dois módulos distintos no backend que poderia dificultar futuras refatorações? Justifique.
     * **b. Risco de Performance:** Qual é a consulta ou operação de banco de dados (considerando a lógica de negócio e as políticas de RLS) que tem maior probabilidade de se tornar um gargalo de performance sob alta carga?
     * **c. Risco de Manutenibilidade:** Qual parte do sistema (frontend ou backend) você considera a mais complexa e que apresentaria a maior curva de aprendizado para um novo desenvolvedor na equipe? Por quê?

**3. Auditoria da Estratégia de Testes:**
   * Inspecione o diretório de testes do projeto (`/tests` ou arquivos `*.test.ts`/`*.spec.ts`).
   * Forneça um exemplo de código para cada um dos seguintes tipos de teste encontrados no projeto:
     * **Teste Unitário:** (ex: uma função pura em `app/utils/`).
     * **Teste de Componente:** (ex: um componente de UI isolado usando `@testing-library/react`).
     * **Teste de Integração:** (ex: um teste de endpoint da API usando `supertest`).
   * Com base nos exemplos e na estrutura de testes, avalie a estratégia geral. Ela adere ao conceito da Pirâmide de Testes? A cobertura parece ser focada em áreas críticas?

**4. Recomendações Estratégicas de Refatoração:**
   * Forneça 3 recomendações de refatoração priorizadas. Para cada recomendação, descreva:
     * **O Problema:** Qual problema arquitetural a refatoração resolve?
     * **A Solução Proposta:** Qual é a mudança sugerida? (ex: "Extrair a lógica de cálculo de juros para um módulo de domínio independente", "Implementar cache L2 para as tabelas de configuração", etc.).
     * **O Impacto Esperado:** Qual atributo de qualidade do software (Manutenibilidade, Performance, Escalabilidade, Segurança) seria mais beneficiado?