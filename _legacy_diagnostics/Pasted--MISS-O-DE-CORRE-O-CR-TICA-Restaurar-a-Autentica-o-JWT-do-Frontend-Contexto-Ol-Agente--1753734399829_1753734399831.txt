# MISSÃO DE CORREÇÃO CRÍTICA: Restaurar a Autenticação JWT do Frontend

**Contexto:** Olá, Agente. O seu último diagnóstico foi perfeito e identificou a causa raiz de todas as nossas falhas de carregamento de dados. O nosso frontend não está a conseguir enviar um token de autenticação JWT válido para o backend.

**O Problema (Sintoma):**
Como resultado, todas as nossas APIs protegidas estão a falhar com erros "Token de acesso requerido" ou "Token inválido ou expirado", impedindo que qualquer dado seja carregado nas nossas telas.

**Sua Missão (A Solução):**
A sua tarefa é refatorar a nossa camada de autenticação no **frontend** para garantir que uma sessão de usuário seja mantida de forma robusta e que o token JWT seja enviado em todas as requisições à API.

**Roadmap de Execução (A Arquitetura Correta):**

1.  **Refatore o `AuthContext` para ser Reativo:**
    * **Ficheiro Alvo:** `/client/src/contexts/AuthContext.tsx`.
    * **Lógica:** A forma mais robusta de gerir a autenticação é usando o listener `supabase.auth.onAuthStateChange`. Modifique o nosso `AuthProvider` para que ele use este "ouvinte". Ele deve detetar logins e logouts em tempo real e manter o estado da sessão (usuário e token) sempre atualizado no contexto.

2.  **Garanta a Leitura e Disponibilização do Token:**
    * **Tarefa:** Dentro do `AuthContext`, garanta que o `accessToken` seja lido da sessão do Supabase (que o armazena de forma segura) e seja disponibilizado para toda a aplicação através do seu `Context.Provider`.

3.  **Injete o Token em Todas as Requisições da API:**
    * **Ficheiro Alvo:** `/client/src/lib/apiClient.ts`.
    * **Tarefa:** Modifique a nossa função `apiClient`. Antes de cada requisição, ela deve obter o token JWT mais recente do `AuthContext` e injetá-lo no `header` "Authorization: Bearer <token>".

**Resumo da Missão:**
Faça com que o nosso frontend mantenha a sessão do usuário ativa e envie o token de autenticação em todas as chamadas à API, eliminando os erros de "Token de acesso requerido".