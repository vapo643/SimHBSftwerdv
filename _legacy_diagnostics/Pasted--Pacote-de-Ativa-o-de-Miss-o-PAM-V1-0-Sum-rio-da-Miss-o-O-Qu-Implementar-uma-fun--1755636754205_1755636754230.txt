### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Implementar uma função helper de "setup" de teste que crie um contexto de dados autêntico (usuário, loja) usando o Supabase Admin Client para satisfazer as políticas de RLS.
* **Intenção Estratégica (O Porquê):** Desbloquear permanentemente nossa suíte de testes de integração. Permitir que os testes operem em um ambiente seguro e realista que espelha a produção (com RLS ativado) é fundamental para garantir a confiabilidade do nosso sistema.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior (4.1.1) foi bloqueada por erros de RLS que impediram a criação de dados de teste na fase de `setup`. O Agente recomendou usar o Supabase Admin Client para contornar o RLS durante o setup dos testes.
* **Modelo Mental (Como se Encaixa):** Esta missão cria a contraparte do `cleanTestDatabase`. Teremos um `setupTestEnvironment` para construir o mundo para cada teste e `cleanTestDatabase` para destruí-lo. Juntos, eles garantirão um ambiente de teste 100% isolado e previsível.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O Supabase Admin Client pode não estar configurado ou acessível no ambiente de teste.
    * **Contramedida:** O Agente deve primeiro verificar a existência de um `supabaseAdmin` client no código e importá-lo corretamente.

---

**IMPLEMENTAR:**
Helper de Setup para Testes de Integração com RLS

**CURRENT STATE:**
Os testes de integração em `tests/integration/status-system.test.ts` falham na fase de `setup` (`beforeEach`) porque as inserções de dados para criar propostas de teste violam as políticas de RLS, que exigem um `auth.uid()` válido e associações de loja/parceiro.

**EXPECTED (Estado Final de Sucesso):**
1.  Uma nova função assíncrona, `async function setupTestEnvironment()`, é criada e exportada do arquivo `tests/lib/db-helper.ts`.
2.  Esta função utiliza o **`supabaseAdmin` client** (que ignora o RLS) para inserir os registros pré-requisito no banco de dados: um `usuário` de teste, uma `loja` de teste e um `parceiro` de teste.
3.  A função retorna os objetos completos das entidades que criou (ex: `{ testUser, testStore, testPartner }`).
4.  O hook `beforeEach` em `tests/integration/status-system.test.ts` é refatorado para:
    a. Chamar `await cleanTestDatabase()` primeiro.
    b. Em seguida, chamar `await setupTestEnvironment()`.
    c. Usar os IDs retornados pelo setup para criar a `proposta` de teste, satisfazendo todas as constraints de chave estrangeira.
5.  **O critério de sucesso final e não negociável:** A execução do comando `npx vitest run tests/integration/status-system.test.ts` resulta em **TODOS os testes passando com sucesso**.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Use o Admin Client:** A implementação DEVE usar a instância do `supabaseAdmin` client para todas as operações de inserção de dados no setup, a fim de contornar as políticas de RLS.
2.  **Refatore o Teste:** Modifique o arquivo `tests/integration/status-system.test.ts` para usar o novo helper `setupTestEnvironment` dentro do `beforeEach`. A criação da proposta de teste deve ser feita usando os IDs retornados por este helper.
3.  **Garanta a Passagem dos Testes:** A missão só é considerada bem-sucedida quando a suíte de testes de integração `status-system.test.ts` estiver 100% verde (todos os testes passando). O output final do `vitest` deve ser incluído no seu relatório como prova.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o `supabaseAdmin` client está corretamente configurado com a `SERVICE_ROLE_KEY` no ambiente de teste."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela passagem de 100% dos testes na suíte.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas.
2.  Garantir importações e tipos corretos, especialmente do `supabaseAdmin` client.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (100%)** na correção do ambiente de teste.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a suíte de testes e garantir que todos passem).
7.  **Documentar Decisões Técnicas** como a estrutura dos dados de teste criados.