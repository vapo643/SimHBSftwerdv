**IMPLEMENTAR:** Correção final e implementação completa do fluxo de download, armazenamento e visualização da CCB assinada na "Página de Pagamentos do Financeiro".

**CONTEXT:** A validação final revelou que o botão "Visualizar CCB Assinada" não está funcional. A lógica de negócio correta e completa precisa ser implementada para garantir conformidade e eficiência. O fluxo de trabalho mandatório é: **API ClickSign (fonte da verdade) -> Supabase Storage (nosso cache permanente) -> UI (visualização segura)**.

**CURRENT STATE:** Um botão existe na UI, mas ao ser clicado, não executa o fluxo completo de busca e armazenamento, falhando em exibir o documento.

**EXPECTED (Estado Final de Sucesso):**
Um fluxo de trabalho robusto e inteligente. Ao clicar no botão "Visualizar CCB Assinada", o sistema executa o seguinte:
1.  **Verificação de Cache:** O backend primeiro verifica se o PDF assinado para aquela proposta já existe em nosso Supabase Storage.
2.  **Fluxo Cache HIT (Arquivo Existe):** Se o arquivo já está no Storage, o sistema gera uma URL de visualização segura e temporária e a retorna para o frontend.
3.  **Fluxo Cache MISS (Arquivo Não Existe):**
    a. O backend faz uma requisição para a API da ClickSign para baixar o PDF assinado.
    b. O backend salva o PDF baixado em nosso Supabase Storage, na pasta `ccb/assinadas/{proposta-id}/`.
    c. O backend então gera uma URL de visualização segura e temporária para o arquivo recém-salvo e a retorna.
4.  **Ação no Frontend:** O frontend recebe a URL e abre o documento em uma nova aba.

**CONSTRAINTS (Roadmap de Implementação Detalhado):**

**1. Refatoração do Endpoint de Backend:**
    - **Ação:** Refatore o endpoint `GET /api/pagamentos/:id/ccb-url`. Toda a lógica de cache descrita acima deve ser implementada dentro dele.
    - **Lógica:**
        - Passo 1: Receber o `propostaId`.
        - Passo 2: Construir o caminho esperado do arquivo no Supabase Storage (ex: `ccb/assinadas/{propostaId}/ccb_assinada.pdf`).
        - Passo 3: Tentar verificar a existência desse arquivo no Storage.
        - Passo 4: Se existir, gerar e retornar a URL assinada.
        - Passo 5: Se não existir, executar a lógica de download do ClickSign, upload para o Storage e SÓ ENTÃO gerar e retornar a URL assinada.

**2. Serviço do ClickSign:**
    - **Ação:** Garanta que o `clicksignService.ts` tenha um método que receba o `clicksign_document_key` e retorne o buffer do PDF baixado.

**3. Integração com Supabase Storage:**
    - **Ação:** Utilize o cliente do Supabase para implementar a lógica de `upload` do buffer do PDF e `createSignedUrl` para gerar o link de visualização.

**TESTE:**
- Execute o teste em uma proposta que NUNCA teve o botão clicado antes.
- **Primeiro Clique:** Valide nos logs que a chamada à API da ClickSign foi feita e que o arquivo foi salvo no Supabase Storage. O PDF deve abrir.
- **Segundo Clique (na mesma proposta):** Valide nos logs que a chamada à API da ClickSign **NÃO** foi feita, provando que o cache inteligente está a funcionar. O PDF deve abrir mais rapidamente.