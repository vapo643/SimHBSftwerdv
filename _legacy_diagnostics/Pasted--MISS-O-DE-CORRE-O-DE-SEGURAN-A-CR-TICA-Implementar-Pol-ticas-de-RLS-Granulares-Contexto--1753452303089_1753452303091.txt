# MISSÃO DE CORREÇÃO DE SEGURANÇA CRÍTICA: Implementar Políticas de RLS Granulares

**Contexto:** A nossa implementação anterior de RLS foi incorreta e criou uma vulnerabilidade de segurança que permite que qualquer usuário veja todos os dados. A sua nova missão é substituir as políticas "PERMITIR TUDO" por políticas granulares e seguras que reforcem o nosso modelo de negócio multi-tenant.

**AÇÃO:**
Execute os seguintes comandos SQL no nosso banco de dados Supabase para remover as políticas inseguras e implementar as corretas.

**ROADMAP DE EXECUÇÃO (SQL - Sequencial):**

---
**PASSO 1: REMOVER AS POLÍTICAS INSEGURAS EXISTENTES**
* **Tarefa:** Execute comandos `DROP POLICY` para remover as políticas de `SELECT` que você criou anteriormente nas tabelas `profiles`, `lojas`, `parceiros` e `propostas`.

---
**PASSO 2: IMPLEMENTAR A POLÍTICA CORRETA PARA `profiles`**
* **Tarefa:** Crie uma nova política de `SELECT` para a tabela `profiles` que permita que um usuário veja **apenas o seu próprio perfil**, a menos que a `role` do solicitante (vinda do token JWT) seja `ADMINISTRADOR`.
    * **Dica de Lógica:** `USING (auth.uid() = id OR (auth.jwt() ->> 'role')::text = 'ADMINISTRADOR')`

---
**PASSO 3: IMPLEMENTAR A POLÍTICA CORRETA PARA `propostas`**
* **Tarefa:** Crie uma nova política de `SELECT` para a tabela `propostas` que implemente a nossa lógica de negócio complexa. Utilize a função auxiliar `get_current_user_context()` que já projetamos para obter a `role` e a `loja_id` do usuário.
    * **Regras de Acesso:**
        * `ATENDENTE`: Só pode ver propostas onde `autor_id = auth.uid()`.
        * `GERENTE`: Pode ver todas as propostas da sua `loja_id`.
        * `ADMINISTRADOR` e `ANALISTA`: Podem ver tudo.

---
**PASSO 4: IMPLEMENTAR AS POLÍTICAS CORRETAS PARA `lojas` E `parceiros`**
* **Tarefa:** Crie políticas de `SELECT` para as tabelas `lojas` e `parceiros` que permitam a leitura **apenas** para usuários com as `roles` `ADMINISTRADOR` ou `GERENTE`.

---
Execute este plano para blindar a segurança do nosso banco de dados.