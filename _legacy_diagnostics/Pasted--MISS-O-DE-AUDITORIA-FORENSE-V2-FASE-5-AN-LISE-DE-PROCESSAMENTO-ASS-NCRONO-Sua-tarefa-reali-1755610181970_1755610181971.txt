**MISSÃO DE AUDITORIA FORENSE V2 - FASE 5: ANÁLISE DE PROCESSAMENTO ASSÍNCRONO**

Sua tarefa é realizar uma auditoria completa da arquitetura de processamento assíncrono baseada em BullMQ. A análise deve cobrir a configuração, a lógica dos workers, a produção de jobs e as estratégias de resiliência. A resposta DEVE seguir rigorosamente este formato:

**1. Configuração da Fila e Conexão Redis:**
   * Localize o arquivo onde as instâncias da Fila (`Queue`) e dos Workers (`Worker`) do BullMQ são criadas e configuradas.
   * Apresente o código de configuração da conexão com o Redis, mostrando como a `REDIS_URL` é utilizada.
   * Detalhe as `defaultJobOptions` configuradas para as filas, explicando o significado das opções de `attempts` (tentativas) e `backoff` (estratégia de recuo em caso de falha).

**2. Implementação do Worker e Tratamento de Falhas:**
   * Selecione o worker mais crítico para o negócio (ex: o worker responsável por gerar boletos com a API do Banco Inter).
   * Forneça o código completo da função de processamento (`processor`) deste worker.
   * Destaque especificamente como o worker lida com falhas durante o processamento do job. Mostre o bloco `try/catch`, a lógica de log de erros e se ele lança uma exceção para acionar a estratégia de `retry` do BullMQ.

**3. Produção de Jobs (Enfileiramento):**
   * Localize e apresente o trecho de código na camada de serviço (ex: `paymentService.ts` ou `formalizationService.ts`) que é responsável por adicionar um novo job à fila de geração de boletos.
   * Analise a chamada `.add()` do BullMQ e detalhe:
     * O nome do job.
     * A estrutura de dados do `payload` (os dados enviados para o worker).
     * Quaisquer opções específicas do job que são passadas (ex: `jobId`, `delay`, `priority`).

**4. Estratégia de Monitoramento e Eventos da Fila:**
   * Inspecione o código de inicialização dos workers.
   * Identifique se existem "event listeners" (escutadores de eventos) configurados para as filas ou workers.
   * Forneça exemplos de código que mostrem como o sistema monitora e reage a eventos importantes do ciclo de vida dos jobs, como `completed` (concluído), `failed` (falhou) e `stalled` (travado).