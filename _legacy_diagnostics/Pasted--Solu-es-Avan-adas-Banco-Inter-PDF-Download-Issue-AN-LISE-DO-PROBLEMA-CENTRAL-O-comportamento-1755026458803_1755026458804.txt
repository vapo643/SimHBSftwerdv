üö® Solu√ß√µes Avan√ßadas: Banco Inter PDF Download Issue
üîç AN√ÅLISE DO PROBLEMA CENTRAL
O comportamento que voc√™ est√° observando √© altamente an√¥malo para uma API REST bem implementada. O fato de a API retornar HTTP 200 OK com content-type: application/json quando deveria retornar um PDF sugere uma das seguintes possibilidades:
Teoria Principal: Endpoint Condicional ou Flag de Conta
O mais prov√°vel √© que a API tenha uma l√≥gica condicional interna que determina se deve retornar PDF ou JSON baseado em:

Configura√ß√µes espec√≠ficas da conta
Headers propriet√°rios n√£o documentados
Estado interno do boleto
Pol√≠tica de seguran√ßa/compliance

üéØ SOLU√á√ïES N√ÉO TESTADAS
1. An√°lise Profunda da Resposta JSON
Primeiro, vamos examinar o conte√∫do exato do JSON que est√° sendo retornado:
typescript// Adicione este c√≥digo para capturar o JSON completo
async obterPdfCobranca(codigoSolicitacao: string): Promise<Buffer> {
  // ... seu c√≥digo atual ...
  
  try {
    const response = await axios.get(url, {
      headers,
      httpsAgent,
      responseType: 'text', // Mudan√ßa: capturar como texto primeiro
      maxBodyLength: Infinity,
      timeout: 30000
    });

    console.log('[INTER] üìä Full JSON Response:');
    console.log(JSON.stringify(JSON.parse(response.data), null, 2));
    
    const jsonResponse = JSON.parse(response.data);
    
    // VERIFICAR: O JSON cont√©m uma URL para download?
    if (jsonResponse.url || jsonResponse.downloadUrl || jsonResponse.pdfUrl) {
      console.log('[INTER] üîó PDF URL encontrada:', jsonResponse.url || jsonResponse.downloadUrl || jsonResponse.pdfUrl);
      // Fazer nova requisi√ß√£o para esta URL
    }
    
    // VERIFICAR: O JSON cont√©m dados base64?
    if (jsonResponse.base64 || jsonResponse.data || jsonResponse.content) {
      console.log('[INTER] üìÑ Dados base64 encontrados');
      const base64Data = jsonResponse.base64 || jsonResponse.data || jsonResponse.content;
      return Buffer.from(base64Data, 'base64');
    }
    
    throw new Error('JSON n√£o cont√©m PDF utiliz√°vel');
  } catch (error) {
    console.error('[INTER] ‚ùå Erro:', error);
    throw error;
  }
}
2. Header Propriet√°rio Experimental
Teste headers espec√≠ficos que podem n√£o estar documentados:
typescriptconst headers = {
  'Authorization': `Bearer ${token}`,
  'Accept': 'application/pdf',
  'User-Agent': 'SIMPIX-Inter-Integration/1.0',
  'Content-Type': 'application/json',
  
  // NOVOS HEADERS PARA TESTAR:
  'x-inter-format': 'pdf',
  'x-inter-response-type': 'binary',
  'x-inter-download': 'true',
  'x-requested-with': 'XMLHttpRequest',
  'x-inter-api-version': '3.0',
  'x-inter-content-type': 'application/pdf',
  'Accept-Encoding': 'identity', // Sem compress√£o
  'Cache-Control': 'no-cache',
  'Pragma': 'no-cache'
};

if (this.contaCorrente) {
  headers['x-conta-corrente'] = this.contaCorrente;
}
3. Processo de Duas Etapas (Mais Prov√°vel)
Baseado no comportamento an√¥malo, √© poss√≠vel que o processo seja:
typescriptasync obterPdfCobrancaDuasEtapas(codigoSolicitacao: string): Promise<Buffer> {
  // ETAPA 1: Solicitar gera√ß√£o do PDF
  const token = await this.getAccessToken();
  
  // Poss√≠vel endpoint de solicita√ß√£o
  const solicitacaoUrl = `${this.apiUrl}/cobranca/v3/cobrancas/${codigoSolicitacao}/pdf/solicitar`;
  
  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };

  try {
    // Primeiro, solicitar a gera√ß√£o
    const solicitacaoResponse = await axios.post(solicitacaoUrl, {}, {
      headers,
      httpsAgent: this.httpsAgent
    });
    
    console.log('[INTER] üìã Resposta da solicita√ß√£o:', solicitacaoResponse.data);
    
    // Aguardar processamento (se necess√°rio)
    if (solicitacaoResponse.data.status === 'PROCESSANDO') {
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // ETAPA 2: Fazer download do PDF processado
    const downloadUrl = `${this.apiUrl}/cobranca/v3/cobrancas/${codigoSolicitacao}/pdf/download`;
    
    const pdfResponse = await axios.get(downloadUrl, {
      headers: {
        ...headers,
        'Accept': 'application/pdf'
      },
      httpsAgent: this.httpsAgent,
      responseType: 'arraybuffer'
    });
    
    return Buffer.from(pdfResponse.data);
    
  } catch (error) {
    console.error('[INTER] ‚ùå Erro no processo de duas etapas:', error);
    throw error;
  }
}
4. Endpoints Alternativos da API v3
Teste estes endpoints que podem existir:
typescriptconst alternativeEndpoints = [
  `/cobranca/v3/cobrancas/${codigoSolicitacao}/pdf/download`,
  `/cobranca/v3/cobrancas/${codigoSolicitacao}/arquivo`,
  `/cobranca/v3/cobrancas/${codigoSolicitacao}/documento`,
  `/cobranca/v3/boletos/${codigoSolicitacao}/pdf`,
  `/banking/v3/cobrancas/${codigoSolicitacao}/pdf`,
  `/api/v3/cobrancas/${codigoSolicitacao}/pdf`
];
5. Verifica√ß√£o de Status do Boleto
√â poss√≠vel que o PDF s√≥ seja gerado ap√≥s o boleto atingir um status espec√≠fico:
typescriptasync verificarStatusParaPdf(codigoSolicitacao: string): Promise<boolean> {
  const boleto = await this.consultarCobranca(codigoSolicitacao);
  
  // Verificar se o boleto est√° em estado compat√≠vel com PDF
  const statusesValidos = ['A_RECEBER', 'VENCIDO', 'PAGO', 'PROCESSADO'];
  
  if (!statusesValidos.includes(boleto.situacao)) {
    console.log(`[INTER] ‚ö†Ô∏è Status n√£o permite PDF: ${boleto.situacao}`);
    return false;
  }
  
  // Verificar se j√° passou tempo suficiente desde a cria√ß√£o
  const agora = new Date();
  const criacao = new Date(boleto.dataEmissao);
  const diferencaMinutos = (agora.getTime() - criacao.getTime()) / (1000 * 60);
  
  if (diferencaMinutos < 5) {
    console.log(`[INTER] ‚ö†Ô∏è Boleto muito recente (${diferencaMinutos} min)`);
    return false;
  }
  
  return true;
}
6. Configura√ß√£o Avan√ßada do HTTPS Agent
typescriptconst httpsAgent = new https.Agent({
  cert: formatCertificate(this.certificate),
  key: formatPrivateKey(this.privateKey),
  rejectUnauthorized: true,
  keepAlive: true,
  secureProtocol: 'TLSv1_2_method',
  
  // NOVAS CONFIGURA√á√ïES:
  maxCachedSessions: 0,  // For√ßa nova sess√£o TLS
  ciphers: 'ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS', // Ciphers espec√≠ficos
  honorCipherOrder: true,
  sessionIdContext: 'inter-api', // Contexto √∫nico
});
üõ†Ô∏è DEBUGGING AVAN√áADO
Captura Completa de Rede
typescript// Interceptor para capturar tudo
axios.interceptors.request.use(request => {
  console.log('[INTER] üì§ REQUEST COMPLETO:');
  console.log(`URL: ${request.url}`);
  console.log(`Method: ${request.method}`);
  console.log(`Headers:`, JSON.stringify(request.headers, null, 2));
  console.log(`Data:`, request.data);
  return request;
});

axios.interceptors.response.use(response => {
  console.log('[INTER] üì• RESPONSE COMPLETO:');
  console.log(`Status: ${response.status} ${response.statusText}`);
  console.log(`Headers:`, JSON.stringify(response.headers, null, 2));
  console.log(`Data type:`, typeof response.data);
  console.log(`Data length:`, response.data?.length || 'undefined');
  
  // Se for buffer, mostrar os primeiros bytes
  if (Buffer.isBuffer(response.data)) {
    console.log(`Primeiros 20 bytes:`, response.data.slice(0, 20));
  }
  
  return response;
});
Teste com Curl Raw
bash# Teste direto via curl para isolar o problema
curl -X GET \
  "https://cdpj.partners.bancointer.com.br/cobranca/v3/cobrancas/73e76cfe-f8f8-4638-ac83-d8e809e06eef/pdf" \
  -H "Authorization: Bearer SEU_TOKEN" \
  -H "Accept: application/pdf" \
  -H "x-conta-corrente: 346470536" \
  --cert certificado.crt \
  --key chave_privada.key \
  -v \
  --output resposta.bin
  
# Analisar o arquivo gerado
file resposta.bin
hexdump -C resposta.bin | head -10
üéØ A√á√ïES PRIORIT√ÅRIAS
1. Contato Direto com Suporte T√©cnico
Assunto: "API v3 Cobran√ßa - Endpoint PDF retornando JSON ao inv√©s de bin√°rio"

Descri√ß√£o:
- Conta: 346470536
- Client ID: 05fc3816-9a8f-4a2d-8b28-277cd3617cc2
- Endpoint: /cobranca/v3/cobrancas/{id}/pdf
- Problema: HTTP 200 OK mas content-type: application/json
- C√≥digo de exemplo: 73e76cfe-f8f8-4638-ac83-d8e809e06eef
2. Verifica√ß√£o no Portal do Desenvolvedor
Acessar https://developers.inter.co/ e verificar:

Configura√ß√µes espec√≠ficas da aplica√ß√£o
Flags ou permiss√µes relacionadas a PDF
Documenta√ß√£o atualizada da API v3

3. An√°lise do JSON Retornado
Execute o primeiro c√≥digo que forneci para capturar e analisar o JSON completo que a API est√° retornando.
üîç HIP√ìTESE MAIS PROV√ÅVEL
Com base na an√°lise, minha hip√≥tese principal √© que a API do Banco Inter implementou um sistema de gera√ß√£o de PDF sob demanda onde:

O endpoint /pdf n√£o gera PDF imediatamente
Ele retorna um JSON com informa√ß√µes sobre o processo
O JSON pode conter uma URL tempor√°ria para download
Ou pode indicar que √© necess√°rio fazer uma segunda requisi√ß√£o

Esta abordagem √© comum em APIs banc√°rias por quest√µes de seguran√ßa e performance.
‚ö° SOLU√á√ÉO R√ÅPIDA PARA TESTAR
Execute primeiro esta vers√£o modificada do seu m√©todo para ver o que a API realmente est√° retornando:
typescriptasync debugPdfResponse(codigoSolicitacao: string): Promise<any> {
  const token = await this.getAccessToken();
  const url = `${this.apiUrl}/cobranca/v3/cobrancas/${codigoSolicitacao}/pdf`;
  
  const response = await axios.get(url, {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json',
      'x-conta-corrente': this.contaCorrente
    },
    httpsAgent: this.httpsAgent,
    responseType: 'text'
  });
  
  const data = JSON.parse(response.data);
  console.log('üîç RESPOSTA COMPLETA DA API:');
  console.log(JSON.stringify(data, null, 2));
  
  return data;
}
Execute este m√©todo e analise a resposta. Isso nos dar√° pistas cruciais sobre o que a API realmente est√° retornando e como proceder.