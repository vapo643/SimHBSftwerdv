# MISSÃO DE IMPLEMENTAÇÃO (ANTI-FALHA): Formulário de Usuários com Filtragem Híbrida

**CONTEXTO ESTRATÉGICO:**
O plano de implementação para conectar o formulário de usuários aos dados reais foi finalizado após um debate técnico. A arquitetura aprovada é uma "Abordagem Híbrida Adaptativa" que otimiza a performance com base no volume total de dados do sistema.

**AÇÃO:**
Sua missão é implementar esta arquitetura de ponta a ponta, envolvendo a criação de novos endpoints de backend e a refatoração do frontend.

**ROADMAP DE EXECUÇÃO (Sequencial):**

**FASE 1: BACKEND - CRIAR OS NOVOS ENDPOINTS**
* **1.1 - Endpoint de Metadados:** Crie um novo endpoint `GET /api/admin/system/metadata`. Ele deve retornar um objeto JSON com a contagem total de lojas. Ex: `{ "totalLojas": 150 }`.
* **1.2 - Endpoint de Lojas por Parceiro:** Crie um novo endpoint `GET /api/admin/parceiros/:parceiroId/lojas`. Ele deve receber um `parceiroId` e retornar apenas as lojas associadas àquele parceiro.

**FASE 2: FRONTEND - IMPLEMENTAR A LÓGICA HÍBRIDA**
* **2.1 - Crie o Hook Customizado `useLojaFiltering`:**
    * Crie um novo hook customizado em React (ex: `/client/src/hooks/useLojaFiltering.ts`).
    * Este hook deve:
        a. Fazer uma chamada ao endpoint de metadados (`/api/admin/system/metadata`) para obter o `totalLojas`.
        b. Implementar uma lógica condicional: se `totalLojas` for menor ou igual a um limite (ex: 1000), ele deve executar uma query para buscar **TODAS** as lojas (`GET /api/admin/lojas`). Se for maior, ele deve preparar-se para buscar as lojas por parceiro.
        c. O hook deve aceitar um `selectedParceiroId` como argumento.
        d. Se estiver no modo "client-side" (poucas lojas), ele deve filtrar a lista completa de lojas em memória com base no `selectedParceiroId`.
        e. Se estiver no modo "server-side" (muitas lojas), ele deve usar o `selectedParceiroId` para fazer uma chamada à API `GET /api/admin/parceiros/:parceiroId/lojas`.
        f. O hook deve retornar os dados filtrados, o estado de carregamento (`isLoading`) e de erro.

* **2.2 - Integre o Hook na Página de Usuários:**
    * **Ficheiro Alvo:** `/client/src/pages/admin/usuarios/index.tsx` (e o formulário `UserForm.tsx`).
    * **Ação:** Refatore a página para utilizar o novo hook `useLojaFiltering`.
    * **Lógica:** Passe o `selectedParceiroId` para o hook e use os dados retornados por ele para popular o dropdown de "Loja". Garanta que toda a UX que planejamos (loading states, dropdowns desabilitados) seja controlada pelo estado retornado do hook.