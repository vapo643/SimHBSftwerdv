# MISSÃO DE IMPLEMENTAÇÃO (ARQUITETURA ANTI-FALHA): Refatoração Completa do Módulo de Usuários v2

**CONTEXTO ESTRATÉGICO:**
Este prompt é o resultado final de um debate arquitetural profundo. Ele contém a arquitetura final e aprovada para a recuperação e refatoração completa do Módulo de Usuários, com foco em estabilidade, escalabilidade e resiliência. A execução deve ser precisa e seguir os micro-passos sequencialmente.

**AÇÃO:**
Sua missão é executar uma refatoração de ponta a ponta do Módulo de Usuários, implementando a nova arquitetura "anti-frágil".

**ROADMAP DE EXECUÇÃO (MICRO-PASSOS):**

**MICRO-PASSO 1: Criar a Fundação dos Hooks e Query Keys**
* **1.1:** Crie o ficheiro `/client/src/hooks/queries/queryKeys.ts` e implemente a "fábrica" de chaves de query hierárquicas e isoladas para `users`, `partners`, e `stores`.
* **1.2:** Crie o ficheiro `/client/src/hooks/queries/useUserFormData.ts`. Implemente a estrutura básica do hook, que irá buscar os dados de Parceiros e Lojas, utilizando as novas query keys isoladas. Garanta que ele tenha estados específicos para `isLoading` e `error` de cada busca.

**MICRO-PASSO 2: Implementar a Estratégia de Filtragem Híbrida**
* **2.1 (Backend):** Crie o endpoint `GET /api/admin/system/metadata` que retorna o número total de lojas.
* **2.2 (Backend):** Garanta que o endpoint `GET /api/admin/parceiros/:parceiroId/lojas` existe e está funcional.
* **2.3 (Frontend):** No hook `useUserFormData.ts`, implemente a lógica de decisão:
    a. Busque os metadados.
    b. Se o total de lojas for baixo (<= 500), o hook deve buscar todas as lojas e realizar a filtragem no cliente.
    c. Se o total de lojas for alto (> 500), o hook deve buscar as lojas sob demanda usando o endpoint de lojas por parceiro.

**MICRO-PASSO 3: Integrar Error Boundaries e UX**
* **3.1:** Na página `/client/src/pages/admin/usuarios/index.tsx`, envolva a chamada ao formulário com um "Error Boundary" do React que trate as falhas de carregamento de dados do hook.
* **3.2:** Garanta que a UI exiba "skeletons" ou "spinners" granulares enquanto os dados do hook (`parceiros`, `lojas`) estão a ser carregados.
* **3.3:** Implemente as notificações "toast" para reportar falhas específicas de API ao usuário.

**MICRO-PASSO 4: Implementar a Estratégia de Invalidação de Cache**
* **Ação:** Revise todas as `mutations` (criar, editar, excluir) nas páginas de `Parceiros` e `Lojas`. Garanta que a lógica de `onSuccess` chame `queryClient.invalidateQueries` utilizando as novas chaves de query hierárquicas e isoladas para atualizar os dados de forma precisa e sem afetar caches de outras páginas.

**MICRO-PASSO 5: Finalizar a Integração do Formulário (`UserForm.tsx`)**
* **Ação:** Refatore o `UserForm.tsx` para que ele consuma os dados e estados providos pelo hook `useUserFormData`, garantindo que toda a lógica de cascata e feedback visual funcione perfeitamente.