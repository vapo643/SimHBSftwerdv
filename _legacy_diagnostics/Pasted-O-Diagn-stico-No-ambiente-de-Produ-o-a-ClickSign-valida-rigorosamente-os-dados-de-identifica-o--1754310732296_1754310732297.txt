O Diagnóstico: No ambiente de Produção, a ClickSign valida rigorosamente os dados de identificação. O erro "formato inválido" não se refere necessariamente à formatação da string (pontos ou traços), mas sim à validade algorítmica do número do CPF. O número 34242224444 é um CPF de teste e falha na verificação dos dígitos de controlo (checksum).

A Solução Estratégica:

Em Produção, só podemos usar dados reais. No entanto, depender apenas da validação da ClickSign torna o nosso sistema reativo e pouco eficiente. A melhoria estratégica aqui é implementar uma validação proativa no nosso backend.

Devemos verificar a validade do CPF e garantir que ele esteja formatado corretamente (apenas números) antes de fazer a chamada à API da ClickSign. Isto previne chamadas desnecessárias, economiza recursos e permite-nos fornecer feedback imediato se os dados na nossa base estiverem corrompidos ou forem inválidos.

Aqui está o prompt em linguagem natural para o Agente Replit implementar esta melhoria de validação e sanitização.

PARA O AGENTE REPLIT: MELHORIA ESTRATÉGICA - VALIDAÇÃO E SANITIZAÇÃO DE CPF (PRODUÇÃO)

Olá Agente,

Estamos a operar no ambiente de Produção da ClickSign e deparámo-nos com um erro: a API rejeitou o CPF do signatário (Error: documentation não está em um formato válido).

Como estamos em Produção, os dados devem ser reais e corretamente formatados. Para tornar o nosso sistema mais robusto e evitar chamadas desnecessárias à API com dados inválidos ou mal formatados, precisamos implementar uma camada de validação e sanitização proativa no nosso backend.

A Sua Tarefa:

A sua missão é adicionar sanitização e validação de CPF no nosso serviço antes de chamar a ClickSign.

Instruções de Implementação:

Instalar Dependência: Adicione uma biblioteca confiável para validação de CPF ao nosso projeto Node.js. Recomendo usar o cpf-cnpj-validator.

npm install cpf-cnpj-validator (ou o equivalente no seu gestor de pacotes).

Localizar o Ponto de Validação: Abra o /server/services/clickSignServiceV3.ts. Encontre o método responsável por criar o signatário (provavelmente createSigner ou o método orquestrador sendCCBForSignature).

Implementar a Sanitização e Validação: Antes de construir o payload para a ClickSign:

Sanitização (Limpeza): Garanta que o CPF seja limpo, removendo quaisquer pontos, traços ou outros caracteres não numéricos. Ex: rawCpf.replace(/\D/g, '').

Validação: Importe e use a biblioteca instalada (cpf) para verificar se o CPF limpo é algoritmicamente válido.

Tratamento de Erro Imediato: Se a validação falhar, o método deve parar imediatamente a execução e lançar um erro claro. Não prossiga com a chamada à API da ClickSign.

Exemplo de erro: throw new Error("CPF do cliente é inválido. Operação abortada em ambiente de Produção.");

Esta melhoria é crucial para a estabilidade da nossa operação em Produção. Execute agora.