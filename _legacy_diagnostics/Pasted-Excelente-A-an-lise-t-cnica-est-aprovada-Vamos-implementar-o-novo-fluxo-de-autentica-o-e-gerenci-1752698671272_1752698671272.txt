Excelente. A análise técnica está aprovada. Vamos implementar o novo fluxo de autenticação e gerenciamento de sessão para nossa arquitetura React + Express.js.

Por favor, execute o seguinte plano de refatoração, criando e modificando os arquivos exatamente como descrito abaixo:

**1. Crie o Middleware de Autenticação no Backend:**
Crie um novo arquivo em `/server/lib/auth.ts` com o seguinte conteúdo:

```typescript
import { Request, Response, NextFunction } from "express";
import { supabase } from "./supabase";

export interface AuthRequest extends Request {
  user?: {
    id: string;
    email: string;
  };
}

export async function authMiddleware(
  req: AuthRequest,
  res: Response,
  next: NextFunction
) {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ message: "No token provided" });
    }

    const token = authHeader.split(" ")[1];
    
    const { data: { user }, error } = await supabase.auth.getUser(token);
    
    if (error || !user) {
      return res.status(401).json({ message: "Invalid token" });
    }

    req.user = {
      id: user.id,
      email: user.email || ""
    };

    next();
  } catch (error) {
    console.error("Auth middleware error:", error);
    return res.status(401).json({ message: "Authentication failed" });
  }
}
2. Crie o Serviço de Autenticação no Frontend:
Crie um novo arquivo em /client/src/lib/auth.ts com o seguinte conteúdo:

TypeScript

import { supabase } from "./supabase";
import { User } from "@supabase/supabase-js";

export interface AuthState {
  user: User | null;
  loading: boolean;
}

export async function signIn(email: string, password: string) {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password
  });
  
  if (error) throw error;
  return data;
}

export async function signOut() {
  const { error } = await supabase.auth.signOut();
  if (error) throw error;
}

export async function getSession() {
  const { data: { session }, error } = await supabase.auth.getSession();
  if (error) throw error;
  return session;
}

export function onAuthStateChange(callback: (user: User | null) => void) {
  return supabase.auth.onAuthStateChange((event, session) => {
    callback(session?.user ?? null);
  });
}
3. Crie o Componente de Rota Protegida no Frontend:
Crie um novo arquivo em /client/src/components/ProtectedRoute.tsx com o seguinte conteúdo:

TypeScript

import { useEffect, useState } from "react";
import { useLocation } from "wouter";
import { User } from "@supabase/supabase-js";
import { onAuthStateChange } from "@/lib/auth";

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [, setLocation] = useLocation();

  useEffect(() => {
    const { data: { subscription } } = onAuthStateChange((user) => {
      setUser(user);
      setLoading(false);
      
      if (!user) {
        setLocation("/login");
      }
    });

    return () => subscription.unsubscribe();
  }, [setLocation]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  return <>{children}</>;
}