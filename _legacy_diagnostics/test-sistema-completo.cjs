/**
 * TESTE R√ÅPIDO P√ìS-CORRE√á√ÉO RATE LIMITING
 * Verificar se o sistema voltou a funcionar ap√≥s corre√ß√£o
 */

const axios = require('axios');
const BASE_URL = 'http://localhost:5000';

console.log('üîß TESTE P√ìS-CORRE√á√ÉO RATE LIMITING');
console.log('================================\n');

async function testeRapido() {
  try {
    console.log('üîå 1. TESTANDO CONEX√ÉO B√ÅSICA:');
    
    // Teste b√°sico de sa√∫de
    const health = await axios.get(`${BASE_URL}/api/health`, { timeout: 5000 });
    console.log(`   ‚úÖ API Health: ${health.status} - ${health.data?.status || 'OK'}`);
    
    // Teste m√∫ltiplas requisi√ß√µes r√°pidas (simulando o que causava rate limit)
    console.log('\n‚ö° 2. TESTE M√öLTIPLAS REQUISI√á√ïES (antes falhava):');
    
    const promises = [];
    for (let i = 1; i <= 20; i++) {
      promises.push(
        axios.get(`${BASE_URL}/api/health`, { 
          timeout: 5000,
          validateStatus: () => true // Aceitar qualquer status
        }).then(res => ({ req: i, status: res.status }))
      );
    }
    
    const results = await Promise.all(promises);
    const sucessos = results.filter(r => r.status === 200).length;
    const rateLimited = results.filter(r => r.status === 429).length;
    
    console.log(`   üìä Resultados de 20 requisi√ß√µes simult√¢neas:`);
    console.log(`     ‚úÖ Sucessos: ${sucessos}/20`);
    console.log(`     ‚ùå Rate Limited: ${rateLimited}/20`);
    
    if (rateLimited === 0) {
      console.log('   üéâ CORRE√á√ÉO FUNCIONOU! Rate limiting n√£o est√° mais bloqueando');
    } else {
      console.log('   ‚ö†Ô∏è Ainda h√° problemas de rate limiting');
    }
    
    // Teste de propostas (o endpoint que mais falhava)
    console.log('\nüìã 3. TESTE ENDPOINT PROPOSTAS:');
    try {
      const propostas = await axios.get(`${BASE_URL}/api/propostas`, { 
        timeout: 5000,
        validateStatus: () => true
      });
      
      if (propostas.status === 401) {
        console.log('   ‚úÖ Endpoint propostas responde (401 = precisa auth, normal)');
      } else if (propostas.status === 429) {
        console.log('   ‚ùå Ainda com rate limiting no endpoint propostas');
      } else {
        console.log(`   ‚úÖ Endpoint propostas: ${propostas.status}`);
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Erro no endpoint propostas: ${error.message}`);
    }
    
    console.log('\n================================');
    console.log('üéØ RESULTADO FINAL:');
    if (sucessos >= 18 && rateLimited <= 2) {
      console.log('‚úÖ CORRE√á√ÉO DE RATE LIMITING: SUCESSO');
      console.log('‚úÖ Sistema voltou a funcionar normalmente');
      console.log('‚úÖ Pronto para 200+ propostas/dia sem problemas');
    } else {
      console.log('‚ùå Rate limiting ainda precisa ajustes');
    }
    
    return sucessos >= 18;
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.message);
    return false;
  }
}

// Executar teste
testeRapido();