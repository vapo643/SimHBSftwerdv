O plano para construir a "Tela 1: Gestão de Usuários e Perfis" foi validado e aprimorado.

Sua tarefa é executar o seguinte plano de 4 etapas para criar a funcionalidade completa:

**1. Crie o Arquivo de Dados Fictícios:**
Crie um novo arquivo em `/client/src/data/users.ts` com o seguinte conteúdo:
```typescript
export interface User {
  id: string;
  nome: string;
  email: string;
  perfil: string;
  loja: string;
  status: string;
}

export const mockUsers: User[] = [
  { id: '1', nome: 'Alice da Silva', email: 'alice@example.com', perfil: 'ADMINISTRADOR', loja: 'Loja Matriz', status: 'Ativo' },
  { id: '2', nome: 'Bruno Costa', email: 'bruno@example.com', perfil: 'GERENTE', loja: 'Loja Filial Sul', status: 'Inativo' },
  { id: '3', nome: 'Carla Dias', email: 'carla@example.com', perfil: 'ATENDENTE', loja: 'Loja Filial Norte', status: 'Ativo' },
];
2. Crie o Componente do Formulário de Usuário:
Crie um novo arquivo em /client/src/components/usuarios/UserForm.tsx. Este formulário deve usar react-hook-form e zod para validação. Cole o seguinte código exato:

TypeScript

import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const userSchema = z.object({
  nome: z.string().min(3, "Nome é obrigatório."),
  email: z.string().email("Formato de e-mail inválido."),
  perfil: z.string().nonempty("Perfil é obrigatório."),
  loja: z.string().optional(),
});

type UserFormData = z.infer<typeof userSchema>;

interface UserFormProps {
  initialData?: any;
  onSubmit: (data: UserFormData) => void;
  onCancel: () => void;
}

const UserForm: React.FC<UserFormProps> = ({ initialData, onSubmit, onCancel }) => {
  const { register, handleSubmit, formState: { errors }, setValue } = useForm<UserFormData>({
    resolver: zodResolver(userSchema),
    defaultValues: initialData || {},
  });

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <Label htmlFor="nome">Nome</Label>
        <Input id="nome" {...register("nome")} />
        {errors.nome && <p className="text-red-500 text-sm mt-1">{errors.nome.message}</p>}
      </div>
      <div>
        <Label htmlFor="email">Email</Label>
        <Input id="email" type="email" {...register("email")} />
        {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>}
      </div>
      {/* Outros campos como Perfil e Loja seriam adicionados aqui */}
      <div className="flex justify-end gap-2">
        <Button type="button" variant="ghost" onClick={onCancel}>Cancelar</Button>
        <Button type="submit">Salvar</Button>
      </div>
    </form>
  );
};

export default UserForm;
3. Crie a Página Principal de Gestão de Usuários:
Crie um novo arquivo em /client/src/pages/admin/usuarios.tsx com o seguinte código, que contém a tabela e a lógica para controlar o modal:

TypeScript

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Table, TableHeader, TableBody, TableHead, TableRow, TableCell } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import UserForm from '@/components/usuarios/UserForm';
import { mockUsers, User } from '@/data/users';
import DashboardLayout from '@/components/DashboardLayout';

const UsuariosPage: React.FC = () => {
  const [users, setUsers] = useState<User[]>(mockUsers);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);

  const handleCreateOrEdit = (user: any) => {
    if (selectedUser) {
      setUsers(users.map(u => (u.id === selectedUser.id ? { ...u, ...user } : u)));
    } else {
      setUsers([...users, { ...user, id: String(Date.now()), status: 'Ativo' }]);
    }
    setIsModalOpen(false);
    setSelectedUser(null);
  };

  const openEditModal = (user: User) => {
    setSelectedUser(user);
    setIsModalOpen(true);
  };
  
  const openNewModal = () => {
    setSelectedUser(null);
    setIsModalOpen(true);
  };

  const toggleUserStatus = (userId: string) => {
    setUsers(users.map(user =>
      user.id === userId ? { ...user, status: user.status === 'Ativo' ? 'Inativo' : 'Ativo' } : user
    ));
  };

  return (
    <DashboardLayout title="Gestão de Usuários e Perfis">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Usuários</h1>
        <Button onClick={openNewModal}>Novo Usuário</Button>
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Nome</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Perfil</TableHead>
            <TableHead>Loja</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Ações</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {users.map(user => (
            <TableRow key={user.id}>
              <TableCell>{user.nome}</TableCell>
              <TableCell>{user.email}</TableCell>
              <TableCell>{user.perfil}</TableCell>
              <TableCell>{user.loja}</TableCell>
              <TableCell>{user.status}</TableCell>
              <TableCell className="space-x-2">
                <Button variant="outline" size="sm" onClick={() => openEditModal(user)}>Editar</Button>
                <Button variant="outline" size="sm" onClick={() => toggleUserStatus(user.id)}>
                  {user.status === 'Ativo' ? 'Desativar' : 'Ativar'}
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{selectedUser ? "Editar Usuário" : "Novo Usuário"}</DialogTitle>
          </DialogHeader>
          <UserForm 
            initialData={selectedUser}
            onSubmit={handleCreateOrEdit}
            onCancel={() => { setIsModalOpen(false); setSelectedUser(null); }}
          />
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
};

export default UsuariosPage;
4. Adicione a Nova Rota:
Modifique o arquivo /client/src/App.tsx para adicionar a nova rota /admin/usuarios, garantindo que ela seja uma rota protegida.

Execute este plano de 4 etapas e confirme a conclusão.