/**
 * Teste completo do fluxo de propostas
 * Verifica todas as etapas desde cria√ß√£o at√© cobran√ßa
 */

const { Pool } = require('pg');

console.log('üîç AUDITORIA COMPLETA DO FLUXO DE PROPOSTAS');
console.log('============================================\n');

// Conectar ao banco
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function checkProposalFlow() {
  try {
    // 1. Verificar propostas por status
    console.log('üìä 1. PROPOSTAS POR STATUS:');
    const statusQuery = `
      SELECT status, COUNT(*) as total 
      FROM propostas 
      WHERE deleted_at IS NULL 
      GROUP BY status 
      ORDER BY total DESC
    `;
    const statusResult = await pool.query(statusQuery);
    
    if (statusResult.rows.length === 0) {
      console.log('   ‚ùå Nenhuma proposta encontrada no sistema!');
    } else {
      statusResult.rows.forEach(row => {
        console.log(`   ${row.status}: ${row.total} propostas`);
      });
    }
    
    // 2. Verificar fluxo de cria√ß√£o
    console.log('\nüìù 2. FLUXO DE CRIA√á√ÉO:');
    const recentProposals = await pool.query(`
      SELECT id, status, created_at, loja_id, user_id, produto_id, tabela_comercial_id
      FROM propostas 
      WHERE deleted_at IS NULL 
      ORDER BY created_at DESC 
      LIMIT 5
    `);
    
    console.log(`   √öltimas propostas criadas: ${recentProposals.rows.length}`);
    recentProposals.rows.forEach(p => {
      console.log(`   - ID: ${p.id.substring(0, 8)}... Status: ${p.status}`);
      console.log(`     Loja: ${p.loja_id || 'N/A'}, Produto: ${p.produto_id || 'N/A'}`);
    });
    
    // 3. Verificar fila de an√°lise
    console.log('\nüìã 3. FILA DE AN√ÅLISE:');
    const analiseQueue = await pool.query(`
      SELECT COUNT(*) as total 
      FROM propostas 
      WHERE status IN ('aguardando_analise', 'em_analise') 
      AND deleted_at IS NULL
    `);
    console.log(`   Propostas aguardando an√°lise: ${analiseQueue.rows[0].total}`);
    
    // 4. Verificar a√ß√µes do analista
    console.log('\nüë®‚Äçüíº 4. A√á√ïES DO ANALISTA:');
    const analystActions = await pool.query(`
      SELECT 
        COUNT(CASE WHEN status = 'aprovado' THEN 1 END) as aprovadas,
        COUNT(CASE WHEN status = 'rejeitado' THEN 1 END) as rejeitadas,
        COUNT(CASE WHEN status = 'pendente' THEN 1 END) as pendentes
      FROM propostas 
      WHERE deleted_at IS NULL
    `);
    const actions = analystActions.rows[0];
    console.log(`   ‚úÖ Aprovadas: ${actions.aprovadas}`);
    console.log(`   ‚ùå Rejeitadas: ${actions.rejeitadas}`);
    console.log(`   ‚è∏Ô∏è  Pendentes: ${actions.pendentes}`);
    
    // 5. Verificar fluxo de pend√™ncia
    console.log('\n‚è∏Ô∏è  5. FLUXO DE PEND√äNCIA:');
    const pendencyFlow = await pool.query(`
      SELECT p.id, p.created_at, p.updated_at,
             (SELECT COUNT(*) FROM proposta_logs WHERE proposta_id = p.id) as log_count,
             (SELECT COUNT(*) FROM comunicacao_logs WHERE proposta_id = p.id) as comm_count
      FROM propostas p
      WHERE p.status = 'pendente' 
      AND p.deleted_at IS NULL
      LIMIT 5
    `);
    console.log(`   Propostas pendentes: ${pendencyFlow.rows.length}`);
    pendencyFlow.rows.forEach(p => {
      console.log(`   - ID: ${p.id.substring(0, 8)}... Logs: ${p.log_count}, Comunica√ß√µes: ${p.comm_count}`);
    });
    
    // 6. Verificar gera√ß√£o de CCB
    console.log('\nüìÑ 6. GERA√á√ÉO DE CCB:');
    const ccbStatus = await pool.query(`
      SELECT 
        COUNT(CASE WHEN ccb_gerado = true THEN 1 END) as com_ccb,
        COUNT(CASE WHEN ccb_gerado = false OR ccb_gerado IS NULL THEN 1 END) as sem_ccb,
        COUNT(CASE WHEN status = 'aprovado' AND (ccb_gerado = false OR ccb_gerado IS NULL) THEN 1 END) as aprovadas_sem_ccb
      FROM propostas 
      WHERE deleted_at IS NULL
    `);
    const ccb = ccbStatus.rows[0];
    console.log(`   ‚úÖ Com CCB gerado: ${ccb.com_ccb}`);
    console.log(`   ‚ùå Sem CCB: ${ccb.sem_ccb}`);
    console.log(`   ‚ö†Ô∏è  Aprovadas sem CCB: ${ccb.aprovadas_sem_ccb}`);
    
    // 7. Verificar integra√ß√£o ClickSign
    console.log('\n‚úçÔ∏è  7. INTEGRA√á√ÉO CLICKSIGN:');
    const clickSignStatus = await pool.query(`
      SELECT 
        COUNT(CASE WHEN clicksign_document_key IS NOT NULL THEN 1 END) as enviados,
        COUNT(CASE WHEN assinatura_eletronica_concluida = true THEN 1 END) as assinados,
        COUNT(CASE WHEN clicksign_status = 'pending' THEN 1 END) as pendentes,
        COUNT(CASE WHEN ccb_gerado = true AND clicksign_document_key IS NULL THEN 1 END) as ccb_nao_enviado
      FROM propostas 
      WHERE deleted_at IS NULL
    `);
    const cs = clickSignStatus.rows[0];
    console.log(`   üì§ Enviados: ${cs.enviados}`);
    console.log(`   ‚úÖ Assinados: ${cs.assinados}`);
    console.log(`   ‚è≥ Pendentes: ${cs.pendentes}`);
    console.log(`   ‚ö†Ô∏è  CCB n√£o enviado: ${cs.ccb_nao_enviado}`);
    
    // 8. Verificar fluxo de pagamento
    console.log('\nüí∞ 8. FLUXO DE PAGAMENTO:');
    const paymentStatus = await pool.query(`
      SELECT 
        COUNT(CASE WHEN status = 'pronto_pagamento' THEN 1 END) as prontos,
        COUNT(CASE WHEN status = 'pago' THEN 1 END) as pagos,
        COUNT(CASE WHEN assinatura_eletronica_concluida = true AND status != 'pago' THEN 1 END) as assinados_nao_pagos
      FROM propostas 
      WHERE deleted_at IS NULL
    `);
    const pay = paymentStatus.rows[0];
    console.log(`   üìã Prontos para pagamento: ${pay.prontos}`);
    console.log(`   ‚úÖ Pagos: ${pay.pagos}`);
    console.log(`   ‚ö†Ô∏è  Assinados n√£o pagos: ${pay.assinados_nao_pagos}`);
    
    // 9. Verificar integra√ß√£o Banco Inter
    console.log('\nüè¶ 9. INTEGRA√á√ÉO BANCO INTER:');
    const interStatus = await pool.query(`
      SELECT 
        COUNT(*) as total_collections,
        COUNT(CASE WHEN status = 'A_RECEBER' THEN 1 END) as a_receber,
        COUNT(CASE WHEN status = 'RECEBIDO' THEN 1 END) as recebidos,
        COUNT(CASE WHEN status = 'CANCELADO' THEN 1 END) as cancelados
      FROM inter_collections
    `);
    
    if (interStatus.rows[0].total_collections === '0') {
      console.log('   ‚ùå Nenhum boleto gerado ainda');
    } else {
      const inter = interStatus.rows[0];
      console.log(`   üìÑ Total de boletos: ${inter.total_collections}`);
      console.log(`   ‚è≥ A receber: ${inter.a_receber}`);
      console.log(`   ‚úÖ Recebidos: ${inter.recebidos}`);
      console.log(`   ‚ùå Cancelados: ${inter.cancelados}`);
    }
    
    // 10. Verificar logs e auditoria
    console.log('\nüìä 10. LOGS E AUDITORIA:');
    const logsStatus = await pool.query(`
      SELECT 
        (SELECT COUNT(*) FROM proposta_logs) as proposta_logs,
        (SELECT COUNT(*) FROM comunicacao_logs) as comunicacao_logs,
        (SELECT COUNT(*) FROM audit_delete_log) as delete_logs
    `);
    const logs = logsStatus.rows[0];
    console.log(`   üìù Logs de proposta: ${logs.proposta_logs}`);
    console.log(`   üí¨ Logs de comunica√ß√£o: ${logs.comunicacao_logs}`);
    console.log(`   üóëÔ∏è  Logs de exclus√£o: ${logs.delete_logs}`);
    
    // RESUMO FINAL
    console.log('\n============================================');
    console.log('üìä RESUMO DA AUDITORIA');
    console.log('============================================');
    
    // Identificar problemas
    const problems = [];
    if (ccb.aprovadas_sem_ccb > 0) problems.push(`${ccb.aprovadas_sem_ccb} propostas aprovadas sem CCB`);
    if (cs.ccb_nao_enviado > 0) problems.push(`${cs.ccb_nao_enviado} CCBs n√£o enviados para ClickSign`);
    if (pay.assinados_nao_pagos > 0) problems.push(`${pay.assinados_nao_pagos} contratos assinados n√£o pagos`);
    if (interStatus.rows[0].total_collections === '0') problems.push('Nenhum boleto gerado no Banco Inter');
    
    if (problems.length === 0) {
      console.log('\n‚úÖ FLUXO FUNCIONANDO PERFEITAMENTE!');
    } else {
      console.log('\n‚ö†Ô∏è  PROBLEMAS ENCONTRADOS:');
      problems.forEach(p => console.log(`   - ${p}`));
    }
    
    // Recomenda√ß√µes
    console.log('\nüí° RECOMENDA√á√ïES:');
    if (ccb.aprovadas_sem_ccb > 0) {
      console.log('   1. Verificar gera√ß√£o autom√°tica de CCB ap√≥s aprova√ß√£o');
    }
    if (cs.ccb_nao_enviado > 0) {
      console.log('   2. Verificar envio autom√°tico para ClickSign ap√≥s gerar CCB');
    }
    if (pay.assinados_nao_pagos > 0) {
      console.log('   3. Verificar fluxo de pagamento ap√≥s assinatura');
    }
    if (interStatus.rows[0].total_collections === '0') {
      console.log('   4. Testar integra√ß√£o com Banco Inter para gerar boletos');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante auditoria:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await pool.end();
  }
}

// Executar auditoria
checkProposalFlow();