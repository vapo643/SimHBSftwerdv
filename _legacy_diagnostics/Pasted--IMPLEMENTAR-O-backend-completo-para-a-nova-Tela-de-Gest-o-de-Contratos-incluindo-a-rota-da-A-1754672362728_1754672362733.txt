**IMPLEMENTAR:** O backend completo para a nova "Tela de Gestão de Contratos", incluindo a rota da API, a lógica de permissões por role e a query de busca de dados.

**CONTEXT:** Precisamos de uma tela centralizada e de acesso restrito onde a diretoria e os administradores possam gerenciar e visualizar todas as Cédulas de Crédito Bancário (CCBs) que foram assinadas eletronicamente via ClickSign. Esta é uma funcionalidade de alta importância para auditoria e gestão.

**CURRENT STATE:** Esta tela e sua lógica de backend não existem atualmente no sistema.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo endpoint seguro no backend (ex: `GET /api/contratos`).
2.  O acesso a este endpoint deve ser restrito apenas a usuários com as roles `ADMIN` ou `DIRETOR`.
3.  O endpoint deve retornar uma lista de propostas que possuam uma CCB devidamente assinada.

**CONSTRAINTS (Regras de Negócio e Segurança):**

1.  **Regra de Acesso (Crítico):** A primeira ação do endpoint deve ser verificar a role do usuário autenticado. Se a role do usuário não for `ADMIN` ou `DIRETOR`, o endpoint deve retornar imediatamente um erro `403 Forbidden`.
2.  **Regra de Filtragem de Dados:** A query no banco de dados deve buscar propostas que atendam a **TODAS** as seguintes condições:
    - O campo `assinaturaEletronicaConcluida` na tabela `propostas` deve ser `true`.
    - O campo que armazena a chave do documento no ClickSign (ex: `clicksign_document_key`) na tabela `propostas` não deve ser nulo.
    - A proposta não deve ter sido deletada (soft delete).
3.  **Dados Retornados:** Para cada proposta, a API deve retornar os dados essenciais para a listagem, como `propostaId`, `clienteNome`, `clienteCpf`, `valorTotal`, `dataAssinatura`, e a URL para visualização do documento assinado.

**INTEGRAÇÃO COM STORAGE:**
- Verifique e, se necessário, crie no Supabase Storage um bucket/pasta chamado **`ccbs_assinadas`**.
- A lógica de download do PDF assinado que já implementamos deve garantir que os PDFs sejam salvos *exclusivamente* nesta pasta. A URL retornada pela API deve apontar para os arquivos neste local.

**ROLES:** A verificação das roles `ADMIN` e `DIRETOR` é o requisito de segurança mais crítico desta missão.

**BANCO:**
- Verifique o `enum` de roles no nosso schema. Se a role `DIRETOR` não existir, crie e aplique a migração Drizzle necessária para adicioná-la.

**TESTE:**
- Em seu relatório de implementação, descreva como você testaria este endpoint, incluindo um teste para acesso permitido (com um `ADMIN`) e um teste para acesso negado (com uma role diferente, como `ATENDENTE`).