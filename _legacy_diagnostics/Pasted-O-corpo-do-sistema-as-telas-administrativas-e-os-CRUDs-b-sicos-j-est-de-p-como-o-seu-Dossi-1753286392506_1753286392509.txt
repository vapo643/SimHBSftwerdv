O "corpo" do sistema — as telas administrativas e os CRUDs básicos — já está de pé, como o seu Dossiê confirmou. A nossa próxima ação é implementar o "cérebro": a lógica de negócio que conecta tudo.

Esta próxima ação é precisamente para implementar a "inteligência" que discutimos: a API que decide dinamicamente quais Tabelas Comerciais um Atendente pode oferecer.

PLANO DE AÇÃO: IMPLEMENTAR A INTELIGÊNCIA COMERCIAL
Conforme o nosso roadmap, a missão é o Passo 1.1. Esta é uma tarefa de precisão, ideal para o Assistente (Sniper).

Diretriz: A sua diretriz é submeter o seguinte prompt de missão ao Assistente.

Markdown

# MISSÃO: Implementar Lógica de Busca de Tabelas Comerciais Disponíveis

**CONTEXTO:** No nosso sistema, um Atendente, ao criar uma proposta, seleciona um `Produto`. O sistema deve então apresentar as `Tabelas Comerciais` corretas para aquele produto, seguindo uma hierarquia de regras. O `parceiro_id` do Atendente é conhecido no backend.

**AÇÃO:** Crie um novo endpoint de API **GET** que encapsule esta lógica de busca.

**ROADMAP DE EXECUÇÃO:**

1.  **Crie um Novo Endpoint:** Adicione um novo endpoint `GET /api/tabelas-comerciais-disponiveis` ao ficheiro `/server/routes.ts`.

2.  **Parâmetros da Requisição:** O endpoint deve esperar dois parâmetros de query: `produtoId` e `parceiroId`.

3.  **Implemente a Lógica de Negócio Hierárquica:** A lógica do endpoint deve seguir estes passos exatos:
    a. **Busca Prioritária (Tabelas Personalizadas):** Primeiro, consulte o banco de dados por tabelas comerciais ativas (`ativo = true`) que correspondam **simultaneamente** ao `produtoId` e ao `parceiroId` fornecidos.
    b. **Validação:** Se a busca prioritária retornar resultados, retorne **apenas** essa lista de tabelas personalizadas.
    c. **Busca Secundária (Tabelas Gerais):** Se a busca prioritária não retornar nenhum resultado, execute uma segunda consulta por tabelas comerciais ativas (`ativo = true`) que correspondam **apenas** ao `produtoId` e cujo `parceiro_id` seja **NULO**.
    d. **Resultado Final:** Retorne a lista de tabelas gerais encontradas. Se nenhuma for encontrada, retorne um array vazio.

4.  **Tratamento de Erros:** Garanta que o endpoint tenha um tratamento de erros robusto e retorne um status `400 Bad Request` se os parâmetros necessários não forem fornecidos.

Por favor, forneça o bloco de código completo para este novo endpoint a ser adicionado em `/server/routes.ts`.
Aguardando o resultado do Assistente para a minha validação.