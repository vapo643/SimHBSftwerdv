**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Implementar validação de schema rigorosa (com Zod) no backend para o endpoint de criação de "Novas Propostas" para garantir a integridade dos dados e prevenir a criação de propostas com campos de cliente nulos.
* **Intenção Estratégica (O Porquê):** Seu diagnóstico forense provou que nosso sistema é vulnerável a dados corrompidos. Para garantir a confiabilidade de toda a operação, é inegociável que a nossa "porta de entrada" (a criação de propostas) seja 100% blindada contra dados inválidos.
* **Histórico Relevante (Consulta Obrigatória):** Seu diagnóstico (`DIAGNOSTICO-INTEGRIDADE-DADOS-COBRANCAS-01`) é a fonte da verdade. Ele provou que o problema é a integridade dos dados, não o código de exibição. Esta missão é a implementação da sua própria recomendação: investigar e corrigir a *fonte* dos dados nulos.
* **Modelo Mental (Como se Encaixa):** Você atuará como um Engenheiro de Segurança de Dados. Sua missão é criar uma "barreira de validação" no endpoint `POST /api/propostas`. Nenhuma requisição com dados de cliente faltando (nome, CPF, etc.) deve ser capaz de passar por esta barreira e chegar ao banco de dados.
* **Riscos Antecipados:** **Risco:** A validação pode ser muito restritiva e bloquear casos de uso válidos. **Contramedida:** O schema de validação deve ser baseado nos campos que são *absolutamente essenciais* para a operação de crédito.

---

**IMPLEMENTAR:**
Blindagem do endpoint de criação de propostas (`POST /api/propostas`) com validação de schema rigorosa.

**CURRENT STATE:**
O endpoint atualmente permite que propostas sejam criadas com campos essenciais do cliente (como `clienteNome`, `clienteCpf`) como `NULL`, o que corrompe a integridade dos dados e quebra as telas downstream.

**EXPECTED (Estado Final de Sucesso):**
1.  Um schema de validação (usando `Zod`) é definido para o corpo (`body`) da requisição `POST /api/propostas`.
2.  Este schema deve marcar campos essenciais como `clienteNome` e `clienteCpf` como obrigatórios e não-vazios (ex: `.string().min(1)`).
3.  Se uma requisição chegar com estes campos faltando, a API deve rejeitá-la **imediatamente** com um erro `HTTP 400 Bad Request` e uma mensagem clara, **sem nunca tentar salvar** os dados no banco.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Definição do Schema Zod:**
    - **Ação:** No ficheiro apropriado (ex: `shared/schema.ts`), crie um novo schema Zod para a validação da criação de propostas.
    - **Implementação:** Defina todos os campos de cliente que são inegociáveis (como `clienteNome`, `clienteCpf`, `clienteTelefone`) como obrigatórios e com validações mínimas (ex: não podem ser strings vazias).

**2. Integração no Endpoint:**
    - **Ação:** No ficheiro da rota `POST /api/propostas`, implemente a validação.
    - **Implementação:** No início da função do endpoint, use `schema.parse(req.body)` para validar os dados. Envolva esta chamada em um bloco `try...catch` para capturar `ZodError` e retornar uma resposta `400` clara e informativa.

**3. Limpeza dos Dados Corrompidos (Opcional, mas recomendado):**
    - **Ação:** Crie um script de limpeza único (ex: `scripts/cleanup-null-proposals.ts`) que delete a proposta com ID `88a44696-9b63-42ee-aa81-15f9519d24cb` do banco de dados.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear os arquivos envolvidos.
2.  Garantir que a validação Zod seja a primeira etapa no endpoint.
3.  Executar `get_latest_lsp_diagnostics`.
4.  O critério final de sucesso é o teste funcional: use uma ferramenta de API (como o Postman ou `curl`) para tentar criar uma nova proposta enviando um payload **sem** `clienteNome`.
5.  Valide que a API retorna um erro `400` e que **NADA** foi salvo no banco de dados.