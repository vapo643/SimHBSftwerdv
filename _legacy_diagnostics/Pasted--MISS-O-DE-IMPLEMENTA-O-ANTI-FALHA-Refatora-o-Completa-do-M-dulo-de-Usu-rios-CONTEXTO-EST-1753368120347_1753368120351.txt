# MISSÃO DE IMPLEMENTAÇÃO (ANTI-FALHA): Refatoração Completa do Módulo de Usuários

**CONTEXTO ESTRATÉGICO:**
Este prompt é o resultado final de um debate técnico rigoroso e representa a arquitetura final e aprovada para a refatoração do módulo de "Gestão de Usuários". Siga cada passo com precisão absoluta.

**AÇÃO:**
Sua missão é refatorar de ponta a ponta o módulo de usuários para que ele utilize dados reais, implementando uma arquitetura de filtragem server-side.

**ROADMAP DE EXECUÇÃO (Sequencial):**

**PASSO 1 (Backend - Correção Crítica): Implementar a Função `getLojas()` no Storage**
* **Ficheiro Alvo:** `/server/storage.ts`.
* **Tarefa:** Implemente a função `getLojas()` que está ausente. Ela deve usar o cliente de banco de dados para buscar e retornar todas as lojas ativas (`is_active = true`).

**PASSO 2 (Backend - Rota Principal): Criar o Endpoint de Listagem de Usuários**
* **Ficheiro Alvo:** `/server/routes.ts`.
* **Tarefa:** Crie o novo endpoint `GET /api/admin/users`.
* **Lógica da Query:** A query ao banco de dados deve fazer `JOIN`s múltiplos entre as tabelas `profiles`, `lojas`, `parceiros`, e `auth.users`. O objetivo é retornar uma lista de usuários com todos os dados necessários para a interface, incluindo `id`, `fullName`, `email`, `role`, `nomeLoja`, e `parceiroNome`.

**PASSO 3 (Frontend - Página de Usuários): Conectar a Tabela aos Dados Reais**
* **Ficheiro Alvo:** `/client/src/pages/admin/usuarios/index.tsx`.
* **Tarefa:** Refatore o componente para substituir a fonte de dados "mock" por uma chamada (via `useQuery` e nosso `apiClient`) ao novo endpoint `GET /api/admin/users`. A tabela deve agora exibir os usuários reais do banco de dados.

**PASSO 4 (Frontend - Formulário): Implementar a Filtragem Server-Side**
* **Ficheiro Alvo:** `/client/src/components/usuarios/UserForm.tsx` e a sua página pai.
* **Tarefa:** Implemente a lógica de dropdown em cascata com filtragem no servidor.
    a. O formulário deve buscar e exibir todos os Parceiros no dropdown correspondente.
    b. O dropdown de Lojas deve iniciar desabilitado.
    c. Quando um Parceiro é selecionado, o frontend deve disparar uma nova chamada de API para um endpoint que busca apenas as lojas daquele parceiro (ex: `GET /api/admin/parceiros/:parceiroId/lojas` - crie este endpoint se for necessário).
    d. Popule o dropdown de Lojas com o resultado desta chamada.
    e. Garanta que todos os estados de UX (carregamento, erro, desabilitado) sejam implementados.

Execute este plano para entregar um módulo de Gestão de Usuários 100% funcional e robusto.