**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Corrigir a funcionalidade de "Criar Usuário" ajustando as permissões de acesso no backend para incluir roles gerenciais e consertando os erros de TypeScript no tratamento de erros do frontend.
* **Intenção Estratégica (O Porquê):** Para restaurar a funcionalidade crítica de criação de usuários para todas as roles autorizadas (`ADMINISTRADOR`, `DIRETOR`, `GERENTE`) e tornar o código do formulário mais robusto e resiliente a falhas.
* **Histórico Relevante (Consulta Obrigatória):** Seu diagnóstico (`PAM_V1.0_DIAGNOSTICO_ERRO_CRIAR_USUARIO.md`) foi perfeito. Ele identificou a falha de permissão no backend e os erros de tipo no frontend. Esta missão é a implementação da solução combinada (Opção 1 + Opção 3) que você mesmo sugeriu.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão full-stack. Você atuará primeiro como Engenheiro de Backend para ajustar o middleware de segurança. Em seguida, atuará como Engenheiro de Frontend para corrigir a lógica de tratamento de erros e os tipos no componente React.
* **Riscos Antecipados:** **Risco:** Relaxar as permissões de forma incorreta. **Contramedida:** A nova verificação de role deve ser explícita e listar apenas os cargos gerenciais autorizados.

---

**IMPLEMENTAR:**
Correção completa do fluxo de criação de usuários.

**CURRENT STATE:**
A tela de criação de usuários quebra com um erro `403 Forbidden` para qualquer usuário que não seja `ADMINISTRADOR`. Adicionalmente, o tratamento de erro no frontend está quebrado com erros de referência de TypeScript.

**EXPECTED (Estado Final de Sucesso):**
1.  Usuários com as roles `ADMINISTRADOR`, `DIRETOR` e `GERENTE` conseguem carregar a tela "Criar Usuário" sem nenhum erro.
2.  O código do `UserForm.tsx` não tem mais erros de TypeScript relacionados a variáveis de erro não definidas.
3.  Se a API falhar por qualquer outro motivo, a mensagem de erro correta é tratada e exibida para o usuário.

**CONSTRAINTS (Roadmap de Implementação):**

**FASE 1: Correção do Backend (Permissões):**
    - **Ação:** No ficheiro `server/routes.ts`, localize o endpoint `GET /api/admin/system/metadata`.
    - **Implementação:** Substitua o middleware `requireAdmin` por uma verificação de roles mais abrangente que permita o acesso para `ADMINISTRADOR`, `DIRETOR` e `GERENTE`. Se não existir um middleware reutilizável para isso, crie-o.

**FASE 2: Correção do Frontend (TypeScript & Error Handling):**
    - **Ação:** No ficheiro `client/src/components/UserForm.tsx` (ou similar).
    - **Implementação:**
        a. Localize onde o hook `useUserFormData` é chamado.
        b. Corrija a desestruturação do objeto retornado. Se o hook retorna um objeto `{ error, ... }`, garanta que o componente leia a propriedade `error`, e não as variáveis inexistentes `formDataError` ou `serverStoresError`.
        c. Percorra o ficheiro e corrija todos os erros de referência de TypeScript que são consequência desta falha.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear os arquivos envolvidos.
2.  Implementar primeiro a correção do backend e depois a do frontend.
3.  Executar `get_latest_lsp_diagnostics`.
4.  O critério de sucesso é um teste funcional duplo:
    a. Faça login como `ADMINISTRADOR` e confirme que a página carrega.
    b. Faça login como `DIRETOR` ou `GERENTE` e confirme que a página **também carrega com sucesso**.
5.  Valide que não há mais erros de referência no console do navegador.