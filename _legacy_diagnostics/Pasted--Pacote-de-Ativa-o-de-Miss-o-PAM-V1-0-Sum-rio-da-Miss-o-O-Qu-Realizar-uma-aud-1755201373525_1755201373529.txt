**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense do endpoint `POST /api/propostas` para identificar a falha de mapeamento de dados que está a causar a inconsistência de dados em todo o sistema.
* **Intenção Estratégica (O Porquê):** O Arquiteto descobriu a causa raiz de todos os nossos problemas de "dados vazios": a lógica de criação de propostas está a salvar os dados do cliente em uma única coluna JSON (`cliente_data`), deixando as colunas dedicadas (`cliente_nome`, `cliente_cpf`) como `NULL`. Sua missão é auditar e confirmar esta falha para que possamos arquitetar a correção definitiva.
* **Histórico Relevante (Consulta Obrigatória):** Todos os diagnósticos anteriores estavam errados. A nova e única fonte da verdade é a análise do Arquiteto. Seu foco é 100% no fluxo de dados da tela de "Nova Proposta" para o banco de dados.
* **Modelo Mental (Como se Encaixa):** Você é um auditor de código. Sua tarefa é analisar a jornada dos dados, desde o formulário no frontend até o comando `INSERT` do Drizzle, e provar que os dados estão a ser desviados para o local errado.
* **Riscos Antecipados:** **Risco:** Tentar corrigir prematuramente. **Contramedida:** Esta missão é **APENAS DIAGNÓSTICO**. Não implemente nenhuma correção.

---

**IMPLEMENTAR:**
Um relatório de auditoria de código. **NÃO FAÇA MODIFICAÇÕES.**

**CURRENT STATE:**
A "Tela de Cobranças" exibe propostas com dados de cliente vazios, embora a evidência mostre que os dados estão salvos em uma coluna JSON `cliente_data`.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria que prove, com evidências de código, que o endpoint de criação de propostas está a salvar os dados do cliente apenas na coluna `cliente_data` e a negligenciar as colunas relacionais dedicadas.

**CONSTRAINTS (Roadmap de Auditoria Forense):**

**1. Análise da Origem (Frontend - `nova-proposta.tsx`):**
    - **Ação:** Confirme novamente como os dados do formulário de endereço e cliente são empacotados para serem enviados ao backend.
    - **Relatório:** Apresente o objeto JavaScript que é enviado no corpo da requisição `POST /api/propostas`.

**2. Análise da Lógica de Persistência (Backend - `routes.ts`):**
    - **Ação:** Inspecione o código do endpoint `POST /api/propostas`.
    - **Relatório (A Evidência Crítica):** Localize e apresente o trecho de código exato que contém o comando `db.insert(propostas).values(...)`. Sua análise deve focar em quais colunas da tabela `propostas` este comando está a preencher.

**3. Veredito Final (Sua Conclusão de Auditoria):**
    - **Ação:** Compare o que o frontend envia com o que o backend salva.
    - **Relatório:** Responda objetivamente: O comando de `insert` está a preencher as colunas `clienteNome`, `clienteCpf`, `clienteEmail`, etc., ou está a colocar toda a informação dentro da coluna `clienteData` (JSON) e a deixar as outras como `NULL`?

**Relatório Final:**
O critério de sucesso é um relatório de diagnóstico que confirme a hipótese do Arquiteto com evidências de código irrefutáveis.