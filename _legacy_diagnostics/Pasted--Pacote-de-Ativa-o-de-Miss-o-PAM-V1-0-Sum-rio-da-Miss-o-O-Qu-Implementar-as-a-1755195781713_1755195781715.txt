**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Implementar as alterações de schema de banco de dados para o novo Sistema de Status V2.0, incluindo a adição dos novos status ao `enum` e a criação da tabela de auditoria `status_transitions`.
* **Intenção Estratégica (O Porquê):** Esta é a fundação de toda a nossa re-arquitetura. Sem o schema de banco de dados correto e a capacidade de auditar as transições de estado, nenhuma lógica de negócio futura pode ser construída de forma confiável.
* **Histórico Relevante (Consulta Obrigatória):** Esta missão é a execução da **Fase 1** do seu próprio plano de migração, contido no relatório `AUDITORIA_ARQUITETURAL_-_SISTEMA_DE_STATUS_V2.0.md`. Siga o seu próprio blueprint.
* **Modelo Mental (Como se Encaixa):** Você está a atuar como um DBA e Engenheiro de Backend. A tarefa é puramente focada na estrutura do banco de dados e na criação de um serviço de baixo nível para interagir com a nova tabela de auditoria.
* **Riscos Antecipados:** **Risco:** Alterar um `enum` do PostgreSQL é uma operação de alto risco. **Contramedida:** A sua migração Drizzle deve ser precisa e testada. A criação da nova tabela de log não apresenta riscos para os dados existentes.

---

**IMPLEMENTAR:**
As alterações de schema da **Fase 1** do plano de migração do Sistema de Status V2.0.

**CURRENT STATE:**
O banco de dados possui um `enum` de status incompleto e não possui uma tabela para auditar as transições de estado.

**EXPECTED (Estado Final de Sucesso):**
1.  O `enum` `status` na tabela `propostas` é atualizado no banco de dados para incluir todos os novos status que você projetou (ex: `CCB_GERADA`, `AGUARDANDO_ASSINATURA`, etc.).
2.  Uma nova tabela `status_transitions` existe no banco de dados, com a estrutura exata que você projetou no seu relatório.
3.  Um serviço de logging de baixo nível existe no backend, pronto para ser usado nas próximas fases para registrar as transições de estado.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Refatorar o Schema Drizzle (`shared/schema.ts`):**
    - **Ação:** Atualize a definição do `statusEnum` para incluir **TODOS** os novos valores que você listou em seu plano.
    - **Ação:** Defina o schema Drizzle para a nova tabela `status_transitions` neste mesmo ficheiro, conforme a sua especificação.

**2. Criar e Aplicar a Migração:**
    - **Ação:** Gere a migração Drizzle a partir das alterações no schema.
    - **Ação:** Verifique o SQL gerado pela migração para garantir que ele usa `ALTER TYPE ... ADD VALUE` para o enum e `CREATE TABLE` para a nova tabela.
    - **Ação:** Aplique a migração ao banco de dados.

**3. Criar Serviço de Logging de Transição:**
    - **Ação:** Crie uma função de serviço simples (ex: em `server/services/auditService.ts`) chamada `logStatusTransition(propostaId, fromStatus, toStatus, triggeredBy, metadata)`.
    - **Implementação:** Esta função deve simplesmente receber os parâmetros e inserir um novo registro na nova tabela `status_transitions`.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear os arquivos envolvidos.
2.  Garantir que a migração do banco de dados seja o primeiro passo.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar um teste funcional: chame a nova função `logStatusTransition` a partir de um endpoint de teste temporário para confirmar que um registro é criado com sucesso na tabela `status_transitions`.
5.  O critério final de sucesso é um schema de banco de dados 100% alinhado com a Fase 1 do seu plano de migração.