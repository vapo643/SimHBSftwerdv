# MISSÃO DE IMPLEMENTAÇÃO (ARQUITETURA FINAL): Sincronização e Correção do Fluxo de Propostas

**CONTEXTO ESTRATÉGICO:**
Olá, Agente. Tivemos uma série de falhas. Esta missão é a nossa diretriz definitiva para corrigir o sistema. O seu objetivo é ler, entender e fazer com que o comportamento da aplicação corresponda **exatamente** à arquitetura e às regras de negócio descritas abaixo, que são a nossa única "fonte da verdade".

---
**## DIAGNÓSTICO DOS BUGS ATUAIS A SEREM RESOLVIDOS:**
* A tela "Nova Proposta" quebra com o erro "Erro ao carregar dados necessários".
* A criação de propostas falha com o erro "invalid data".
* Um `ATENDENTE` está a ver propostas na "Fila de Análise" que não lhe pertencem.
* A "Fila de Análise" não está sincronizada e pode estar a mostrar dados incorretos.

---
**## A ARQUITETURA DE FLUXO E PERMISSÕES (A "FONTE DA VERDADE"):**

**### O ATENDENTE:**
* **Visão:** Vê apenas o seu dashboard e os menus relacionados à criação e acompanhamento das *suas* propostas ("Nova Proposta", "Fila de Análise"). Links de Admin ("Usuários", "Parceiros", "Lojas") e do Financeiro ("Pagamentos") DEVEM estar ocultos.
* **Ações:**
    * Pode criar uma nova proposta (T-01).
    * Pode ver na "Fila de Análise" (T-02) **apenas** as propostas que ele mesmo criou.
* **Segurança (RLS):** No banco de dados, ele só deve ter acesso de `SELECT` a propostas onde `propostas.autor_id = auth.uid()`.

**### O ANALISTA:**
* **Visão:** O seu painel principal é a "Fila de Análise" (T-02). Ele vê propostas de **todas** as lojas que estão com o status `aguardando_analise` ou `em_analise`.
* **Ações:**
    * Pode aceder ao "Painel de Análise" (T-03) de uma proposta.
    * Pode mudar o status de uma proposta para `aprovado`, `negado`, ou `pendente`.
* **Segurança (RLS):** No banco de dados, ele deve ter acesso de `SELECT` a todas as propostas e de `UPDATE` nas propostas com status apropriados.

**(E assim por diante para as outras `roles` como GERENTE e ADMINISTRADOR).**

---
**## ROADMAP DE EXECUÇÃO (ORDEM CRÍTICA):**

**PASSO 1 (BACKEND - CORREÇÃO RLS E QUERIES):**
* **Tarefa:** Primeiro, audite e corrija todas as nossas políticas de **Row Level Security (RLS)** no Supabase para que correspondam **exatamente** às regras de visão descritas acima para cada `role`.
* **Tarefa:** Em seguida, corrija a query do endpoint `GET /api/origination/context` para que ele não crashe se um atendente não tiver uma loja associada e para que ele retorne os dados corretamente filtrados pelas novas políticas de RLS.

**PASSO 2 (BACKEND - CORREÇÃO DA SUBMISSÃO):**
* **Tarefa:** Corrija o erro "invalid data" no endpoint `POST /api/propostas`. Audite o `insertPropostaSchema` e a lógica da rota para garantir que ela consiga receber e salvar corretamente os dados complexos vindos do nosso `ProposalContext` no frontend.

**PASSO 3 (FRONTEND - SINCRONIZAÇÃO E VALIDAÇÃO):**
* **Tarefa:** Garanta que todas as nossas listas e tabelas ("Fila de Análise", "Dashboard", etc.) estejam a chamar as APIs corretas e a exibir os dados que são corretamente filtrados pelo RLS no backend. Remova toda a lógica de filtragem de permissão do frontend; o frontend deve apenas exibir os dados que o backend lhe entrega.