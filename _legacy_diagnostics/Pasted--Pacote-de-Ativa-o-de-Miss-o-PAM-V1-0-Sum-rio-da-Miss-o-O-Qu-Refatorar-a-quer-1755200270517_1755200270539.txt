**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Refatorar a query Drizzle do endpoint `GET /api/cobrancas` para garantir que ela retorne o conjunto de dados completo da proposta, incluindo todas as informações do cliente.
* **Intenção Estratégica (O Porquê):** A "Tela de Cobranças" está inutilizável porque exibe propostas "vazias". A causa raiz foi identificada: a query do backend não está a selecionar os dados do cliente. Esta missão é para corrigir essa falha de forma definitiva.
* **Histórico Relevante (Consulta Obrigatória):** Seu diagnóstico anterior, que sugeria "dados corrompidos", estava **INCORRETO**. A nova diretriz do Arquiteto é que os dados existem no banco, mas a sua query falha em buscá-los. Sua única fonte da verdade para esta missão é esta diretriz.
* **Modelo Mental (Como se Encaixa):** Você precisa corrigir a camada de acesso a dados. O seu `SELECT` atual está incompleto. Você precisa garantir que a query Drizzle selecione explicitamente todos os campos da proposta necessários para a UI, em vez de apenas o ID ou um subconjunto de dados.
* **Riscos Antecipados:** **Risco:** Uma correção incompleta nos manterá neste loop de erro. **Contramedida:** O critério de sucesso é irrefutável e baseado em evidência de log.

---

**IMPLEMENTAR:**
Correção da query de dados do endpoint `GET /api/cobrancas`.

**BUG:**
O diagnóstico final e correto é: a "proposta vazia" na "Tela de Cobranças" não é causada por dados corrompidos, mas sim por uma query de backend defeituosa que **não está a selecionar os dados do cliente** (`nomeCliente`, `cpfCliente`, etc.) da tabela `propostas`.

**PROCESSO SISTEMÁTICO (Roadmap de Correção Definitivo):**

**1. Isolamento do Ponto de Falha:**
    - **Ação:** Concentre-se exclusivamente no ficheiro `server/routes/cobrancas.ts` e na query Drizzle do endpoint `GET /api/cobrancas`.

**2. Implementação da Correção da Query:**
    - **Ação:** Refatore a query Drizzle.
    - **Implementação:** Modifique a cláusula `.select()` para que ela **selecione explicitamente e retorne todos os dados da proposta** que são necessários para a "Tela de Cobranças" e para o modal "Ficha do Cliente".

    - **Lógica de Exemplo (implemente com a sintaxe correta do Drizzle):**
      ```typescript
      // A query deve ser algo como:
      const propostasData = await db
        .select({
          // Selecione explicitamente TODOS os campos da proposta que a UI precisa
          id: propostas.id,
          numero_proposta: propostas.numero_proposta,
          status: propostas.status,
          clienteNome: propostas.clienteNome,
          clienteCpf: propostas.clienteCpf,
          clienteTelefone: propostas.clienteTelefone,
          clienteEmail: propostas.clienteEmail,
          valorTotalFinanciado: propostas.valorTotalFinanciado,
          // ... e todos os outros campos necessários para a tabela e o modal
        })
        .from(propostas)
        .where(
          // Mantenha a lógica de filtro correta que já definimos
          // (ex: EXISTS um boleto ativo em inter_collections)
        );
      ```

**3. Validação Final (Protocolo 5-CHECK):**
    - **Ação Obrigatória:** Execute `get_latest_lsp_diagnostics`.
    - **Teste Obrigatório:** Após a correção, acione o endpoint `GET /api/cobrancas`.
    - **Relatório Final:** O critério de sucesso é apresentar o log da **"EVIDÊNCIA BRUTA DO BACKEND"** novamente. Desta vez, o JSON para a proposta `88a44696...` **DEVE** conter todos os dados do cliente (`nomeCliente`, `cpfCliente`, etc.) preenchidos, provando que a seleção de dados foi bem-sucedida.