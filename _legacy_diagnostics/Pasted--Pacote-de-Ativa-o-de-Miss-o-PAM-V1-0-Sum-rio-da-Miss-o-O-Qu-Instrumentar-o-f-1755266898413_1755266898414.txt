**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Instrumentar o fluxo de dados completo da "Tela de Cobranças", do backend ao frontend, com logs de depuração detalhados para uma sessão de depuração assistida pelo Arquiteto.
* **Intenção Estratégica (O Porquê):** Nossas tentativas de correção falharam. Abandonamos a depuração remota. Esta missão é para nos dar, os Arquitetos, a visibilidade total do fluxo de dados em tempo real para que possamos realizar a análise de causa raiz final e definitiva.
* **Histórico Relevante (Consulta Obrigatória):** Todas as tentativas anteriores falharam. A premissa agora é que há uma falha fundamental que as análises de código estático não estão a capturar. Sua missão não é ser inteligente ou resolver o problema. Sua missão é obedecer e instalar os `console.log`s exatamente como especificado.
* **Modelo Mental (Como se Encaixa):** Sua persona agora é **'Engenheiro de Instrumentação'**. Sua única tarefa é adicionar os `console.log`s nos pontos exatos do código.
* **Riscos Antecipados:** **Risco:** Logs mal posicionados. **Contramedida:** Siga o roadmap de instrumentação abaixo com precisão cirúrgica.

---

**IMPLEMENTAR:**
Instrumentação de log ponta-a-ponta. **NÃO FAÇA NENHUMA CORREÇÃO DE LÓGICA.**

**CURRENT STATE:**
A "Tela de Cobranças" está a falhar de forma inexplicável, omitindo dados que existem.

**EXPECTED (Estado Final de Sucesso):**
Um sistema onde cada etapa do fluxo de dados da "Tela de Cobranças" imprime seu estado no console, pronto para a análise do Arquiteto.

**CONSTRAINTS (Roadmap de Instrumentação - Execute na Ordem):**

**1. Instrumentação do Backend (`GET /api/cobrancas`):**
    - **Ação:** Modifique o ficheiro `server/routes/cobrancas.ts`.
    - **Implementação:**
        a. **ANTES** da execução da query Drizzle, adicione: `console.log('[DEBUG-BACKEND-1] Iniciando query de cobranças com os seguintes filtros:', filtros);`
        b. **DEPOIS** de receber o resultado bruto do `db.select()`, adicione: `console.log('[DEBUG-BACKEND-2] Resultado BRUTO do DB:', resultadoBruto);`
        c. **ANTES** do `return res.json(...)` final, adicione: `console.log('[DEBUG-BACKEND-3] Payload FINAL enviado para o Frontend:', payloadFinal);`

**2. Instrumentação do Frontend (`CobrancasPage.tsx`):**
    - **Ação:** Modifique o ficheiro `client/src/pages/financeiro/CobrancasPage.tsx`.
    - **Implementação:**
        a. **Na Chamada da API:** Dentro da função `queryFn` do `useQuery` que chama `/api/cobrancas`, adicione: `console.log('[DEBUG-FRONTEND-1] Chamando API de cobranças...');`
        b. **Na Resposta da API:** No mesmo `useQuery`, adicione um callback `onSuccess` para logar os dados recebidos: `onSuccess: (data) => { console.log('[DEBUG-FRONTEND-2] Dados BRUTOS recebidos da API:', data); }`
        c. **Antes do Filtro Local:** Imediatamente antes da lógica de `propostasFiltradas`, adicione: `console.log('[DEBUG-FRONTEND-3] Dados ANTES do filtro local:', propostas);`
        d. **Depois do Filtro Local:** Imediatamente depois da lógica de `propostasFiltradas`, adicione: `console.log('[DEBUG-FRONTEND-4] Dados DEPOIS do filtro local:', propostasFiltradas);`
        e. **Na Renderização:** Dentro do `.map()` que renderiza a tabela, para a primeira linha (`index === 0`), adicione: `console.log('[DEBUG-FRONTEND-5] Dados da primeira proposta a serem renderizados:', proposta);`

**Relatório Final:**
O critério de sucesso é um relatório confirmando que **TODOS** os 8 pontos de `console.log` foram inseridos nos locais exatos.