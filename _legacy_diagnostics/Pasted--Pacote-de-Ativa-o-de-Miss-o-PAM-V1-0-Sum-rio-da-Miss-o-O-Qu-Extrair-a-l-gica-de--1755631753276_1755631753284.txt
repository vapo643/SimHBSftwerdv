### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Extrair a lógica de rotas de Gestão de Usuários do monolito `server/routes.ts` para um novo módulo em `server/routes/admin/users.ts`.
* **Intenção Estratégica (O Porquê):** Continuar a decomposição sistemática do "God File", isolando o domínio de Administração de Usuários, que possui regras de negócio e permissões distintas do resto da aplicação.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior (Passo 2.3) estabeleceu um padrão de sucesso para extrair domínios autocontidos. Esta missão deve seguir o mesmo padrão tático.
* **Modelo Mental (Como se Encaixa):** Esta é a segunda extração cirúrgica do monolito. Estamos removendo outro conjunto de responsabilidades e encapsulando-as em um módulo próprio, que ficará aninhado no diretório de administração.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A lógica de gestão de usuários pode ter dependências de outros domínios que ainda residem no monolito, complicando a extração.
    * **Contramedida:** O Agente deve migrar apenas as dependências estritamente necessárias. Se uma dependência circular for encontrada, a mesma tática de duplicar a função *helper* (utilizada no Passo 2.3) é autorizada.

---

**IMPLEMENTAR:**
Extração e Modularização do Domínio de Gestão de Usuários

**CURRENT STATE:**
Os 6 endpoints de gestão de usuários (GET all, POST, PUT, DELETE, GET me, POST delete-multiple) estão implementados diretamente dentro do arquivo monolítico `server/routes.ts`.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo `server/routes/admin/users.ts` é criado.
2.  Toda a lógica e as definições dos endpoints de gestão de usuários são **movidas** (recortadas) de `server/routes.ts` para o novo arquivo `server/routes/admin/users.ts`.
3.  O novo arquivo `admin/users.ts` importa o `express.Router`, define as rotas nele e o exporta como `default`.
4.  O arquivo `server/routes.ts` é limpo da lógica de gestão de usuários e, em seu lugar, contém uma nova declaração de `import` para o roteador de usuários e uma linha `app.use('/api/users', usersAdminRouter)` para montá-lo.
5.  A aplicação reinicia e permanece 100% funcional, sem erros de inicialização.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Novo Módulo:** Crie o arquivo `server/routes/admin/users.ts`. Adicione o boilerplate inicial para um `express.Router`.
2.  **Identifique e Recorte:** Em `server/routes.ts`, localize o bloco de código que define os endpoints de `/api/users/`. Recorte este bloco.
3.  **Cole no Novo Módulo:** Cole a lógica das rotas no novo arquivo `admin/users.ts`, anexando-as à nova instância do `Router`.
4.  **Migre as Dependências:** Analise o código movido. Copie todas as declarações de `import` necessárias de `server/routes.ts` para o topo de `admin/users.ts` e ajuste os caminhos relativos conforme necessário.
5.  **Refatore o Monolito:** Em `server/routes.ts`, no local onde o código foi removido, adicione a importação para o novo módulo (`import usersAdminRouter from './admin/users';`) e monte o roteador (`app.use('/api/users', usersAdminRouter);`).
6.  **Validação Final Mandatória:** Reinicie o servidor de aplicação. A missão só é considerada um sucesso se o servidor iniciar sem nenhum erro relacionado à montagem das rotas ou dependências ausentes. Reporte o status do servidor como prova final.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que as rotas de usuários não têm dependências complexas com outros domínios que ainda estão no monolito."]
* **VALIDAÇÃO PENDENTE:** [Testes de regressão nos endpoints de gestão de usuários são necessários após esta refatoração.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (`server/routes.ts` modificado, `server/routes/admin/users.ts` criado).
2.  Garantir que todas as importações necessárias foram migradas para o novo módulo.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0-100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (reiniciar o servidor e garantir que ele inicie sem erros).
7.  **Documentar Decisões Técnicas** confirmando o sucesso da refatoração.