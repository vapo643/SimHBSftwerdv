**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Implementar o princípio de "Estado Inicial Forçado", refatorando a lógica de criação de boletos para que o status inicial de toda nova parcela seja definido pelo nosso sistema, e não pela API do Banco Inter.
* **Intenção Estratégica (O Porquê):** Para erradicar o bug crítico que está a marcar parcelas como "Pagas" incorretamente, garantindo a integridade total dos dados de cobrança e a confiança da nossa equipe na plataforma.
* **Histórico Relevante (Consulta Obrigatória):** Nossa auditoria provou que estamos a confiar cegamente no status inicial retornado pela API do Inter. Esta missão é para remover essa confiança e estabelecer nosso próprio sistema como a fonte da verdade para o estado inicial de um boleto.
* **Modelo Mental (Como se Encaixa):** Você atuará como um Engenheiro de Dados. Sua tarefa é modificar o serviço que persiste os dados do boleto após a criação no Inter. Você irá ignorar o campo de status vindo da API e, em vez disso, inserir um valor padrão e seguro.
* **Riscos Antecipados:** **Risco:** Nenhum. Esta é uma alteração que aumenta a robustez e o controle do nosso sistema sobre os dados.

---

**IMPLEMENTAR:**
A implementação do princípio de "Estado Inicial Forçado" na criação de boletos.

**BUG/CURRENT STATE:**
O sistema está a aceitar e a persistir o status inicial retornado pela API do Banco Inter, o que está a causar a criação de parcelas com o status "Pago" incorreto.

**EXPECTED (Estado Final de Sucesso):**
Após a criação de um boleto, o seu status inicial em nossa tabela `inter_collections` deve ser **SEMPRE** um valor padrão definido por nós (ex: `'A_RECEBER'`), independentemente do que a API do Inter retorne naquele momento.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Localização do Ponto de Falha:**
    - **Ação:** Localize o serviço e a função que executa a criação do registro na tabela `inter_collections` imediatamente após receber a resposta da API do Inter.

**2. Implementação da Correção:**
    - **Ação:** Modifique o comando de `INSERT` ou `UPDATE` do Drizzle.
    - **Implementação:** Na construção do objeto de dados a ser salvo, remova qualquer atribuição que venha do campo `situacao` da resposta da API. Em vez disso, defina o campo `situacao` com um valor fixo e seguro.

    - **Lógica de Exemplo (implemente este padrão):**
      ```typescript
      // ANTES (Problemático)
      // await storage.createInterCollection({
      //   ...
      //   situacao: interCollection.cobranca.situacao, // <- CONFIANÇA CEGA
      //   ...
      // });

      // DEPOIS (Corrigido)
      await storage.createInterCollection({
        ...
        situacao: 'A_RECEBER', // <- ESTADO INICIAL FORÇADO E SEGURO
        ...
      });
      ```

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
Siga o protocolo completo. O teste funcional consistirá em gerar um novo conjunto de boletos e, imediatamente após, executar uma query `SELECT` na tabela `inter_collections` para **PROVAR** que todas as novas parcelas foram criadas com o status `'A_RECEBER'`.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
Preencha a declaração completa ao final da sua implementação.
---