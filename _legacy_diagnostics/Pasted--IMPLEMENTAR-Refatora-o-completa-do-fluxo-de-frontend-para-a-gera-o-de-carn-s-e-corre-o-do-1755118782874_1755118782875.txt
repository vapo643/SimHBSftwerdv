**IMPLEMENTAR:**
Refatoração completa do fluxo de frontend para a geração de "carnês" e correção dos caminhos de salvamento no Supabase Storage para alinhar com a nossa arquitetura de gestão de boletos.

**CONTEXT:**
A nossa arquitetura assíncrona de geração de carnês está a funcionar no backend, mas a experiência do usuário no frontend está quebrada. O usuário não é notificado quando o processo termina, o botão de download não aparece, e clicar novamente no botão gera uma mensagem de erro confusa. Além disso, os ficheiros estão a ser salvos nos locais errados no Storage.

**CURRENT STATE:**
O backend gera o carnê com sucesso, mas o frontend não reflete este sucesso. Clicar no botão "Gerar Carnê" uma segunda vez dá um erro. Os ficheiros de carnês e boletos estão a ser salvos em pastas genéricas.

**EXPECTED (Estado Final de Sucesso):**

**1. Estrutura de Pastas Correta no Storage (Correção no Backend):**
    - **Boletos Individuais:** Devem ser salvos em `propostas/{propostaId}/boletos/emitidos_pendentes/{codigoSolicitacao}.pdf`.
    - **Carnê Consolidado:** Deve ser salvo em `propostas/{propostaId}/carnes/carne-{timestamp}.pdf`.

**2. Fluxo de UI Inteligente (Refatoração no Frontend):**
    - **Ao Clicar em "Gerar Carnê":** O botão fica desabilitado com um spinner. A API `POST /api/propostas/:id/sincronizar-boletos` é chamada, seguida pela `POST /api/propostas/:id/gerar-carne`, que retorna um `jobId`.
    - **Polling de Status:** Com o `jobId` em mãos, o frontend começa a verificar (a cada 3 segundos) o endpoint `GET /api/jobs/:jobId/status`.
    - **Feedback de Progresso:** Uma notificação (toast) informa ao usuário: "Processando carnê...".
    - **Conclusão:** Quando o endpoint de status retorna `completed`, a notificação muda para "Carnê pronto para download!". O botão "Gerar Carnê" é substituído por um botão verde **"Baixar Carnê"**.
    - **Download:** Clicar no novo botão "Baixar Carnê" inicia o download do ficheiro a partir da URL retornada pelo endpoint de status.
    - **Lógica "Job Já Existe":** Se o usuário clicar em "Gerar Carnê" e o carnê já tiver sido gerado (o ficheiro já existe no Storage), o sistema deve ser inteligente: em vez de dar um erro ou reprocessar, ele deve simplesmente disponibilizar o botão "Baixar Carnê" já existente.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Correção no Backend (Caminhos do Storage):**
    - **Ação:** Primeiro, audite os serviços `boletoStorageService.ts`. Corrija todas as chamadas de upload para o Supabase Storage para que utilizem os caminhos de pasta exatos descritos acima para boletos individuais e para o carnê.

**2. Refatoração no Frontend (Orquestração):**
    - **Ação:** Refatore a lógica do botão "Gerar Carnê" na "Tela de Formalização" para implementar o fluxo de polling descrito em `EXPECTED`. Use `TanStack Query` com a opção `refetchInterval` ou um `setInterval` dentro de um `useEffect` para verificar o status do job.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear todos os arquivos envolvidos.
2.  Implementar a correção do backend e depois a refatoração do frontend.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar um teste ponta-a-ponta completo.
5.  O critério final de sucesso é um fluxo de usuário perfeito: o clique no botão gera o carnê, as notificações aparecem, o botão de download é liberado ao final e o ficheiro correto é baixado da pasta correta no Storage.