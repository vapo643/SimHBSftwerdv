**MISSÃO DE AUDITORIA FORENSE V2 - FASE 3: ANÁLISE DO FRONTEND**

Sua tarefa é realizar uma análise detalhada da arquitetura do frontend em React, focando na componentização, gerenciamento de estado e nos padrões de interação com o usuário. A resposta DEVE seguir rigorosamente este formato:

**1. Arquitetura de Componentes e Design System:**
   * Descreva como a biblioteca `shadcn/ui` é utilizada para compor a interface. Identifique o componente customizado mais complexo do projeto (ex: um painel de propostas, um formulário multi-etapas) que seja construído a partir de múltiplos primitivos da `shadcn/ui` e Radix.
   * Localize e explique o uso da `class-variance-authority` (CVA) em um componente base (como `Button` ou `Card`) para gerenciar variantes de estilo. Forneça o trecho de código da definição das variantes.

**2. Estratégia de Gerenciamento de Estado (Servidor e Cliente):**
   * **TanStack Query (Estado do Servidor):**
     * Localize a configuração do `QueryClientProvider`.
     * Forneça um exemplo de código completo de um hook customizado que utilize `useQuery` para buscar dados.
     * Mostre um exemplo de `useMutation` sendo usado para submeter dados ao endpoint `POST /api/propostas`. O exemplo deve incluir a implementação das funções `onSuccess` (para invalidação de cache) e `onError` (para tratamento de erros de validação retornados pela API).
   * **`useReducer` (Estado do Cliente):**
     * Encontre e apresente um exemplo de uso do hook `useReducer` para gerenciar um estado local complexo (ex: o estado de um assistente de formulário com múltiplas etapas). O exemplo deve incluir a definição do estado inicial, a função `reducer` e os tipos de `action` despachados.

**3. Roteamento e Proteção de Rotas (`wouter`):**
   * Explique como as rotas da aplicação são definidas utilizando `wouter`.
   * Identifique e forneça o código do componente ou hook responsável por implementar rotas protegidas. O código deve mostrar como o estado de autenticação do usuário e sua `role` (obtidos após o login) são verificados antes de permitir o acesso a uma página restrita.
   * Descreva como o sistema redireciona o usuário em caso de acesso não autenticado (erro 401) ou não autorizado (erro 403).

**4. Formulários e Validação (React Hook Form + Zod):**
   * Localize o formulário de criação de proposta de crédito.
   * Apresente o trecho de código que demonstra como o schema Zod (`createProposalSchema`) é integrado ao `useForm` do React Hook Form através do `@hookform/resolvers`.
   * Mostre como os erros de validação (tanto do lado do cliente via Zod quanto do lado do servidor via resposta da API) são capturados e exibidos para o usuário nos campos correspondentes do formulário.