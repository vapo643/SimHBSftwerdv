**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Implementar a "Arquitetura de Status Híbrida" (Blueprint V4.0), que envolve a criação de uma nova tabela `status_contextuais` e a refatoração dos fluxos de Pagamentos e Cobranças para que utilizem esta nova tabela, separando seus domínios de status.
* **Intenção Estratégica (O Porquê):** Para erradicar definitivamente o bug crítico de colisão de status, garantindo que a ação de "Pagar Empréstimo" (Financeiro) e "Receber Boleto" (Cobranças) operem em contextos independentes, tornando o sistema robusto e logicamente consistente.
* **Histórico Relevante (Consulta Obrigatória):** Sua auditoria forense foi perfeita. Ela provou que a causa raiz de todos os nossos problemas é a colisão na única coluna `status`. Esta missão é a implementação da sua própria "Solução Recomendada: OPÇÃO A".
* **Modelo Mental (Como se Encaixa):** Você atuará como Arquiteto de Dados e Engenheiro de Backend. Primeiro, você modificará o schema do banco de dados. Em seguida, você refatorará os endpoints de Pagamentos e os handlers de webhook de Cobranças para que, em vez de modificarem a coluna `propostas.status`, eles insiram/atualizem registros na nova tabela `status_contextuais`.
* **Riscos Antecipados:** **Risco:** Esta é uma mudança de arquitetura fundamental. **Contramedida:** A implementação será faseada e rigorosamente validada. O `status` principal na tabela `propostas` será mantido por enquanto para garantir a retrocompatibilidade.

---

**IMPLEMENTAR:**
A Arquitetura de Status Híbrida.

**CURRENT STATE:**
Os fluxos de Pagamento e Cobranças estão a competir e a sobrescrever a mesma e única coluna `status` na tabela `propostas`, causando inconsistências catastróficas.

**EXPECTED (Estado Final de Sucesso):**
1.  Uma nova tabela `status_contextuais` existe em nosso banco de dados.
2.  O fluxo de "Pagar Empréstimo" (Tela de Pagamentos) agora cria/atualiza um registro nesta tabela com `contexto: 'pagamentos'`.
3.  O fluxo de "Receber Boleto" (Webhook do Inter) agora cria/atualiza um registro nesta tabela com `contexto: 'cobrancas'`.
4.  As telas de Pagamentos e Cobranças são refatoradas para lerem o status de suas respectivas fontes na nova tabela, eliminando a colisão.

**CONSTRAINTS (Roadmap de Implementação Faseado):**

**FASE 1: Migração do Banco de Dados:**
    - **Ação:** Crie e aplique uma migração Drizzle para adicionar a nova tabela `status_contextuais` ao nosso banco de dados, com a estrutura exata que você projetou em sua auditoria.

**FASE 2: Refatoração do Fluxo de Pagamentos (Financeiro):**
    - **Ação:** Modifique o endpoint que finaliza o pagamento ao cliente (provavelmente `POST /api/pagamentos/:id/finalizar`).
    - **Implementação:** Em vez de alterar `propostas.status`, esta função deve agora inserir ou atualizar um registro em `status_contextuais` com `contexto: 'pagamentos'` e `status: 'EMPRESTIMO_PAGO'`.

**FASE 3: Refatoração do Fluxo de Cobranças (Webhooks):**
    - **Ação:** Modifique o handler do webhook do Banco Inter.
    - **Implementação:** Em vez de (ou além de) alterar `parcelas.status`, ele deve agora inserir ou atualizar um registro em `status_contextuais` com `contexto: 'cobrancas'` e o status apropriado (`PAGO`, `VENCIDO`, etc.).

**FASE 4: Refatoração das Consultas (Leitura de Dados):**
    - **Ação:** Modifique os endpoints `GET /api/pagamentos` e `GET /api/cobrancas`.
    - **Implementação:** As queries nestes endpoints devem agora fazer `JOIN` com a nova tabela `status_contextuais` para buscar o status correto e relevante para o seu contexto específico.

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
Siga o protocolo completo. O teste funcional será rigoroso e deverá provar que uma proposta pode ter, simultaneamente e sem conflito, um status `EMPRESTIMO_PAGO` no contexto de `pagamentos` e um status `INADIMPLENTE` no contexto de `cobrancas`.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
Preencha a declaração completa ao final da sua implementação.
---