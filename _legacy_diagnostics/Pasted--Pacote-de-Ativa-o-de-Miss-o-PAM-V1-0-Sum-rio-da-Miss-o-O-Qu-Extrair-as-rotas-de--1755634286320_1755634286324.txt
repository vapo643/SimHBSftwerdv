### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Extrair as rotas de integração com as APIs do Banco Inter e ClickSign do monolito `server/routes.ts` para seus próprios módulos dedicados.
* **Intenção Estratégica (O Porquê):** Isolar as complexidades e os pontos de falha associados a APIs de terceiros em módulos dedicados. Isso melhora a resiliência (facilitando a aplicação de *circuit breakers* ou *mocks* de teste) e simplifica drasticamente o orquestrador principal.
* **Histórico Relevante (Consulta Obrigatória):** As missões anteriores validaram um padrão de sucesso para extração de rotas. A auditoria inicial identificou múltiplos endpoints para o Banco Inter e ClickSign dentro do monolito.
* **Modelo Mental (Como se Encaixa):** Esta missão cria "adaptadores" modulares para cada serviço externo. O monolito `routes.ts` deixará de conhecer os detalhes da comunicação com essas APIs e apenas delegará as requisições para os roteadores apropriados.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** As rotas de integração podem ter configurações de cliente HTTP ou dependências criptográficas específicas que, se não migradas corretamente, quebrarão a comunicação.
    * **Contramedida:** O prompt exige uma migração completa de todas as dependências associadas e a validação final pelo reinício do servidor, que confirmará a correta inicialização dos clientes de API.

---

**IMPLEMENTAR:**
Extração e Modularização do Domínio de Integrações

**CURRENT STATE:**
Os endpoints e a lógica de negócio para interagir com as APIs do Banco Inter e do ClickSign estão implementados diretamente dentro do arquivo monolítico `server/routes.ts`.

**EXPECTED (Estado Final de Sucesso):**
1.  Dois novos arquivos são criados: `server/routes/integracao/inter.ts` e `server/routes/integracao/clicksign.ts`.
2.  Todos os endpoints relacionados ao Banco Inter são **movidos** de `server/routes.ts` para `server/routes/integracao/inter.ts`.
3.  Todos os endpoints relacionados ao ClickSign são **movidos** de `server/routes.ts` para `server/routes/integracao/clicksign.ts`.
4.  Cada novo arquivo exporta um `express.Router` contendo suas respectivas rotas.
5.  O arquivo `server/routes.ts` é limpo dessa lógica e modificado para importar e montar os dois novos roteadores.
6.  A aplicação reinicia sem erros.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie os Novos Módulos:** Crie os arquivos `server/routes/integracao/inter.ts` e `server/routes/integracao/clicksign.ts`, cada um com o boilerplate inicial para um `express.Router`.
2.  **Auditoria e Extração:** Analise `server/routes.ts` para identificar todos os endpoints pertencentes a cada serviço. Recorte e cole os blocos de código correspondentes em seus novos respectivos módulos.
3.  **Migração de Dependências:** Migre todas as declarações de `import` e funções *helper* necessárias para cada novo módulo, ajustando os caminhos relativos.
4.  **Refatore o Monolito:** Delete o código extraído de `server/routes.ts`. Adicione as importações para os novos roteadores (ex: `interRouter`, `clicksignRouter`) e monte-os usando `app.use()`.
5.  **Validação Final Mandatória:** Reinicie o servidor de aplicação. A missão só é considerada um sucesso se o servidor iniciar sem nenhum erro. Reporte o status do servidor e o resultado do `get_latest_lsp_diagnostics` como prova final.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que as rotas de Inter e ClickSign são independentes e podem ser movidas separadamente."]
* **VALIDAÇÃO PENDENTE:** [Testes de regressão nos endpoints de integração são necessários.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas.
2.  Garantir que todas as importações necessárias foram migradas.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0-100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (reiniciar o servidor e garantir que ele inicie sem erros).
7.  **Documentar Decisões Técnicas**.