/**
 * Value Objects - Unit Tests
 *
 * AUDITORIA FORENSE - PAM V1.2
 * Testa validaÃ§Ã£o de domÃ­nio e business rules dos Value Objects
 */

import { describe, test, expect } from 'vitest';
import { CPF, CNPJ, Money, Email, PhoneNumber, CEP } from '../../shared/value-objects';

describe('Value Objects - Auditoria Forense', () => {
  describe('CPF Value Object', () => {
    test('PROVA VO #1: CPF vÃ¡lido deve ser aceito', () => {
      // CPFs vÃ¡lidos com dÃ­gitos verificadores corretos
      const validCPFs = ['11144477735', '111.444.777-35', '12345678909'];

      validCPFs.forEach((cpf) => {
        const cpfVO = CPF.create(cpf);
        expect(cpfVO).not.toBeNull();
        expect(cpfVO?.getValue()).toBe(cpf.replace(/\D/g, ''));
        console.log(`âœ… CPF vÃ¡lido aceito: ${cpf} -> ${cpfVO?.getFormatted()}`);
      });
    });

    test('PROVA VO #2: CPF invÃ¡lido deve ser rejeitado', () => {
      // CPFs invÃ¡lidos
      const invalidCPFs = [
        '11111111111', // Todos os dÃ­gitos iguais
        '123456789', // Menos de 11 dÃ­gitos
        '12345678901', // DÃ­gitos verificadores incorretos
        '000.000.000-00', // CPF invÃ¡lido conhecido
        'abc.def.ghi-jk', // NÃ£o numÃ©rico
      ];

      invalidCPFs.forEach((cpf) => {
        const cpfVO = CPF.create(cpf);
        expect(cpfVO).toBeNull();
        console.log(`ðŸ”¥ CPF invÃ¡lido rejeitado: ${cpf}`);
      });
    });

    test('PROVA VO #3: FormataÃ§Ã£o do CPF', () => {
      const cpf = CPF.create('11144477735');
      expect(cpf?.getFormatted()).toBe('111.444.777-35');
      expect(cpf?.toString()).toBe('111.444.777-35');
    });
  });

  describe('CNPJ Value Object', () => {
    test('PROVA VO #4: CNPJ vÃ¡lido deve ser aceito', () => {
      // CNPJs vÃ¡lidos com dÃ­gitos verificadores corretos
      const validCNPJs = ['11222333000181', '11.222.333/0001-81'];

      validCNPJs.forEach((cnpj) => {
        const cnpjVO = CNPJ.create(cnpj);
        expect(cnpjVO).not.toBeNull();
        console.log(`âœ… CNPJ vÃ¡lido aceito: ${cnpj} -> ${cnpjVO?.getFormatted()}`);
      });
    });

    test('PROVA VO #5: CNPJ invÃ¡lido deve ser rejeitado', () => {
      const invalidCNPJs = [
        '11111111111111', // Todos os dÃ­gitos iguais
        '1122233300018', // Menos de 14 dÃ­gitos
        '11222333000182', // DÃ­gito verificador incorreto
        '00.000.000/0000-00', // CNPJ conhecido como invÃ¡lido
      ];

      invalidCNPJs.forEach((cnpj) => {
        const cnpjVO = CNPJ.create(cnpj);
        expect(cnpjVO).toBeNull();
        console.log(`ðŸ”¥ CNPJ invÃ¡lido rejeitado: ${cnpj}`);
      });
    });
  });

  describe('Money Value Object', () => {
    test('PROVA VO #6: OperaÃ§Ãµes matemÃ¡ticas precisas', () => {
      const valor1 = Money.fromReais(100.5);
      const valor2 = Money.fromReais(50.25);

      // AdiÃ§Ã£o
      const soma = valor1.add(valor2);
      expect(soma.getReais()).toBe(150.75);

      // SubtraÃ§Ã£o
      const subtracao = valor1.subtract(valor2);
      expect(subtracao.getReais()).toBe(50.25);

      // MultiplicaÃ§Ã£o
      const multiplicacao = valor1.multiply(2);
      expect(multiplicacao.getReais()).toBe(201.0);

      // DivisÃ£o
      const divisao = valor1.divide(2);
      expect(divisao.getReais()).toBe(50.25);

      console.log('âœ… OperaÃ§Ãµes matemÃ¡ticas precisas validadas');
    });

    test('PROVA VO #7: FormataÃ§Ã£o monetÃ¡ria brasileira', () => {
      const valor = Money.fromReais(1234.56);
      const formatted = valor.toFormattedString();

      // Deve estar no formato brasileiro
      expect(formatted).toContain('R$');
      expect(formatted).toContain('1.234,56');

      console.log(`âœ… FormataÃ§Ã£o BR: ${formatted}`);
    });

    test('PROVA VO #8: ValidaÃ§Ã£o de valor negativo', () => {
      const valorNegativo = Money.fromString('-100');
      expect(valorNegativo).toBeNull();

      const valorZero = Money.zero();
      expect(valorZero.isZero()).toBe(true);
      expect(valorZero.getReais()).toBe(0);

      console.log('âœ… ValidaÃ§Ã£o de valores negativos/zero');
    });

    test('PROVA VO #9: Parse de string no formato brasileiro', () => {
      const testCases = [
        { input: 'R$ 1.234,56', expected: 1234.56 },
        { input: '1.234,56', expected: 1234.56 },
        { input: '1234,56', expected: 1234.56 },
        { input: '1234.56', expected: 1234.56 }, // Formato americano tambÃ©m
      ];

      testCases.forEach(({ input, expected }) => {
        const money = Money.fromString(input);
        expect(money).not.toBeNull();
        expect(money?.getReais()).toBe(expected);
        console.log(`âœ… Parse BR: "${input}" -> R$ ${expected}`);
      });
    });
  });

  describe('Email Value Object', () => {
    test('PROVA VO #10: Email vÃ¡lido e normalizaÃ§Ã£o', () => {
      const email = Email.create(' TEST@EXAMPLE.COM ');
      expect(email).not.toBeNull();
      expect(email?.getValue()).toBe('test@example.com');
      expect(email?.getDomain()).toBe('example.com');
      expect(email?.getLocalPart()).toBe('test');
    });

    test('PROVA VO #11: Email invÃ¡lido rejeitado', () => {
      const invalidEmails = ['invalid-email', '@domain.com', 'user@', 'user..user@domain.com'];

      invalidEmails.forEach((email) => {
        const emailVO = Email.create(email);
        expect(emailVO).toBeNull();
      });
    });
  });

  describe('PhoneNumber Value Object', () => {
    test('PROVA VO #12: Telefone brasileiro vÃ¡lido', () => {
      const mobile = PhoneNumber.create('(11) 98765-4321');
      expect(mobile).not.toBeNull();
      expect(mobile?.isMobile()).toBe(true);
      expect(mobile?.getFormatted()).toBe('(11) 98765-4321');

      const landline = PhoneNumber.create('(11) 3456-7890');
      expect(landline).not.toBeNull();
      expect(landline?.isMobile()).toBe(false);
      expect(landline?.getFormatted()).toBe('(11) 3456-7890');
    });
  });

  describe('CEP Value Object', () => {
    test('PROVA VO #13: CEP brasileiro vÃ¡lido', () => {
      const cep = CEP.create('01310-100');
      expect(cep).not.toBeNull();
      expect(cep?.getValue()).toBe('01310100');
      expect(cep?.getFormatted()).toBe('01310-100');
    });

    test('PROVA VO #14: CEP invÃ¡lido rejeitado', () => {
      const invalidCEPs = [
        '123', // Muito curto
        '123456789', // Muito longo
        'abcd-efgh', // NÃ£o numÃ©rico
      ];

      invalidCEPs.forEach((cep) => {
        const cepVO = CEP.create(cep);
        expect(cepVO).toBeNull();
      });
    });
  });
});
