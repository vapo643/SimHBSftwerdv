import { createServerSupabaseAdminClient } from '../lib/supabase';
import PDFDocument from 'pdfkit';
import { Buffer } from 'buffer';

interface PropostaData {
  id: string;
  clienteData: any;
  condicoesData: any;
  lojaId: number;
  produtoId: number;
  tabelaComercialId: number;
  dataAprovacao: string;
}

interface ClientData {
  nome: string;
  cpf: string;
  email: string;
  telefone: string;
  rg?: string;
  orgaoEmissor?: string;
  estadoCivil?: string;
  nacionalidade?: string;
  cep?: string;
  endereco?: string;
  ocupacao?: string;
  rendaMensal?: number;
}

interface CondicoesData {
  valor: number;
  prazo: number;
  finalidade?: string;
  valorTac?: number;
  valorIof?: number;
  valorTotalFinanciado?: number;
  parcela?: number;
  taxaJuros?: number;
}

export async function generateCCB(propostaId: string): Promise<string> {
  try {
    console.log(`üîÑ [CCB Generator] Iniciando gera√ß√£o de CCB para proposta ${propostaId}`);
    
    const supabase = createServerSupabaseAdminClient();
    
    // 1. Buscar dados completos da proposta
    const { data: proposta, error: propostaError } = await supabase
      .from('propostas')
      .select(`
        *,
        lojas (
          id,
          nome_loja,
          parceiros (
            id,
            razao_social,
            cnpj
          )
        ),
        produtos (
          id,
          nome_produto,
          tac_valor,
          tac_tipo
        ),
        tabelas_comerciais (
          id,
          nome_tabela,
          taxa_juros,
          comissao
        )
      `)
      .eq('id', propostaId)
      .single();
    
    if (propostaError || !proposta) {
      throw new Error(`Proposta ${propostaId} n√£o encontrada`);
    }
    
    const clienteData = proposta.cliente_data as ClientData;
    const condicoesData = proposta.condicoes_data as CondicoesData;
    
    // 2. Criar o documento PDF com metadados de seguran√ßa para evitar falsos positivos
    const doc = new PDFDocument({ 
      margin: 40, 
      size: 'A4',
      info: {
        Title: `CCB - C√©dula de Cr√©dito Banc√°rio ${propostaId}`,
        Author: 'Sistema Simpix - Gest√£o de Cr√©dito',
        Subject: 'C√©dula de Cr√©dito Banc√°rio',
        Keywords: 'CCB, Cr√©dito, Banc√°rio, Financeiro, Proposta',
        Creator: 'Simpix CCB Generator v1.0',
        Producer: 'PDFKit/Node.js',
        CreationDate: new Date(),
        ModDate: new Date()
      }
    });
    const chunks: Buffer[] = [];
    
    doc.on('data', (chunk: Buffer) => chunks.push(chunk));
    
    // === HEADER ===
    doc.fontSize(16).font('Helvetica-Bold').text('C√âDULA DE CR√âDITO BANC√ÅRIO', { align: 'center' });
    doc.moveDown(0.5);
    
    // Campos do cabe√ßalho - primeira linha
    const yPos = doc.y;
    doc.fontSize(10).font('Helvetica');
    doc.text('C√©dula N¬∫', 50, yPos, { width: 150 });
    doc.text('Data de Emiss√£o', 200, yPos, { width: 150 });
    doc.text('Finalidade da Opera√ß√£o', 350, yPos, { width: 150 });
    
    // Segunda linha - valores
    doc.fontSize(9).font('Helvetica-Bold');
    doc.text(propostaId, 50, yPos + 15, { width: 150 });
    const dataEmissao = new Date(proposta.data_aprovacao || new Date()).toLocaleDateString('pt-BR');
    doc.text(dataEmissao, 200, yPos + 15, { width: 150 });
    doc.text('Empr√©stimo Pessoal', 350, yPos + 15, { width: 150 });
    
    doc.moveDown(2);
    
    // === I. EMITENTE ===
    doc.fontSize(12).font('Helvetica-Bold').text('I. EMITENTE');
    doc.moveDown(0.5);
    
    // Layout em duas colunas para campos do emitente
    const leftCol = 50;
    const rightCol = 300;
    let currentY = doc.y;
    
    doc.fontSize(9).font('Helvetica');
    doc.text('Nome/Raz√£o Social', leftCol, currentY, { width: 200 });
    doc.text('CPF/CNPJ', rightCol, currentY, { width: 200 });
    
    doc.fontSize(9).font('Helvetica-Bold');
    doc.text(clienteData.nome, leftCol, currentY + 12, { width: 200 });
    doc.text(clienteData.cpf, rightCol, currentY + 12, { width: 200 });
    
    currentY += 35;
    doc.fontSize(9).font('Helvetica');
    doc.text('RG', leftCol, currentY, { width: 50 });
    doc.text('Expedidor', leftCol + 60, currentY, { width: 40 });
    doc.text('UF', leftCol + 110, currentY, { width: 30 });
    doc.text('Emiss√£o', leftCol + 150, currentY, { width: 50 });
    doc.text('Nacionalidade', rightCol, currentY, { width: 100 });
    doc.text('Local Nascimento', rightCol + 110, currentY, { width: 100 });
    
    doc.fontSize(9).font('Helvetica-Bold');
    doc.text(clienteData.rg || 'N/A', leftCol, currentY + 12, { width: 50 });
    doc.text(clienteData.orgaoEmissor || 'N/A', leftCol + 60, currentY + 12, { width: 40 });
    doc.text('SP', leftCol + 110, currentY + 12, { width: 30 });
    doc.text('N/A', leftCol + 150, currentY + 12, { width: 50 });
    doc.text(clienteData.nacionalidade || 'Brasileira', rightCol, currentY + 12, { width: 100 });
    doc.text('S√£o Paulo', rightCol + 110, currentY + 12, { width: 100 });
    
    currentY += 35;
    doc.fontSize(9).font('Helvetica');
    doc.text('Estado Civil', leftCol, currentY, { width: 200 });
    
    doc.fontSize(9).font('Helvetica-Bold');
    doc.text(clienteData.estadoCivil || 'N/A', leftCol, currentY + 12, { width: 200 });
    
    currentY += 35;
    doc.fontSize(9).font('Helvetica');
    doc.text('Endere√ßo', leftCol, currentY, { width: 100 });
    doc.text('CEP', leftCol + 200, currentY, { width: 80 });
    doc.text('Cidade', rightCol, currentY, { width: 100 });
    doc.text('UF', rightCol + 150, currentY, { width: 50 });
    
    doc.fontSize(9).font('Helvetica-Bold');
    doc.text(clienteData.endereco || 'N/A', leftCol, currentY + 12, { width: 190 });
    doc.text(clienteData.cep || 'N/A', leftCol + 200, currentY + 12, { width: 80 });
    doc.text('S√£o Paulo', rightCol, currentY + 12, { width: 100 });
    doc.text('SP', rightCol + 150, currentY + 12, { width: 50 });
    
    doc.moveDown(3);
    
    // === II. CREDOR ORIGIN√ÅRIO ===
    doc.fontSize(12).font('Helvetica-Bold').text('II. CREDOR ORIGIN√ÅRIO doravante ("Credor")');
    doc.moveDown(0.5);
    
    currentY = doc.y;
    doc.fontSize(9).font('Helvetica');
    doc.text('Raz√£o Social', leftCol, currentY, { width: 200 });
    doc.text('CNPJ', rightCol, currentY, { width: 200 });
    
    doc.fontSize(9).font('Helvetica-Bold');
    doc.text(proposta.lojas?.parceiros?.razao_social || 'N/A', leftCol, currentY + 12, { width: 200 });
    doc.text(proposta.lojas?.parceiros?.cnpj || 'N/A', rightCol, currentY + 12, { width: 200 });
    
    currentY += 35;
    doc.fontSize(9).font('Helvetica');
    doc.text('Endere√ßo', leftCol, currentY, { width: 100 });
    doc.text('CEP', leftCol + 200, currentY, { width: 80 });
    doc.text('Cidade', rightCol, currentY, { width: 100 });
    doc.text('UF', rightCol + 150, currentY, { width: 50 });
    
    doc.fontSize(9).font('Helvetica-Bold');
    doc.text('S√£o Paulo, SP', leftCol, currentY + 12, { width: 190 });
    doc.text('01000-000', leftCol + 200, currentY + 12, { width: 80 });
    doc.text('S√£o Paulo', rightCol, currentY + 12, { width: 100 });
    doc.text('SP', rightCol + 150, currentY + 12, { width: 50 });
    
    doc.moveDown(3);
    
    // === III. CONDI√á√ïES E CARACTER√çSTICAS ===
    doc.fontSize(12).font('Helvetica-Bold').text('III. CONDI√á√ïES E CARACTER√çSTICAS DESTA C√âDULA DE CR√âDITO BANC√ÅRIO');
    doc.moveDown(0.5);
    
    // Tabela de condi√ß√µes (campos 1-20)
    const tableData = [
      ['1. Valor de Principal:', `R$ ${condicoesData.valor?.toFixed(2).replace('.', ',') || '0,00'}`, '2. Data de Emiss√£o:', dataEmissao, '3. Vencimento da 1¬™ Parcela:', 'A definir', '4. Vencimento da √öltima Parcela:', 'A definir'],
      ['5. Prazo de Amortiza√ß√£o:', `${condicoesData.prazo || 0} mes(es)`, '6. Juros Modalidade:', 'Pr√©-Fixados', '7. Percentual/√çndice:', `${condicoesData.taxaJuros || proposta.tabelas_comerciais?.taxa_juros || 0}% a.m.`, '8. Periodicidade da Capitaliza√ß√£o dos Juros:', 'Di√°ria, com base em um ano de 365 dias'],
      ['9. Taxa de Juros Efetiva Mensal:', `${condicoesData.taxaJuros || proposta.tabelas_comerciais?.taxa_juros || 0}%`, '10. Taxa de Juros Efetiva Anual:', 'A calcular', '11. IOF:', `R$ ${condicoesData.valorIof?.toFixed(2).replace('.', ',') || '0,00'}`, '12. Pra√ßa de Pagamento:', 'S√£o Paulo/SP'],
      ['13. Formas de Pagamento das Parcelas:', 'Cobran√ßa por boleto', '', '', 'TAC:', `R$ ${condicoesData.valorTac?.toFixed(2).replace('.', ',') || '0,00'}`],
      ['14. Ano Base:', '365 dias', '15. C√°lculo dos Encargos:', 'Incidentes sobre o Saldo Devedor', '16. Custo Efetivo Total - CET:', 'A calcular'],
      ['17. Tarifa de TED:', 'R$ 0,00', '18. Taxa de Cr√©dito:', 'R$ 0,00', '', ''],
      ['19. Data de libera√ß√£o do recurso:', dataEmissao, '20. Valor l√≠quido liberado:', `R$ ${condicoesData.valor?.toFixed(2).replace('.', ',') || '0,00'}`],
      ['20.a Valor L√≠quido Liberado ao Emissor:', `R$ ${condicoesData.valor?.toFixed(2).replace('.', ',') || '0,00'}`, '', '', '', '']
    ];
    
    // Renderizar tabela
    currentY = doc.y;
    const cellHeight = 20;
    const cellWidth = 125;
    
    for (let row = 0; row < tableData.length; row++) {
        const rowData = tableData[row];
        let x = leftCol;
        
        for (let col = 0; col < rowData.length; col += 2) {
            if (rowData[col]) {
                // Campo
                doc.rect(x, currentY, cellWidth, cellHeight).stroke();
                doc.fontSize(8).font('Helvetica');
                doc.text(rowData[col], x + 2, currentY + 2, { width: cellWidth - 4 });
                
                // Valor
                if (rowData[col + 1]) {
                    doc.fontSize(8).font('Helvetica-Bold');
                    doc.text(rowData[col + 1], x + 2, currentY + 12, { width: cellWidth - 4 });
                }
            }
            x += cellWidth;
        }
        currentY += cellHeight;
    }
    
    // Adicionar nova p√°gina para continuar
    doc.addPage();
    
    // === FLUXO DE PAGAMENTO ===
    doc.fontSize(12).font('Helvetica-Bold').text('FLUXO DE PAGAMENTO', { align: 'center' });
    doc.moveDown(0.5);
    
    // Cabe√ßalho da tabela de parcelas
    currentY = doc.y;
    doc.fontSize(10).font('Helvetica-Bold');
    doc.text('Parcela', leftCol, currentY, { width: 80, align: 'center' });
    doc.text('Data de Vencimento', leftCol + 80, currentY, { width: 120, align: 'center' });
    doc.text('Valor R$', leftCol + 200, currentY, { width: 100, align: 'center' });
    
    // Linha separadora
    doc.rect(leftCol, currentY + 15, 300, 1).fill();
    currentY += 25;
    
    // Gerar parcelas
    const valorParcela = condicoesData.parcela || calcularParcela(condicoesData.valor || 0, condicoesData.prazo || 1, condicoesData.taxaJuros || 0);
    
    for (let i = 1; i <= (condicoesData.prazo || 1); i++) {
        const dataVencimento = new Date();
        dataVencimento.setMonth(dataVencimento.getMonth() + i);
        
        doc.fontSize(9).font('Helvetica');
        doc.text(i.toString().padStart(2, '0'), leftCol, currentY, { width: 80, align: 'center' });
        doc.text(dataVencimento.toLocaleDateString('pt-BR'), leftCol + 80, currentY, { width: 120, align: 'center' });
        doc.text(`R$ ${valorParcela.toFixed(2).replace('.', ',')}`, leftCol + 200, currentY, { width: 100, align: 'center' });
        
        currentY += 15;
        
        // Nova p√°gina se necess√°rio
        if (currentY > 700) {
            doc.addPage();
            currentY = 50;
        }
    }
    
    doc.moveDown(2);
    
    // === TEXTO PRINCIPAL ===
    doc.fontSize(10).font('Helvetica');
    const textoObrigacao = `Eu, ${clienteData.nome} (doravante denominado "Emitente"), prometo pagar por esta c√©dula de cr√©dito banc√°rio, emitida e assinada de forma f√≠sica ou eletr√¥nica ("C√©dula" ou "CCB"), ao Credor, ou √† sua ordem, na pra√ßa e nas datas indicadas no Campo IV e V do pre√¢mbulo, em moeda corrente nacional, a quantia l√≠quida, certa e exig√≠vel de principal acrescida dos encargos previstos nesta C√©dula, observado o disposto nas demais cl√°usulas a seguir descritas. Referido valor corresponde ao empr√©stimo que me foi concedido pelo Credor mediante minha solicita√ß√£o, cujos termos, valor, encargos, acess√≥rios e condi√ß√µes a seguir enunciados foram aceitos com estrita boa-f√© e de livre e espont√¢nea vontade.`;
    
    doc.text(textoObrigacao, { align: 'justify' });
    doc.moveDown();
    
    const textoValor = `O valor das parcelas de principal acrescidas dos juros remunerat√≥rios estabelecidos no Campo IV do pre√¢mbulo ser√° pago pelo Emitente de acordo com as datas de vencimento apresentadas, da forma indicada no pre√¢mbulo, se outra forma n√£o for convencionada com o Credor por escrito.`;
    
    doc.text(textoValor, { align: 'justify' });
    doc.moveDown();
    
    const textoLei = `A presente C√©dula √© regida, incluindo seus eventuais aditivos e anexos, pela legisla√ß√£o em vigor aplic√°vel √† esp√©cie, incluindo, mas n√£o se limitando √† Lei n¬∫ 10.931, de 02 de agosto de 2004, conforme alterada ("Lei n¬∫ 10.931"), pelas condi√ß√µes do quadro preambular acima e pelas cl√°usulas a seguir:`;
    
    doc.text(textoLei, { align: 'justify' });
    doc.moveDown(2);
    
    // === CL√ÅUSULAS ===
    addClausulas(doc);
    
    // === ASSINATURAS ===
    doc.addPage();
    doc.fontSize(12).font('Helvetica-Bold').text('ASSINATURAS', { align: 'center' });
    doc.moveDown(2);
    
    doc.fontSize(11).font('Helvetica');
    doc.text(`Local e Data: S√£o Paulo, ${dataEmissao}`);
    doc.moveDown(3);
    
    doc.text('_'.repeat(50));
    doc.text(`EMITENTE: ${clienteData.nome}`);
    doc.text(`CPF: ${clienteData.cpf}`);
    doc.moveDown(3);
    
    doc.text('_'.repeat(50));
    doc.text(`CREDOR: ${proposta.lojas?.parceiros?.razao_social || 'N/A'}`);
    doc.text(`CNPJ: ${proposta.lojas?.parceiros?.cnpj || 'N/A'}`);
    
    // Finalizar o PDF
    doc.end();
    
    // 3. Aguardar a cria√ß√£o do PDF
    const pdfBuffer = await new Promise<Buffer>((resolve) => {
      doc.on('end', () => {
        const buffer = Buffer.concat(chunks);
        resolve(buffer);
      });
    });
    
    // 4. Fazer upload do PDF para o Supabase Storage
    const fileName = `CCB-${propostaId}-${Date.now()}.pdf`;
    const filePath = `ccb/${fileName}`;
    
    console.log(`üîÑ [CCB Generator] Fazendo upload para bucket 'documents', caminho: ${filePath}`);
    console.log(`üîÑ [CCB Generator] Tamanho do buffer: ${pdfBuffer.length} bytes`);
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('documents')
      .upload(filePath, pdfBuffer, {
        contentType: 'application/pdf',
        upsert: false,
        metadata: {
          'x-document-type': 'ccb',
          'x-proposta-id': propostaId,
          'x-generated-by': 'simpix-system',
          'x-document-version': '1.0'
        }
      });
    
    if (uploadError) {
      console.error(`‚ùå [CCB Generator] Erro no upload: ${uploadError.message}`);
      console.error(`‚ùå [CCB Generator] Detalhes do erro:`, uploadError);
      throw new Error(`Erro ao fazer upload da CCB: ${uploadError.message}`);
    }
    
    console.log(`‚úÖ [CCB Generator] Upload realizado com sucesso:`, uploadData);
    console.log(`‚úÖ [CCB Generator] Path final no storage: ${uploadData?.path}`);
    console.log(`‚úÖ [CCB Generator] Full path no storage: ${uploadData?.fullPath}`);
    
    // 5. Gerar URL assinada para acesso ao documento
    const { data: signedUrlData } = await supabase.storage
      .from('documents')
      .createSignedUrl(filePath, 3600 * 24 * 30); // 30 dias
    
    // 6. Atualizar a proposta com os dados da CCB
    const { error: updateError } = await supabase
      .from('propostas')
      .update({
        ccb_gerado: true,
        caminho_ccb_assinado: filePath,
        ccb_documento_url: signedUrlData?.signedUrl
      })
      .eq('id', propostaId);
    
    if (updateError) {
      console.error(`‚ùå [CCB Generator] Erro ao atualizar proposta: ${updateError.message}`);
    }
    
    console.log(`‚úÖ [CCB Generator] CCB gerada com sucesso para proposta ${propostaId}: ${filePath}`);
    return filePath;
    
  } catch (error) {
    console.error(`‚ùå [CCB Generator] Erro ao gerar CCB:`, error);
    throw error;
  }
}

// Fun√ß√£o para adicionar todas as cl√°usulas jur√≠dicas
function addClausulas(doc: PDFKit.PDFDocument) {
  doc.fontSize(12).font('Helvetica-Bold').text('CL√ÅUSULAS E CONDI√á√ïES');
  doc.moveDown();
  
  // Cl√°usula Primeira
  doc.fontSize(11).font('Helvetica-Bold').text('Cl√°usula Primeira');
  doc.fontSize(10).font('Helvetica');
  const clausula1 = `‚Äì O Credor concedeu ao Emitente um empr√©stimo no valor e nas demais condi√ß√µes indicadas no pre√¢mbulo, cujo importe l√≠quido, deduzido de despesas, tarifas e Imposto sobre Opera√ß√µes de Cr√©dito ("IOF") cobrado antecipadamente, ser√° liberado por meio de cr√©dito em conta do Emitente, conforme indicada no pre√¢mbulo, observado o disposto nesta CCB.`;
  doc.text(clausula1, { align: 'justify' });
  doc.moveDown();
  
  // Cl√°usula Segunda
  doc.fontSize(11).font('Helvetica-Bold').text('Cl√°usula Segunda');
  doc.fontSize(10).font('Helvetica');
  const clausula2 = `‚Äì O Emitente declara-se ciente e de acordo, bem como se obriga a restituir o valor mutuado ao Credor ou a quem este indicar, acrescido dos encargos, taxas, do Custo Efetivo Total ‚Äì CET, nos prazos estabelecidos no pre√¢mbulo. Os juros ajustados nesta C√©dula ser√£o calculados de forma exponencial e capitalizados diariamente, com base em um ano de 365 (trezentos e sessenta e cinco) dias.`;
  doc.text(clausula2, { align: 'justify' });
  doc.moveDown();
  
  doc.fontSize(10).font('Helvetica');
  const paragrafoPrimeiro = `¬ß Primeiro ‚Äì O Emitente declara ter ci√™ncia que a presente CCB n√£o est√° submetida ao limite de 12% (doze por cento) ao ano, como j√° decidiu o Supremo Tribunal Federal, sendo leg√≠tima a cobran√ßa de juros e encargos superiores a esse percentual.`;
  doc.text(paragrafoPrimeiro, { align: 'justify' });
  doc.moveDown();
  
  // Cl√°usula Terceira - Encargos Morat√≥rios
  doc.fontSize(11).font('Helvetica-Bold').text('Cl√°usula Terceira ‚Äì Encargos Morat√≥rios');
  doc.fontSize(10).font('Helvetica');
  const clausula3 = `‚Äì O atraso no pagamento de quaisquer import√¢ncias devidas, vencidas e n√£o pagas na √©poca em que forem exig√≠veis por for√ßa do disposto nesta C√©dula, ou nas hip√≥teses de vencimento antecipado da d√≠vida adiante previstas, implicar√° automaticamente na mora, ficando o d√©bito sujeito, do vencimento ao efetivo pagamento a:
‚Ä¢ juros morat√≥rios de 1% a.m. (um por cento ao m√™s) ou fra√ß√£o (pro rata temporis);
‚Ä¢ juros remunerat√≥rios √†s taxas indicadas no Campo III, aplic√°veis sobre o capital devidamente corrigido; e
‚Ä¢ multa de 2% (dois por cento) sobre o total do d√©bito n√£o pago, incluindo encargos morat√≥rios e remunerat√≥rios.`;
  doc.text(clausula3, { align: 'justify' });
  doc.moveDown();
  
  // Cl√°usula Quarta - Vencimento Antecipado
  doc.fontSize(11).font('Helvetica-Bold').text('Cl√°usula Quarta ‚Äì Do Vencimento Antecipado desta C√©dula');
  doc.fontSize(10).font('Helvetica');
  const clausula4 = `‚Äì Observados os prazos de cura aplic√°veis, o presente t√≠tulo vencer√° antecipadamente, permitindo ao Credor exigir de imediato o pagamento do Valor de Principal, conforme indicado no Campo III do pre√¢mbulo, e de todos os encargos contratuais, independentemente de interpela√ß√£o ou notifica√ß√£o judicial ou extrajudicial, nos casos previstos em lei, especialmente nos artigos 333 e 1.425 do C√≥digo Civil, e ainda na ocorr√™ncia de qualquer das seguintes hip√≥teses:
(a) caso seja decretada, contra o Emitente, qualquer decis√£o resultante de a√ß√£o ou execu√ß√£o que afete a capacidade de pagamento do presente t√≠tulo;
(b) caso o Emitente deixe de cumprir quaisquer das obriga√ß√µes de pagamento ou acess√≥rias desta CCB, no tempo e modo convencionados neste t√≠tulo;
(c) caso o Emitente tenha t√≠tulo levado a protesto e/ou nome inserido em qualquer √≥rg√£o de prote√ß√£o ao cr√©dito, sem a devida regulariza√ß√£o no prazo de 25 (vinte e cinco) dias.`;
  doc.text(clausula4, { align: 'justify' });
  doc.moveDown();
  
  // Cl√°usula Quinta - Compensa√ß√£o
  doc.fontSize(11).font('Helvetica-Bold').text('Cl√°usula Quinta ‚Äì Da Compensa√ß√£o');
  doc.fontSize(10).font('Helvetica');
  const clausula5 = `‚Äì O Emitente autoriza, desde j√° e expressamente, em car√°ter irrevog√°vel e irretrat√°vel, o Credor a proceder √† compensa√ß√£o de que trata o artigo 368 do C√≥digo Civil entre o d√©bito decorrente desta C√©dula e qualquer cr√©dito do qual seja titular, existente ou que venha a existir, contra o Credor.`;
  doc.text(clausula5, { align: 'justify' });
  doc.moveDown();
  
  // Cl√°usula Sexta - Declara√ß√µes
  doc.fontSize(11).font('Helvetica-Bold').text('Cl√°usula Sexta ‚Äì Declara√ß√µes e Obriga√ß√µes Adicionais');
  doc.fontSize(10).font('Helvetica');
  const clausula6 = `‚Äì O Emitente declara e garante que:
(a) Possui plena capacidade e legitimidade para emitir a presente CCB;
(b) Est√° apto a cumprir as obriga√ß√µes ora previstas nesta CCB;
(c) N√£o se encontra em estado de necessidade ou sob coa√ß√£o para emitir esta CCB;
(d) N√£o se op√µe aos encargos cobrados nesta CCB;
(e) As informa√ß√µes prestadas ao Credor s√£o verdadeiras;
(f) Leu a presente C√©dula e n√£o tem d√∫vidas sobre qualquer de suas condi√ß√µes.`;
  doc.text(clausula6, { align: 'justify' });
  doc.moveDown();
  
  // Disposi√ß√µes Finais
  doc.fontSize(11).font('Helvetica-Bold').text('Disposi√ß√µes Finais');
  doc.fontSize(10).font('Helvetica');
  const disposicoesFinals = `Esta C√©dula √© t√≠tulo executivo extrajudicial, nos termos da Lei n¬∫ 10.931/2004, e constitui a prova do d√©bito e das condi√ß√µes de pagamento. Todas as despesas oriundas desta CCB, inclusive tributos, contribui√ß√µes e demais despesas, ser√£o suportadas integralmente pelo Emitente.`;
  doc.text(disposicoesFinals, { align: 'justify' });
  doc.moveDown(2);
}

// Fun√ß√£o auxiliar para calcular parcelas (se n√£o estiver calculada)
function calcularParcela(valor: number, prazo: number, taxaJuros: number): number {
  if (taxaJuros === 0) {
    return valor / prazo;
  }
  
  const i = taxaJuros / 100;
  const parcela = valor * (i * Math.pow(1 + i, prazo)) / (Math.pow(1 + i, prazo) - 1);
  return Math.round(parcela * 100) / 100; // Arredondar para 2 casas decimais
}