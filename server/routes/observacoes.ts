import { Router } from 'express';
import { z } from 'zod';
import { db } from '../lib/supabase';
import { historicoObservacoesCobranca } from '@shared/schema';
import { jwtAuthMiddleware } from '../lib/jwt-auth-middleware';
import { randomUUID } from 'crypto';
import { eq, desc } from 'drizzle-orm';

const router = Router();

// Schema para valida√ß√£o do corpo da requisi√ß√£o
const createObservacaoSchema = z.object({
  mensagem: z.string().min(1, "Mensagem √© obrigat√≥ria"),
  tipo_acao: z.enum(['Contato Realizado', 'Negocia√ß√£o em Andamento', 'Acordo Fechado', 'Monitoramento', 'Outros'])
});

// GET /api/propostas/:propostaId/observacoes - Buscar hist√≥rico de observa√ß√µes
router.get('/propostas/:propostaId/observacoes', jwtAuthMiddleware, async (req: any, res) => {
  try {
    const { propostaId } = req.params;
    const { role } = req.user!;

    // Verificar permiss√µes
    if (role !== 'ADMINISTRADOR' && role !== 'COBRANCA') {
      return res.status(403).json({ 
        message: 'Acesso negado. Apenas ADMINISTRADOR e COBRAN√áA podem visualizar observa√ß√µes.' 
      });
    }

    console.log(`üìã [OBSERVA√á√ïES] Buscando hist√≥rico para proposta: ${propostaId}`);

    // Buscar observa√ß√µes da proposta
    const observacoes = await db
      .select()
      .from(historicoObservacoesCobranca)
      .where(eq(historicoObservacoesCobranca.propostaId, propostaId))
      .orderBy(desc(historicoObservacoesCobranca.createdAt));

    console.log(`üìã [OBSERVA√á√ïES] ${observacoes.length} observa√ß√µes encontradas`);

    // Formatar resposta
    const observacoesFormatadas = observacoes.map(obs => ({
      id: obs.id,
      mensagem: obs.mensagem,
      tipo_acao: obs.tipoAcao || 'Outros',
      criado_por: obs.criadoPor,
      created_at: obs.createdAt,
      dados_acao: obs.dadosAcao
    }));

    res.json({
      success: true,
      observacoes: observacoesFormatadas
    });

  } catch (error) {
    console.error('‚ùå [OBSERVA√á√ïES] Erro ao buscar hist√≥rico:', error);
    res.status(500).json({ 
      message: 'Erro ao buscar hist√≥rico de observa√ß√µes',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
});

// POST /api/propostas/:propostaId/observacoes - Criar nova observa√ß√£o
router.post('/propostas/:propostaId/observacoes', jwtAuthMiddleware, async (req: any, res) => {
  try {
    const { propostaId } = req.params;
    const { email, role } = req.user!;

    // Verificar permiss√µes
    if (role !== 'ADMINISTRADOR' && role !== 'COBRANCA') {
      return res.status(403).json({ 
        message: 'Acesso negado. Apenas ADMINISTRADOR e COBRAN√áA podem adicionar observa√ß√µes.' 
      });
    }

    // Validar dados de entrada
    const validatedData = createObservacaoSchema.parse(req.body);

    console.log(`üìù [OBSERVA√á√ïES] Nova observa√ß√£o para proposta ${propostaId}:`, {
      usuario: email,
      tipo: validatedData.tipo_acao,
      mensagem: validatedData.mensagem.substring(0, 50) + '...'
    });

    // Criar nova observa√ß√£o
    const novaObservacao = {
      id: randomUUID(),
      propostaId: propostaId,
      mensagem: validatedData.mensagem,
      tipoAcao: validatedData.tipo_acao,
      criadoPor: email,
      createdAt: new Date(),
      dadosAcao: {
        role: role,
        timestamp: new Date().toISOString()
      }
    };

    // Inserir no banco
    await db.insert(historicoObservacoesCobranca).values(novaObservacao);

    console.log(`‚úÖ [OBSERVA√á√ïES] Observa√ß√£o salva com sucesso: ${novaObservacao.id}`);

    // Registrar auditoria
    console.log(`üîç [AUDIT-OBSERVA√á√ÉO] Nova observa√ß√£o registrada:`, {
      proposta_id: propostaId,
      usuario: email,
      tipo: validatedData.tipo_acao,
      timestamp: new Date().toISOString()
    });

    res.json({
      success: true,
      observacao: {
        id: novaObservacao.id,
        mensagem: novaObservacao.mensagem,
        tipo_acao: novaObservacao.tipoAcao,
        criado_por: novaObservacao.criadoPor,
        created_at: novaObservacao.createdAt
      }
    });

  } catch (error) {
    if (error instanceof z.ZodError) {
      console.error('‚ùå [OBSERVA√á√ïES] Erro de valida√ß√£o:', error.errors);
      return res.status(400).json({ 
        message: 'Dados inv√°lidos',
        errors: error.errors 
      });
    }

    console.error('‚ùå [OBSERVA√á√ïES] Erro ao criar observa√ß√£o:', error);
    res.status(500).json({ 
      message: 'Erro ao salvar observa√ß√£o',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
});

export default router;