/**
 * CONFIGURA√á√ÉO CENTRALIZADA DE SECRETS (Pilar 10)
 * 
 * Sistema de valida√ß√£o de vari√°veis de ambiente obrigat√≥rias
 * para garantir que todas as configura√ß√µes cr√≠ticas estejam presentes
 * antes da inicializa√ß√£o do servidor.
 */

interface RequiredSecrets {
  DATABASE_URL: string;
  SUPABASE_URL: string;
  SUPABASE_ANON_KEY: string;
  NODE_ENV: string;
}

interface OptionalSecrets {
  PORT?: string;
  SUPABASE_SERVICE_ROLE_KEY?: string;
  JWT_SECRET?: string;
  VITE_SUPABASE_URL?: string;
  VITE_SUPABASE_ANON_KEY?: string;
}

type AppConfig = RequiredSecrets & OptionalSecrets;

/**
 * Lista de vari√°veis de ambiente obrigat√≥rias para o funcionamento do sistema
 */
const REQUIRED_ENV_VARS: (keyof RequiredSecrets)[] = [
  'DATABASE_URL',
  'SUPABASE_URL', 
  'SUPABASE_ANON_KEY',
  'NODE_ENV'
];

/**
 * Lista de vari√°veis de ambiente opcionais com valores padr√£o
 */
const OPTIONAL_ENV_VARS: Record<keyof OptionalSecrets, string> = {
  PORT: '5000',
  SUPABASE_SERVICE_ROLE_KEY: '',
  JWT_SECRET: '',
  VITE_SUPABASE_URL: '',
  VITE_SUPABASE_ANON_KEY: ''
};

/**
 * Classe de erro para configura√ß√µes ausentes
 */
export class ConfigurationError extends Error {
  constructor(message: string, public missingVars: string[]) {
    super(message);
    this.name = 'ConfigurationError';
  }
}

/**
 * Valida se todas as vari√°veis de ambiente obrigat√≥rias est√£o presentes
 * @throws {ConfigurationError} Se alguma vari√°vel obrigat√≥ria estiver ausente
 */
export function validateEnvironmentVariables(): AppConfig {
  const missingVars: string[] = [];
  const config: Partial<AppConfig> = {};

  // Verificar vari√°veis obrigat√≥rias
  for (const varName of REQUIRED_ENV_VARS) {
    const value = process.env[varName];
    
    if (!value || value.trim() === '') {
      missingVars.push(varName);
    } else {
      (config as any)[varName] = value.trim();
    }
  }

  // Se houver vari√°veis ausentes, lan√ßar erro
  if (missingVars.length > 0) {
    const errorMessage = `
üö® ERRO DE CONFIGURA√á√ÉO - SECRETS AUSENTES

As seguintes vari√°veis de ambiente obrigat√≥rias est√£o ausentes ou vazias:
${missingVars.map(varName => `  ‚ùå ${varName}`).join('\n')}

Para resolver este problema:

1. Configure as vari√°veis de ambiente ausentes
2. Para desenvolvimento local, crie um arquivo .env na raiz do projeto
3. Para produ√ß√£o, configure as vari√°veis no seu ambiente de deploy

Exemplo de configura√ß√£o (.env):
${missingVars.map(varName => `${varName}=sua_configuracao_aqui`).join('\n')}

‚ö†Ô∏è  O servidor n√£o pode inicializar sem essas configura√ß√µes cr√≠ticas.
`;

    throw new ConfigurationError(errorMessage, missingVars);
  }

  // Adicionar vari√°veis opcionais com valores padr√£o
  for (const [varName, defaultValue] of Object.entries(OPTIONAL_ENV_VARS)) {
    const value = process.env[varName];
    (config as any)[varName] = value && value.trim() !== '' ? value.trim() : defaultValue;
  }

  return config as AppConfig;
}

/**
 * Valida configura√ß√µes espec√≠ficas de banco de dados
 */
export function validateDatabaseConfig(databaseUrl: string): void {
  if (!databaseUrl.startsWith('postgresql://') && !databaseUrl.startsWith('postgres://')) {
    throw new ConfigurationError(
      'DATABASE_URL deve ser uma URL v√°lida do PostgreSQL (postgresql:// ou postgres://)',
      ['DATABASE_URL']
    );
  }
}

/**
 * Valida configura√ß√µes do Supabase
 */
export function validateSupabaseConfig(url: string, anonKey: string): void {
  if (!url.startsWith('https://')) {
    throw new ConfigurationError(
      'SUPABASE_URL deve ser uma URL HTTPS v√°lida',
      ['SUPABASE_URL']
    );
  }

  if (!url.includes('.supabase.co')) {
    throw new ConfigurationError(
      'SUPABASE_URL deve ser um dom√≠nio v√°lido do Supabase (.supabase.co)',
      ['SUPABASE_URL']
    );
  }

  if (anonKey.length < 100) {
    throw new ConfigurationError(
      'SUPABASE_ANON_KEY parece ser inv√°lida (muito curta)',
      ['SUPABASE_ANON_KEY']
    );
  }
}

/**
 * Executa valida√ß√£o completa de todas as configura√ß√µes
 * @returns Configura√ß√£o validada e pronta para uso
 */
export function initializeAndValidateConfig(): AppConfig {
  console.log('üîß Iniciando valida√ß√£o de configura√ß√µes...');

  try {
    // Validar vari√°veis de ambiente
    const config = validateEnvironmentVariables();
    
    // Validar configura√ß√µes espec√≠ficas
    validateDatabaseConfig(config.DATABASE_URL);
    validateSupabaseConfig(config.SUPABASE_URL, config.SUPABASE_ANON_KEY);
    
    console.log('‚úÖ Todas as configura√ß√µes foram validadas com sucesso!');
    console.log(`üìä Ambiente: ${config.NODE_ENV}`);
    console.log(`üîå Porta: ${config.PORT}`);
    console.log(`üóÉÔ∏è  Database: ${config.DATABASE_URL.substring(0, 30)}...`);
    console.log(`üîê Supabase: ${config.SUPABASE_URL}`);
    
    return config;
    
  } catch (error) {
    if (error instanceof ConfigurationError) {
      console.error(error.message);
      process.exit(1);
    }
    
    console.error('üö® Erro inesperado na valida√ß√£o de configura√ß√µes:', error);
    process.exit(1);
  }
}

/**
 * Utilit√°rio para obter configura√ß√£o em runtime (ap√≥s valida√ß√£o)
 */
let _appConfig: AppConfig | null = null;

export function getConfig(): AppConfig {
  if (!_appConfig) {
    throw new Error('Configura√ß√£o n√£o foi inicializada. Chame initializeAndValidateConfig() primeiro.');
  }
  return _appConfig;
}

export function setConfig(config: AppConfig): void {
  _appConfig = config;
}

/**
 * Verifica se estamos em ambiente de desenvolvimento
 */
export function isDevelopment(): boolean {
  return getConfig().NODE_ENV === 'development';
}

/**
 * Verifica se estamos em ambiente de produ√ß√£o
 */
export function isProduction(): boolean {
  return getConfig().NODE_ENV === 'production';
}

/**
 * Obter porta do servidor
 */
export function getPort(): number {
  return parseInt(getConfig().PORT || '5000', 10);
}