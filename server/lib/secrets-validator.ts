/**
 * DEMONSTRA√á√ÉO DE VALIDA√á√ÉO DE SECRETS
 * 
 * Este arquivo demonstra como o sistema reage √† aus√™ncia de secrets cr√≠ticos
 */

import { initializeAndValidateConfig } from './config';

/**
 * Simula a aus√™ncia de uma vari√°vel cr√≠tica para demonstrar a valida√ß√£o
 */
export function simulateMissingSecret() {
  // Backup da vari√°vel original
  const originalDatabaseUrl = process.env.DATABASE_URL;
  
  try {
    // Remover temporariamente a vari√°vel para demonstrar o erro
    delete process.env.DATABASE_URL;
    
    console.log('üß™ Simulando aus√™ncia de DATABASE_URL...');
    
    // Tentar validar - deve falhar
    initializeAndValidateConfig();
    
  } catch (error) {
    console.log('‚úÖ Sistema detectou secret ausente corretamente!');
    console.log('Erro capturado:', error instanceof Error ? error.message : 'Unknown error');
    
  } finally {
    // Restaurar a vari√°vel
    if (originalDatabaseUrl) {
      process.env.DATABASE_URL = originalDatabaseUrl;
    }
  }
}

/**
 * Testa a valida√ß√£o completa do sistema
 */
export function testSecretsValidation(): boolean {
  try {
    console.log('üîç Testando valida√ß√£o de secrets...');
    
    const config = initializeAndValidateConfig();
    
    const requiredSecrets = [
      'DATABASE_URL',
      'SUPABASE_URL', 
      'SUPABASE_ANON_KEY',
      'NODE_ENV'
    ];
    
    let allPresent = true;
    
    for (const secret of requiredSecrets) {
      if (!config[secret as keyof typeof config]) {
        console.log(`‚ùå ${secret} est√° ausente`);
        allPresent = false;
      } else {
        console.log(`‚úÖ ${secret} est√° presente`);
      }
    }
    
    if (allPresent) {
      console.log('üéâ Todos os secrets obrigat√≥rios est√£o configurados!');
    }
    
    return allPresent;
    
  } catch (error) {
    console.error('üö® Erro na valida√ß√£o de secrets:', error);
    return false;
  }
}