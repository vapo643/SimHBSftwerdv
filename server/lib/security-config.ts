/**
 * CONFIGURA√á√ïES DE SEGURAN√áA DA API
 *
 * Este arquivo centraliza todas as configura√ß√µes de seguran√ßa
 * para facilitar manuten√ß√£o e auditoria das pol√≠ticas de seguran√ßa.
 */

import rateLimit from 'express-rate-limit';
import { log } from '../vite';

// ========================
// CONFIGURA√á√ïES DO HELMET
// ========================
export const _helmetConfig = {
  // Content Security Policy - Previne XSS e injection attacks
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", 'https:'],
      scriptSrc: ["'self'", "'unsafe-eval'", 'https://replit.com'], // unsafe-eval necess√°rio para Vite, replit.com para banner de desenvolvimento
      imgSrc: ["'self'", 'data:', 'https:'],
      connectSrc: ["'self'", 'ws:', 'wss:'], // WebSocket para Vite HMR
      fontSrc: ["'self'", 'https:', 'data:'], // data: necess√°rio para fontes embutidas do ambiente Replit
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
  // Cross-Origin-Resource-Policy
  crossOriginResourcePolicy: { policy: 'cross-origin' },
  // X-Frame-Options - Previne clickjacking
  frameguard: { action: 'deny' },
  // X-Content-Type-Options - Previne MIME sniffing
  noSniff: true,
  // Referrer-Policy - Controla informa√ß√µes de refer√™ncia
  referrerPolicy: { policy: 'same-origin' },
  // X-XSS-Protection - Ativa prote√ß√£o XSS do navegador
  xssFilter: true,
} as const;

// ========================
// RATE LIMITING CONFIGURATIONS
// ========================

// Rate Limit Geral para toda a API: 100 requisi√ß√µes por 15 minutos
export const _generalApiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 100, // M√°ximo 100 requisi√ß√µes por janela de tempo
  message: {
    error: 'Muitas requisi√ß√µes da API. Tente novamente em 15 minutos.',
    retryAfter: '15 minutos',
  },
  standardHeaders: true, // Retorna rate limit info nos headers `RateLimit-*`
  legacyHeaders: false, // Desabilita headers `X-RateLimit-*`
  // Identifica usu√°rio por IP
  keyGenerator: (req) => {
    return req.ip || req.connection.remoteAddress || 'anonymous';
  },
  // Handler customizado para quando o limite √© excedido
  handler: (req, res) => {
    log(`‚ö†Ô∏è Rate limit exceeded for IP: ${req.ip} on ${req.path}`);
    res.status(429).json({
      error: 'Muitas requisi√ß√µes da API. Tente novamente em 15 minutos.',
      retryAfter: '15 minutos',
    });
  },
});

// Rate Limit Restritivo para Rotas de Autentica√ß√£o: 5 requisi√ß√µes por 15 minutos
export const _authApiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 5, // M√°ximo 5 tentativas de login por janela de tempo
  message: {
    error: 'Muitas tentativas de login. Tente novamente em 15 minutos.',
    retryAfter: '15 minutos',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: (req) => {
    // Para rotas de auth, considere tanto IP quanto email (se dispon√≠vel)
    const _email = req.body?.email;
    const _ip = req.ip || req.connection.remoteAddress || 'anonymous';
    return email ? `${ip}-${email}` : ip;
  },
  handler: (req, res) => {
    const _email = req.body?.email;
    log(`üö® Auth rate limit exceeded for IP: ${req.ip}${email ? `, email: ${email}` : ''}`);
    res.status(429).json({
      error: 'Muitas tentativas de login. Tente novamente em 15 minutos.',
      retryAfter: '15 minutos',
    });
  },
  // Skip para rotas que n√£o s√£o de autentica√ß√£o cr√≠tica
  skip: (req) => {
    const _path = req.path;
    return !(
      path.includes('/login') ||
      path.includes('/register') ||
      path.includes('/reset-password')
    );
  },
});

// Rate Limit Extra-Restritivo para APIs cr√≠ticas (opcional)
export const _criticalApiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 10, // M√°ximo 10 requisi√ß√µes por janela de tempo
  message: {
    error: 'Muitas requisi√ß√µes para opera√ß√£o cr√≠tica. Tente novamente em 15 minutos.',
    retryAfter: '15 minutos',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: (req) => {
    return req.ip || req.connection.remoteAddress || 'anonymous';
  },
  handler: (req, res) => {
    log(`üö® Critical API rate limit exceeded for IP: ${req.ip} on ${req.path}`);
    res.status(429).json({
      error: 'Muitas requisi√ß√µes para opera√ß√£o cr√≠tica. Tente novamente em 15 minutos.',
      retryAfter: '15 minutos',
    });
  },
});

// ========================
// CONFIGURA√á√ïES DE PAYLOAD
// ========================
export const _payloadLimits = {
  json: '10mb', // Limite para JSON payload
  urlencoded: '10mb', // Limite para URL encoded payload
} as const;

// ========================
// LOGS DE SEGURAN√áA
// ========================
export function logSecurityEvent(event: string, details) {
  const _timestamp = new Date().toISOString();
  const _logMessage = `üõ°Ô∏è [SECURITY] ${timestamp} - ${event}: ${JSON.stringify(details)}`;
  log(logMessage);

  // Em produ√ß√£o, voc√™ pode enviar estes logs para um servi√ßo de monitoramento
  // como DataDog, New Relic, ou Sentry
}
