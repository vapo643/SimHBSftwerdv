### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Criar uma suíte de testes de integração para o fluxo de criação de propostas, validando de ponta a ponta a nova lógica de cálculo e isenção de TAC.
* **Intenção Estratégica (O Porquê):** Verificar se todos os componentes individuais que modificamos (API, `TacCalculationService`, Schema) se integram e funcionam corretamente em conjunto para executar a regra de negócio. Enquanto os testes unitários validaram o "cérebro" em isolamento, os testes de integração validarão o "corpo" inteiro em operação.
* **Histórico Relevante (Consulta Obrigatória):** A FASE 1 implementou a lógica no `TacCalculationService` e integrou-a na API de propostas. A infraestrutura de testes de integração (`db-helper.ts`, `supertest`) está funcional e pronta para ser usada.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de Quality Assurance focada em testes de "caixa-preta". O Agente irá simular um cliente de API (`supertest`), enviar requisições para o endpoint `POST /api/propostas` e depois inspecionar o estado do banco de dados para validar o resultado.

---

**IMPLEMENTAR:**
Suíte de Testes de Integração para o Fluxo de TAC

**CURRENT STATE:**
A lógica de negócio de TAC está implementada e testada unitariamente, mas não há um teste automatizado que valide o fluxo completo através da API.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo de teste, `tests/integration/propostas-tac.test.ts`, é criado.
2.  A suíte de testes utiliza `vitest` e `supertest`.
3.  O hook `beforeEach` utiliza os helpers `cleanTestDatabase` e `setupTestEnvironment` para criar um ambiente limpo.
4.  São criados testes para cobrir, no mínimo, os seguintes 2 cenários críticos:
    * **Cenário 1 (Cliente Novo Paga TAC):** Um teste que cria uma proposta para um **novo cliente** associada a um produto com uma TAC configurada (ex: R$ 150,00 fixo). A asserção (`expect`) deve consultar o banco de dados e verificar se o `valor_tac` da proposta criada é `150.00`.
    * **Cenário 2 (Cliente Cadastrado Isento de TAC):** Um teste que primeiro cria uma proposta antiga para um cliente com o status `"QUITADO"`. Em seguida, cria uma **nova proposta** para o **mesmo cliente**. A asserção deve consultar o banco e verificar se o `valor_tac` da *nova* proposta é `0`.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Reutilize a Infraestrutura de Teste:** O teste DEVE usar os helpers `cleanTestDatabase` e `setupTestEnvironment` de `tests/lib/db-helper.ts`.
2.  **Cenário de Isenção:** Para o Cenário 2, é crucial que você primeiro crie um registro de "proposta antiga paga" para o cliente no `setup` do teste, a fim de simular um "cliente cadastrado" para a lógica do `isClienteCadastrado`.
3.  **Validação no Banco de Dados:** As asserções finais DEVEM fazer uma consulta direta ao banco de dados de teste (usando Drizzle) para buscar a proposta recém-criada e verificar o valor do seu campo `valor_tac`. Não confie apenas na resposta da API.
4.  **Validação Final Mandatória:** A prova de sucesso é a execução bem-sucedida da nova suíte de testes (`npx vitest run tests/integration/propostas-tac.test.ts`).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o `setupTestEnvironment` cria todos os dados de pré-requisito (produto, parceiro, etc.) necessários para criar uma proposta via API."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela passagem de 100% dos novos testes de integração.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (criação do novo arquivo de teste).
2.  Garantir que os cenários de teste estão corretamente implementados, especialmente o setup do "cliente cadastrado".
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a nova suíte de testes e garantir que todos passem).
7.  **Documentar Decisões Técnicas**.