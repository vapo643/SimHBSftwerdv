### **Pacote de Ativa√ß√£o de Miss√£o (PAM) V1.8 - REM-FCF-01.1 (Remedia√ß√£o)**

**[DIRETRIZ MESTRA DE DIVULGA√á√ÉO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade t√©cnica sem omiss√µes. A transpar√™ncia radical √© mandat√≥ria.*

* **Sum√°rio da Miss√£o (O Qu√™):** Realizar uma auditoria de c√≥digo forense nos arquivos `client/src/contexts/ProposalContext.tsx` e `client/src/hooks/useProposalEffects.ts` para identificar a causa exata do loop de renderiza√ß√£o infinito ("Maximum update depth exceeded").
* **Inten√ß√£o Estrat√©gica (O Porqu√™):** Antes de corrigir o problema, precisamos entender precisamente onde ele ocorre. Esta an√°lise nos permitir√° aplicar uma corre√ß√£o cir√∫rgica sem introduzir novos efeitos colaterais. O objetivo √© dissecar a l√≥gica de estado e efeitos para encontrar a chamada `setState` (ou `dispatch`) que est√° sendo acionada repetidamente.
* **Hist√≥rico Relevante (Consulta Obrigat√≥ria):** O log de erro do navegador aponta diretamente para estes dois arquivos como o epicentro da falha. A sua an√°lise deve focar nos hooks `useEffect` e nas suas intera√ß√µes com o estado do contexto.
* **Modelo Mental (Como se Encaixa):** Voc√™ √© um depurador de frontend s√™nior. Sua tarefa √© ler o c√≥digo, seguir o fluxo de dados e identificar o padr√£o de anti-design do React que est√° causando o loop. Voc√™ n√£o est√° corrigindo o c√≥digo ainda, est√° apenas diagnosticando com precis√£o absoluta.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **M√âDIO** - A l√≥gica pode ser complexa, envolvendo m√∫ltiplas depend√™ncias de `useEffect`. Uma an√°lise superficial pode identificar o `useEffect` errado.
    * **Contramedida:** A sua resposta deve incluir n√£o apenas o trecho de c√≥digo problem√°tico, mas uma explica√ß√£o passo a passo de *por que* ele causa um loop (ex: "O estado X √© atualizado, o que muda a depend√™ncia Y, o que aciona o efeito novamente").

---

**IMPLEMENTAR:**
User Story REM-FCF-01.1: An√°lise Forense do Loop de Renderiza√ß√£o no Frontend

**CONTEXT:**
O frontend da aplica√ß√£o est√° inutiliz√°vel devido a um erro de "Maximum update depth exceeded" que se origina no `ProposalContext`. Suspeitamos que uma chamada de API falhando (resultando em 403) est√° acionando um `useEffect` que tenta repetidamente refazer a chamada, criando um loop infinito.

**CURRENT STATE:**
A aplica√ß√£o est√° quebrada. O log de erro do navegador nos deu dois pontos de partida claros: `client/src/contexts/ProposalContext.tsx` (linha 445) e `client/src/hooks/useProposalEffects.ts` (linha 28).

**EXPECTED (Estado Final de Sucesso):**
Voc√™ deve produzir um **Relat√≥rio de Diagn√≥stico** contendo:
1.  **Identifica√ß√£o do C√≥digo-Fonte:** O(s) trecho(s) de c√≥digo exato(s) do(s) arquivo(s) `ProposalContext.tsx` e/ou `useProposalEffects.ts` que cont√™m o `useEffect` e a chamada de `setState` (ou `dispatch`) respons√°veis pelo loop.
2.  **An√°lise da Causa Raiz:** Uma explica√ß√£o clara e detalhada, passo a passo, de como o ciclo vicioso ocorre. (Ex: "1. O componente monta e o `useEffect` √© acionado. 2. A fun√ß√£o `fetchData` √© chamada. 3. `fetchData` falha e o estado `error` √© atualizado. 4. A atualiza√ß√£o do estado `error` causa uma nova renderiza√ß√£o. 5. Como `error` est√° no array de depend√™ncias do `useEffect`, o efeito √© acionado novamente, voltando ao passo 2.").
3.  **Plano de Corre√ß√£o Sugerido:** Com base na sua an√°lise, sugira uma ou mais estrat√©gias para quebrar o loop (ex: "Remover a depend√™ncia do estado de erro", "Adicionar uma condi√ß√£o para s√≥ buscar dados se eles ainda n√£o foram carregados", etc.).

---
---
[PGI ATIVO | LEMBRETE DE ESTADO DO ROADMAP]
- **Roadmap em Standby:** "üöÄ ROADMAP MESTRE DE IMPLEMENTA√á√ÉO_ OPERA√á√ÉO A√áO L√çQUIDO.md"
- **Pr√≥ximo Passo a ser Retomado:** Milestone M3: Core Business Logic
- **Miss√£o de Emerg√™ncia Atual:** "Roadmap de Remedia√ß√£o de Falha Cr√≠tica de Frontend (REM-FCF-01)"
---