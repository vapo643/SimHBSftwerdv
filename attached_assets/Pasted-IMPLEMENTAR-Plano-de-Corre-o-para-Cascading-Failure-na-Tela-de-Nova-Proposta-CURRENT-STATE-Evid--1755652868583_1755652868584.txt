IMPLEMENTAR:
Plano de Correção para Cascading Failure na Tela de Nova Proposta

CURRENT STATE (Evidência Bruta):
A tela de "Nova Proposta" está quebrada. O console do navegador exibe uma cascata de erros, incluindo:

Erros de Permissão: Múltiplas requisições de API (ex: /api/debug/me, /api/propostas) falham com status 403 (Forbidden). O log principal aponta: Error fetching profile data: ApiError: Acesso negado. Perfil de usuário não encontrado.

Erro Crítico de Frontend: Um erro Warning: Maximum update depth exceeded ocorre no componente ProposalForm, causando um loop de renderização infinito que trava a página.

Erros Secundários: Múltiplos erros 404 (Not Found) para o endpoint /api/alertas/notificacoes.

(Os logs completos serão anexados a este prompt.)

EXPECTED (Estado Final de Sucesso):

Causa-Raiz Resolvida: Um usuário devidamente autenticado e com as permissões corretas consegue carregar a tela de "Nova Proposta" sem nenhum erro 403. O fetchUserProfile deve funcionar corretamente.

Loop de Renderização Eliminado: O erro Maximum update depth exceeded é completamente eliminado. A tela carrega de forma estável.

Funcionalidade Restaurada: A página de "Nova Proposta" é renderizada corretamente, estável e pronta para receber dados do usuário.

O Agente deve incluir em seu relatório final uma Análise de Causa Raiz (RCA), explicando o que causou a falha em cascata.

CONSTRAINTS (Roadmap de Implementação):
Siga este plano de diagnóstico e execução em duas fases, na ordem exata:

FASE 1: AUDITORIA E DIAGNÓSTICO (NÃO MODIFICAR CÓDIGO)

Análise da Causa-Raiz (Backend):

Inspecione o endpoint /api/debug/me e seu middleware de proteção (requireRole ou similar).

Investigue a função fetchUserProfile no AuthContext.tsx.

Responda: Por que um usuário recém-autenticado está a receber um erro de "Perfil de usuário não encontrado"? Existe uma etapa em falta no processo de registro que deveria criar um registro na tabela profiles do banco de dados quando um novo usuário é criado no Supabase Auth?

Análise da Causa-Raiz (Frontend):

Inspecione o componente ProposalForm em src/pages/propostas/nova.tsx.

Responda: Qual useEffect ou setState está a causar o loop de renderização? Como ele depende dos dados do AuthContext que estão a falhar no carregamento?

FASE 2: PLANEJAMENTO E EXECUÇÃO DA CORREÇÃO
3.  Plano de Ação: Com base na sua análise, apresente um breve plano de como você irá corrigir os problemas no backend e no frontend.
4.  Implementação da Correção:
* Backend: Implemente a correção para o problema de perfil de usuário. Se um perfil não é criado no registro, adicione essa lógica.
* Frontend: Refatore o componente ProposalForm para ser mais resiliente. Garanta que ele lide corretamente com o estado de carregamento do perfil do usuário e que os useEffects tenham arrays de dependência corretos para evitar loops.
5.  Limpeza (Opcional): Investigue e corrija o erro 404 para /api/alertas/notificacoes.

DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):

CONFIANÇA NA IMPLEMENTAÇÃO: [Preencher com a porcentagem de 0 a 100%]

RISCOS IDENTIFICADOS: [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]

DECISÕES TÉCNICAS ASSUMIDAS: [Ex: "Assumi que a falha de perfil é a causa-raiz principal de todos os outros erros."]

VALIDAÇÃO PENDENTE: [A correção deve ser validada funcionalmente, garantindo que a página carrega e que as propostas podem ser criadas.]

PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:

Mapear ficheiros e funções exatas a serem afetadas pela correção.

Garantir importações e tipos corretos.

Executar get_latest_lsp_diagnostics para garantir 0 erros novos.

Declarar Nível de Confiança (0 a 100%).

Categorizar Riscos Descobertos.

Realizar teste funcional completo (verificar se a página de "Nova Proposta" carrega sem erros no console).

Documentar Decisões Técnicas e a Análise de Causa Raiz.