### Pacote de Ativação de Missão (PAM) V1.0 (Refatoração Sistemática dos Controllers)

* **Sumário da Missão (O Quê):** Iniciar a refatoração sistemática dos `controllers` (handlers de rota) para eliminar o acesso direto ao banco de dados, aplicando o padrão `Service/Repository` que foi estabelecido na missão anterior.
* **Intenção Estratégica (O Porquê):** Erradicar as 121 violações de acoplamento que impedem a nossa arquitetura de ser verdadeiramente modular. Esta refatoração irá impor o Princípio da Responsabilidade Única, garantindo que os nossos `controllers` lidem apenas com a lógica de HTTP, a nossa camada de `Service` lide com a lógica de negócio e a nossa camada de `Repository` lide com o acesso a dados.
* **Histórico Relevante (Consulta Obrigatória):** A sua auditoria anterior identificou 122 violações onde os `controllers` importam e usam o `supabase` diretamente. A sua missão anterior estabeleceu com sucesso um `BaseRepository` e um exemplo de `ObservacoesService` como o nosso padrão de refatoração.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Refatoração. A sua tarefa é aplicar um padrão de design conhecido de forma repetida e segura em toda a base de código, começando pelos alvos de maior impacto.

---

**IMPLEMENTAR:**
Relatório de Progresso da Refatoração da Camada de Serviço

**CURRENT STATE:**
121 `controllers` na nossa base de código estão fortemente acoplados à camada de dados, importando o cliente do banco de dados diretamente e misturando lógica de negócio com a lógica de apresentação.

**EXPECTED (Estado Final de Sucesso):**
Esta é a primeira missão de uma campanha. O objetivo é refatorar um primeiro lote de `controllers` para validar o nosso processo.

1.  **Criação da Camada de Serviço:** Um novo diretório `server/services` é criado, se ainda não existir.
2.  **Refatoração do Primeiro Alvo:** Pelo menos um `controller` completo (ex: o de `admin/users.ts` ou outro de sua escolha) é totalmente refatorado.
3.  **Implementação do Padrão:**
    * Um novo `UserRepository` (que estende o `BaseRepository`) e um `UserService` são criados.
    * Toda a lógica de acesso ao banco de dados que estava no `controller` de usuários é movida para o `UserRepository`.
    * A lógica de negócio é encapsulada no `UserService`.
    * O `controller` de usuários é simplificado para apenas receber a requisição, chamar o `UserService` e retornar a resposta.
4.  **Validação:** A execução do `node validate-architecture.js` mostra uma redução no número de violações de "acesso direto ao DB".

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Siga o Padrão:** Utilize o `BaseRepository` e o exemplo do `ObservacoesService` como o seu *blueprint*. A sua implementação para os novos serviços (ex: `UserService`) deve seguir exatamente a mesma arquitetura.
2.  **Comece Pequeno, Valide Rápido:** Foque em refatorar completamente um ou dois `controllers` nesta primeira missão para provar que o padrão é robusto.
3.  **Validação Contínua:** Após cada refatoração, execute o script `node validate-architecture.js` para medir o seu progresso e garantir que não introduziu novas violações.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a refatoração dos `controllers` de usuários é um bom ponto de partida devido à sua criticidade para o sistema."]
* **VALIDAÇÃO PENDENTE:** [O sucesso desta missão de refatoração inicial irá desbloquear a campanha para os 121 `controllers` restantes.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os ficheiros a serem criados/modificados.
2.  Garantir que a nova estrutura (`Controller` -> `Service` -> `Repository`) é seguida à risca.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a validação de arquitetura e reportar a redução no número de violações).
7.  **Documentar Decisões Técnicas**.