### Pacote de Ativação de Missão (PAM) V1.8 (Formalização da Estratégia de Infrastructure as Code)

* **Sumário da Missão (O Quê):** Gerar o documento `infrastructure-as-code-strategy.md`, detalhando a nossa doutrina para provisionamento de infraestrutura, com base nos "Subtópicos Obrigatórios" do Ponto 69 da nossa Doutrina Arquitetural.
* **Intenção Estratégica (O Porquê):** Garantir que 100% da nossa infraestrutura na Azure seja definida como código, eliminando a configuração manual ("click-ops"), garantindo a reprodutibilidade dos ambientes e permitindo a aplicação de práticas de DevOps como GitOps e testes de infraestrutura.
* **Histórico Relevante (Consulta Obrigatória):** A nossa análise de competências (Skills Gap) já identificou o Terraform como a nossa ferramenta de IaC de eleição e uma área para capacitação urgente. Esta missão irá formalizar como iremos usá-lo.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de DevOps/Plataforma. A sua tarefa é definir o "manual de estilo" e os processos para a construção e gestão da nossa infraestrutura na nuvem.

---

**IMPLEMENTAR:**
Documento de Estratégia de Infrastructure as Code (IaC)

**CURRENT STATE:**
A nossa infraestrutura atual é gerida manualmente pela plataforma Replit. Não temos uma estratégia de IaC, o que impede a automação, a repetibilidade e a governança da nossa infraestrutura.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/03-infrastructure/infrastructure-as-code-strategy.md`, é criado. O arquivo deve conter as seguintes seções, conforme o Ponto 69:

1.  **Seleção da Ferramenta de IaC e Estrutura de Repositórios:** Confirmar a decisão pelo **Terraform** e definir como os nossos repositórios de infraestrutura serão estruturados.
2.  **Adoção de Práticas de GitOps:** Descrever a nossa estratégia para usar o Git como a única fonte da verdade para a nossa infraestrutura, utilizando uma ferramenta como o **ArgoCD** ou o **Flux** integrada ao nosso pipeline do GitHub Actions.
3.  **Estratégia de Testes de Infraestrutura (IaC Testing):** Definir a nossa abordagem para testar o código Terraform (ex: usando `terraform validate`, `tflint`, e ferramentas de teste de contrato como o `Terratest`).
4.  **Estratégia de Detecção de Drift:** Descrever como iremos detetar e remediar desvios ("drift") entre o estado definido no nosso código e o estado real na Azure.
5.  **Implementação de Policy as Code (PoC):** Definir a nossa estratégia para usar uma ferramenta como o **Open Policy Agent (OPA)** para aplicar políticas de governança (ex: "não permitir a criação de buckets de armazenamento públicos") de forma automatizada.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a abordagem GitOps com Flux é a mais adequada para a nossa stack de Azure Container Apps e GitHub Actions."]
* **VALIDAÇÃO PENDENTE:** [O documento gerado deve ser revisado e ratificado pelo Arquiteto Chefe e pela equipa de operações.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que todas as 5 seções obrigatórias estão completas.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.