### Pacote de Ativação de Missão (PAM) V1.0 (Criação de Ambiente de Teste Isolado)

* **Sumário da Missão (O Quê):** Criar um novo arquivo de configuração de ambiente (`.env.test`) e definir nele uma nova variável de ambiente, `TEST_DATABASE_URL`, que aponte para um banco de dados Supabase separado, dedicado exclusivamente aos testes automatizados.
* **Intenção Estratégica (O Porquê):** Implementar a solução estrutural e definitiva para o isolamento de ambientes. Ao separar fisicamente o banco de dados de teste do de desenvolvimento/produção, eliminamos completamente a possibilidade de contaminação cruzada e de execução de operações destrutivas no ambiente errado.
* **Histórico Relevante (Consulta Obrigatória):** A FASE 1 implementou guardas de segurança de software. Esta fase implementa o isolamento de infraestrutura, que é uma solução superior e mais robusta.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de configuração de infraestrutura como código. O Agente irá criar um novo arquivo de ambiente e definir uma nova variável de conexão, estabelecendo a fundação para um ambiente de teste verdadeiramente isolado.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A string de conexão para o novo banco de dados de teste pode ser inválida.
    * **Contramedida:** A missão é apenas criar o arquivo e a variável. A validação da conexão ocorrerá no Passo 2.2, quando configurarmos o `vitest` para utilizá-la.

---

**IMPLEMENTAR:**
Criação do Arquivo de Ambiente para o Banco de Dados de Teste

**CURRENT STATE:**
O projeto não possui um arquivo de ambiente dedicado para testes. Todas as execuções (desenvolvimento, teste, etc.) utilizam a mesma variável `DATABASE_URL` definida no ambiente principal.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo, `.env.test`, é criado na raiz do projeto.
2.  Dentro deste arquivo, uma única variável de ambiente é definida: `TEST_DATABASE_URL`.
3.  O valor desta variável deve ser a string de conexão para um **novo e separado** banco de dados Supabase dedicado para testes. **Se você não tiver acesso a uma segunda string de conexão, use um placeholder seguro e claramente identificado.** Exemplo:
    `TEST_DATABASE_URL="postgresql://user:password@host:port/simpix_test_db"`

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Arquivo:** Crie o novo arquivo `.env.test` na raiz do projeto.
2.  **Defina a Variável:** Adicione a variável `TEST_DATABASE_URL` ao arquivo.
3.  **Use um Placeholder Seguro (se necessário):** Se uma string de conexão de teste real não estiver disponível, use um placeholder formatado corretamente, deixando claro que ele precisa ser substituído por credenciais reais.
4.  **Ação Restrita:** A missão é focada **exclusivamente** na criação do arquivo `.env.test`. **NÃO** modifique ainda o `vitest.config.ts` ou qualquer outro arquivo.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a convenção de nome `.env.test` é o padrão para ferramentas como `vitest` carregarem automaticamente as variáveis de ambiente de teste."]
* **VALIDAÇÃO PENDENTE:** [A validação final desta configuração ocorrerá no Passo 2.2, quando o `vitest` for configurado para usar esta nova variável.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que o nome da variável e o formato da string de conexão (ou placeholder) estão corretos.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do novo arquivo `.env.test`).
7.  **Documentar Decisões Técnicas**.