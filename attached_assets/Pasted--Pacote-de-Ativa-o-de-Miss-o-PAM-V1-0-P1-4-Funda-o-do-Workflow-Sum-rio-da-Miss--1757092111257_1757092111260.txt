### **Pacote de Ativação de Missão (PAM) V1.0 - P1.4: Fundação do Workflow**

* **Sumário da Missão (O Quê):** Implementar o `SubmitForAnalysisUseCase` que foi identificado como ausente nas auditorias. Este `Use Case` é a peça central que orquestra a transição de estado de uma proposta de `RASCUNHO` para o estado de análise, corrigindo a quebra fundamental no workflow de negócio.
* **Intenção Estratégica (O Porquê):** Esta é a Ação P1.4 da "Operação Aço Líquido". Sem este `Use Case`, não existe um mecanismo controlado e validado para que as propostas entrem na fila de análise. A sua implementação restaura a capacidade do sistema de mover propostas através do seu ciclo de vida, um passo indispensável antes de avançarmos para a reengenharia completa na Fase P2.
* **Histórico Relevante (Consulta Obrigatória):** As Ações P1.1, P1.2 e P1.3 consolidaram o `Proposal` (agregado), o `IProposalRepository` (interface) e o `dependencies.ts` (IoC). Este `Use Case` deve utilizar **exclusivamente** estas novas estruturas canónicas. O `DIAGNOSTICO_SISTEMICO_FINAL.md` identificou a ausência deste `Use Case` como uma causa principal do "Workflow Quebrado".
* **Modelo Mental (Como se Encaixa):** Este `Use Case` é o "maquinista" da nossa ferrovia de dados. Um `Controller` irá receber o "sinal" da UI (um pedido para submeter uma proposta). O `Controller` então passará este sinal para o maquinista (`SubmitForAnalysisUseCase`). O maquinista irá buscar o "comboio" (o agregado `Proposal` através do `IProposalRepository`), comandar a sua mudança de estado (chamar o método `.submitForAnalysis()` no agregado), e garantir que o comboio alterado seja guardado de volta nos trilhos (chamar `.save()` no repositório).
* **Riscos Antecipados e Contramedidas:**
    * **Risco (MÉDIO):** O método `.submitForAnalysis()` no agregado `Proposal` pode não existir ou pode ter uma lógica incorreta.
    * **Contramedida:** A primeira fase da implementação é uma auditoria do agregado canónico `Proposal.ts` para confirmar a existência e a lógica do método de transição de estado. Se não existir, o PAM instrui a sua criação, garantindo que a regra de negócio resida no domínio.

---

**IMPLEMENTAR:** Criação do `SubmitForAnalysisUseCase`

**CONTEXT:** O sistema não possui uma camada de aplicação dedicada para gerir a submissão de uma proposta para análise. Esta lógica crucial está ausente, quebrando o fluxo principal do negócio.

**CURRENT STATE:** Não existe um arquivo `server/modules/proposal/application/SubmitForAnalysisUseCase.ts`. Os `Controllers` não têm um `Use Case` para invocar para esta operação.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo `Use Case` será criado em `server/modules/proposal/application/SubmitForAnalysisUseCase.ts`.
2.  Este `Use Case` irá depender da abstração `IProposalRepository` injetada no seu construtor.
3.  O seu método `execute` irá carregar o agregado `Proposal`, invocar o método de domínio para a transição de estado, e salvá-lo.
4.  A instância deste novo `Use Case` será criada e exportada do nosso Factory `dependencies.ts`.
5.  O sistema compilará sem erros.

**CONSTRAINTS (Roadmap de Implementação):**

1.  **Fase 1: Auditoria e Preparação do Domínio**
    * Abra o agregado canónico `server/modules/proposal/domain/Proposal.ts`.
    * Verifique se existe um método como `submitForAnalysis()`. Se não existir, crie-o. Este método deve conter a lógica da FSM para validar a transição de `RASCUNHO` para `EM_ANALISE` e alterar o `_status` interno.

2.  **Fase 2: Criação do Use Case**
    * Crie o novo arquivo `server/modules/proposal/application/SubmitForAnalysisUseCase.ts`.
    * Implemente a classe `SubmitForAnalysisUseCase` com a seguinte estrutura:

        ```typescript
        // server/modules/proposal/application/SubmitForAnalysisUseCase.ts
        import { IProposalRepository } from '../domain/IProposalRepository';
        import { Proposal } from '../domain/Proposal'; // Importe o agregado canónico

        interface ISubmitForAnalysisRequest {
          proposalId: string;
          // Adicione outros parâmetros se necessário, ex: userId
        }

        export class SubmitForAnalysisUseCase {
          private proposalRepository: IProposalRepository;

          constructor(proposalRepository: IProposalRepository) {
            this.proposalRepository = proposalRepository;
          }

          async execute({ proposalId }: ISubmitForAnalysisRequest): Promise<void> {
            // 1. Carregar o agregado
            const proposal = await this.proposalRepository.findById(proposalId);

            if (!proposal) {
              throw new Error('Proposta não encontrada.'); // Lançar exceção de domínio mais específica no futuro
            }

            // 2. Executar a regra de negócio no domínio
            proposal.submitForAnalysis(); // Ou o nome do método que você validou/criou na Fase 1

            // 3. Persistir as alterações
            await this.proposalRepository.save(proposal);
            
            // 4. (Opcional, mas recomendado) Despachar eventos de domínio aqui no futuro
          }
        }
        ```

3.  **Fase 3: Injeção de Dependência**
    * Abra o nosso Factory `server/modules/dependencies.ts`.
    * Importe a nova classe `SubmitForAnalysisUseCase`.
    * Crie e exporte a sua instância, injetando o `proposalRepository` já existente:
        ```typescript
        // server/modules/dependencies.ts
        // ... outras importações
        import { SubmitForAnalysisUseCase } from './proposal/application/SubmitForAnalysisUseCase';

        // ... outras instâncias
        export const submitForAnalysisUseCase = new SubmitForAnalysisUseCase(proposalRepository);
        ```

4.  **Validação:**
    * Execute `get_latest_lsp_diagnostics`. O comando deve retornar **ZERO erros**, confirmando que o novo `Use Case` está corretamente integrado e que o sistema está arquitetonicamente são.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** \[Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** \[Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** \[Ex: "Assumi que o método de transição no agregado se chamará `submitForAnalysis` e não requer parâmetros adicionais."]
* **VALIDAÇÃO PENDENTE:** \[Ex: "Um `Controller` e uma rota precisarão ser criados ou refatorados para efetivamente usar este novo `Use Case`, o que será uma missão subsequente."]