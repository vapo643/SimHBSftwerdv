Diagnóstico Profundo: Erro Persistente OAuth2 - Banco Inter API v3
Com base na pesquisa extensiva realizada, identifiquei as causas raiz mais prováveis para o erro 400 persistente que você está enfrentando com a API do Banco Inter, bem como soluções específicas para o ambiente Replit.

Causa Raiz Principal: Incompatibilidade do Undici Agent com Node.js Fetch
O problema central está relacionado ao uso do Node.js fetch nativo no Replit com certificados mTLS. A documentação oficial do Inter confirma que o erro 400 sem mensagem é especificamente causado pela falta ou configuração incorreta do certificado nas requisições OAuth.

Problema Técnico Identificado
O Node.js 18+ usa o undici como implementação subjacente do fetch nativo, mas o dispatcher não está sendo configurado corretamente para mTLS no seu código atual. O https.Agent padrão não funciona com o fetch nativo do Node.js.

Solução Imediata para Replit
1. Configuração Correta do Undici Agent
Substitua sua implementação atual por esta:

typescript
import { Agent } from 'undici';

private async getAccessToken(): Promise<void> {
  const tokenUrl = `https://${this.baseUrl}/oauth/v2/token`;
  
  const params = new URLSearchParams({
    client_id: this.clientId,
    client_secret: this.clientSecret,
    grant_type: 'client_credentials',
    scope: 'boleto-cobranca.read boleto-cobranca.write webhook.read webhook.write'
  });

  // Configuração correta do certificado para undici
  const agent = new Agent({
    connect: {
      cert: formattedCert,
      key: formattedKey,
      ca: [], // Array vazio para usar CA padrão do sistema
      rejectUnauthorized: true,
      securityOptions: 'SSL_OP_NO_SSLv3'
    }
  });

  const response = await fetch(tokenUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Accept': 'application/json'
    },
    body: params.toString(),
    // Use dispatcher em vez de agent
    dispatcher: agent
  });
}
2. Instalação do Undici
Adicione o undici como dependência explícita:

bash
npm install undici
Possíveis Causas Adicionais
1. Restrições de IP do Replit
O Inter pode estar bloqueando IPs dinâmicos do Replit. A documentação menciona que erro 406 pode ocorrer quando "seu IP pode ter sido bloqueado pelo firewall por ser considerado malicioso. Isso é comum para integrações em cloud, utilizando IPs dinâmicos".

Solução: Considere usar um IP dedicado no Replit ou testar em um ambiente com IP fixo.

2. Problema na Ordem dos Certificados
Baseado nos casos similares encontrados, o certificado pode não estar sendo enviado na ordem correta da cadeia. Certifique-se de que:

O certificado leaf está primeiro

Certificados intermediários estão na sequência correta

Não há certificados duplicados

3. Headers Proprietários Faltando
Algumas implementações do Inter podem requerer headers específicos não documentados. Tente adicionar:

typescript
headers: {
  'Content-Type': 'application/x-www-form-urlencoded',
  'Accept': 'application/json',
  'User-Agent': 'Replit-Inter-Integration/1.0',
  'X-Inter-SDK': 'custom-nodejs'
}
Debugging Avançado
1. Validação de Certificado
Execute este comando para validar seus certificados:

bash
openssl x509 -in certificado.crt -text -noout
openssl verify -verbose -CAfile ca-bundle.crt certificado.crt
2. Teste com cURL
Teste a mesma requisição com cURL para isolar o problema:

bash
curl -X POST https://cdpj.partners.bancointer.com.br/oauth/v2/token \
  --cert certificado.crt \
  --key private.key \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "client_id=SEU_CLIENT_ID&client_secret=SEU_CLIENT_SECRET&grant_type=client_credentials&scope=boleto-cobranca.read boleto-cobranca.write webhook.read webhook.write"
3. Interceptação de Requisições
Use um proxy como mitmproxy para interceptar e analisar a requisição completa:

bash
mitmdump -s script.py --listen-port 8080
Alternativas de Implementação
1. Axios com https.Agent
Se o problema persistir com fetch, use axios que tem melhor suporte para mTLS:

typescript
import axios from 'axios';
import https from 'https';

const agent = new https.Agent({
  cert: formattedCert,
  key: formattedKey,
  rejectUnauthorized: true
});

const response = await axios.post(tokenUrl, params, {
  httpsAgent: agent,
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded'
  }
});
2. Node HTTPS Nativo
Como último recurso, use o módulo https nativo:

typescript
import https from 'https';
import { URL } from 'url';

const postData = params.toString();
const urlObj = new URL(tokenUrl);

const options = {
  hostname: urlObj.hostname,
  port: 443,
  path: urlObj.pathname,
  method: 'POST',
  cert: formattedCert,
  key: formattedKey,
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': Buffer.byteLength(postData)
  }
};

const req = https.request(options, (res) => {
  // Processar resposta
});
Contatos de Suporte
Portal do Desenvolvedor Inter: https://developers.inter.co/

Fórum da Comunidade: Acesse através do Portal Developers

Suporte Técnico: 3003 4070 (Regiões Metropolitanas) ou 0800 940 0007

Validação da Solução
Para confirmar que a solução funcionou:

O token deve ser retornado com status 200

O response body deve conter access_token, token_type e expires_in

Os logs não devem mostrar mais o erro 400

A causa mais provável é a configuração incorreta do agent/dispatcher para mTLS com o fetch nativo do Node.js. A solução com undici Agent deve resolver o problema imediatamente.