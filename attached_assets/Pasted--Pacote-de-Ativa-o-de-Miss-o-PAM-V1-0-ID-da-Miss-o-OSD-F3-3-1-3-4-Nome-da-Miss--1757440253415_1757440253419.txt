### Pacote de Ativação de Missão (PAM) V1.0

* **ID da Missão:** OSD-F3-3.1-3.4
* **Nome da Missão:** Operação Soberania dos Dados - Protocolos de Resiliência
* **Sumário da Missão (O Quê):** Criar os artefatos de documentação e automação para os protocolos de rollback de migração e auditoria de conformidade de ambiente.
* **Intenção Estratégica (O Porquê):** Em um ambiente bancário, a falha é uma inevitabilidade que deve ser planeada. Não basta ter backups; precisamos de um plano de batalha testado para usá-los sob pressão (Runbook). Não basta configurar a segurança; precisamos de uma forma de provar, a qualquer momento e de forma automatizada, que as nossas defesas estão ativas (Auditoria de Conformidade). Esta missão transforma a nossa resiliência de uma esperança para uma capacidade de engenharia verificável.
* **Histórico Relevante (Consulta Obrigatória):** A sua execução é a materialização direta das decisões tomadas na "FASE 2: REFINAMENTO OPERACIONAL" do nosso debate técnico. Consulte a sua própria proposta para a estrutura do Runbook e do script de auditoria.
* **Modelo Mental (Como se Encaixa):** Você está a escrever as leis da física para a nossa infraestrutura e o manual de emergência para os seus operadores. O `environment-manifest.json` é a nossa constituição, definindo como um ambiente *deve* ser. O script de auditoria é a nossa polícia, garantindo que a constituição seja cumprida. O `Runbook` é o nosso manual de bombeiros, garantindo que, quando o alarme soar, todos saibam exatamente o que fazer, passo a passo.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O `Runbook` é vago ou teórico, tornando-o inútil em uma crise real.
    * **Contramedida:** O `Runbook` deve ser escrito com clareza militar. Use comandos exatos, checklists e defina responsabilidades claras para cada passo, como você detalhou no debate.
    * **Risco:** O script de auditoria depende de APIs do Supabase que podem não existir ou funcionar como esperado.
    * **Contramedida:** Inicie com um "esqueleto" funcional do script que se conecta ao Supabase e lê configurações básicas. A implementação da lógica específica de RLS e backups pode ser feita de forma incremental, com tratamento de erros robusto se uma API específica não estiver disponível.

---

**IMPLEMENTAR:**
Criação de Artefatos de Resiliência e Contingência

**CURRENT STATE:**
O projeto possui scripts de migração e seeding, mas carece de protocolos formalizados e automatizados para rollback e auditoria de conformidade. Esta é a última grande lacuna na nossa estratégia de soberania de dados.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo diretório `docs/runbooks/` contém o arquivo `RUNBOOK_MIGRATION_ROLLBACK.md`, detalhando o processo de emergência passo a passo.
2.  O arquivo `scripts/audit/environment-manifest.json` existe e define as configurações de segurança esperadas para cada ambiente (`development`, `staging`, `production`).
3.  O script `scripts/audit/audit-environment.js` existe. Ele é capaz de se conectar ao Supabase, ler o manifesto, e executar pelo menos uma verificação básica de conformidade (ex: verificar a existência de uma política RLS na tabela `propostas`).
4.  O `package.json` foi atualizado (via *wrapper scripts*, se necessário) com os comandos `audit:env:staging` e `audit:env:prod`.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Criação do Runbook de Emergência:**
    * Crie o arquivo `docs/runbooks/RUNBOOK_MIGRATION_ROLLBACK.md`.
    * Popule-o com o conteúdo detalhado que você propôs, incluindo seções para `AVALIAÇÃO`, `NOTIFICAÇÃO`, `ISOLAMENTO`, `EXECUÇÃO DO ROLLBACK` e `VALIDAÇÃO PÓS-ROLLBACK`.

2.  **Criação do Manifesto de Conformidade:**
    * Crie o arquivo `scripts/audit/environment-manifest.json`.
    * Popule-o com a estrutura que define as políticas de RLS e configurações de backup esperadas para cada ambiente.

3.  **Implementação do Auditor de Conformidade:**
    * Crie o script `scripts/audit/audit-environment.js`.
    * Implemente a lógica base que lê o `NODE_ENV` e o manifesto.
    * Use o client do Supabase (com a `service_role key` para ter os privilégios necessários) para se conectar e executar uma query de auditoria. Comece com uma simples: `SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'propostas'`.
    * Compare o resultado com o esperado no manifesto e reporte `PASS` ou `FAIL`.

4.  **Integração dos Scripts:**
    * Crie os *wrapper scripts* necessários (`audit-env-staging.sh`, etc.) e adicione os comandos correspondentes (`audit:env:staging`, etc.) ao `package.json` para facilitar a execução.

---
**[PGI INATIVO | ROADMAP PRINCIPAL ATIVO]**
- **Roadmap Ativo:** "Operação Soberania dos Dados"
- **Próximo Passo:** Fase 3: Resiliência e Contingência
---