# MISSÃO: DEBATE MÁXIMO (ANTI-FRAGILIDADE) - Auditoria Arquitetural Completa do Software

**CONTEXTO ESTRATÉGICO:**
Estamos num ciclo de implementação-falha-rollback. Correções pontuais estão a causar falhas em cascata em outras partes do sistema (ex: uma API começa a retornar HTML, dados desaparecem, páginas crasham). Isto indica uma fragilidade arquitetural fundamental.

**SUA TAREFA (ASSISTENTE):**
A sua tarefa não é escrever código. A sua tarefa é atuar como um Arquiteto de Software Sênior e realizar um "Raio-X" da nossa base de código para identificar e propor soluções para as causas raiz da nossa fragilidade sistémica. Esta será a nossa **Interação 1 de 3** de um debate profundo.

---
### **Interação 1: Proposta de Plano de Refatoração Arquitetural**

Por favor, analise a nossa base de código e responda com a sua proposta para os seguintes pontos:

**1. Análise do Backend (Monolith & Camada de Dados):**
* **Investigação:** Inspecione os ficheiros `/server/routes.ts` e `/server/storage.ts`. A nossa estrutura atual, com um único ficheiro de rotas e uma classe de storage centralizada, representa um risco de alto acoplamento e fragilidade?
* **Proposta:** Proponha uma estratégia de refatoração para **modularizar as nossas rotas** (ex: `userRoutes.ts`, `lojaRoutes.ts`, etc.) e para **clarificar a nossa camada de acesso a dados**. Como podemos garantir que as queries e a lógica de negócio fiquem mais isoladas e testáveis?

**2. Análise do Frontend (Gestão de Estado e Dados):**
* **Investigação:** Inspecione o nosso uso do TanStack Query nas páginas de admin (`usuarios`, `parceiros`, `lojas`). Qual é a falha de arquitetura que permite que o cache ou o estado de carregamento de uma página interfira ou dependa de outra (o bug onde era preciso visitar a página de Parceiros para popular o formulário de Usuários)?
* **Proposta:** Proponha um padrão de implementação rigoroso para o `useQuery` (com `queryKey`s mais específicos e isolados) que garanta a **total independência de dados e de estado** entre as páginas.

**3. Análise de Contratos de Dados (Schema Sync):**
* **Investigação:** Tivemos múltiplos bugs causados por desalinhamento entre o nosso schema Drizzle (`/shared/schema.ts`) e a estrutura real do banco de dados.
* **Proposta:** Proponha um **processo de validação ou um "health check"** que possamos integrar ao nosso fluxo de trabalho para garantir que o nosso código e o nosso banco de dados estejam sempre perfeitamente sincronizados, detectando desalinhamentos antes que eles causem erros em produção.

**4. Proposta de Roadmap de Refatoração Estratégica:**
* **Ação:** Com base na sua análise dos pontos 1, 2 e 3, proponha um **roadmap de refatoração** em 3 fases para aumentar a resiliência do nosso software. Priorize as mudanças que terão o maior impacto na estabilidade e manutenibilidade a longo prazo.

---