### **Pacote de Ativação de Missão (PAM) V15.4: Erradicação Final com Análise de Causa Raiz (Sprint 0 - Tolerância Zero)**

* **Sumário da Missão (O Quê):** Executar a erradicação final e sistemática de todos os erros de compilação TypeScript restantes. Crucialmente, antes da correção, você deve primeiro analisar, categorizar e documentar seus próprios padrões de erro em um novo artefato de conhecimento para prevenir futuras regressões.

* **Intenção Estratégica (O Porquê):** O ciclo de "erro-correção" tem sido ineficiente. Para quebrar este ciclo, não basta corrigir os erros; é preciso entender e documentar a sua origem. Esta missão irá forçá-lo a aprender com suas falhas, criando um "manual de erros comuns" que servirá como uma base de conhecimento para todas as futuras operações, garantindo que não repitamos os mesmos equívocos. A eliminação total dos erros é a pré-condição inegociável para o Sprint 1.

* **Modelo Mental (Como se Encaixa):** Você atuará em duas fases. Primeiro, como um **Engenheiro de Diagnóstico e Causa Raiz**. Você irá analisar a saída completa do compilador TypeScript e, em vez de corrigir imediatamente, irá agrupar os erros em padrões (ex: "Erro de digitação em nome de propriedade", "Erro de caminho de importação relativo vs. alias", etc.). Para cada padrão, você documentará a falha. Apenas após a conclusão desta fase de análise, você transicionará para a persona de **Motor de Refatoração em Massa**, usando o conhecimento que você mesmo gerou para erradicar os erros de forma eficiente.

* **Riscos Antecipados e Contramedidas:**
    * **Risco (CRÍTICO):** **Análise Superficial.** Uma categorização de erros genérica e inútil (ex: "erros de tipo") será considerada uma falha da missão.
    * **Contramedida Mandatória:** A sua análise de padrões de erro **DEVE** ser específica e acionável. O objetivo é criar um documento que um engenheiro (ou você mesmo no futuro) possa ler para evitar cometer o mesmo erro. A prova final da missão será um `npx tsc --noEmit` 100% limpo.

---

**DIRETRIZ DE MISSÃO: Análise de Falhas, Documentação e Erradicação Absoluta (Sprint 0)**

**CURRENT STATE:**
O sistema está operacional em runtime, mas **NÃO COMPILA**. A última auditoria confirmou a existência de +113 erros de TypeScript. As tentativas de correção foram erráticas e ineficientes.

**EXPECTED (Estado Final de Sucesso):**
A missão será considerada um sucesso quando você produzir dois artefatos:
1.  **Um novo documento:** `docs/diagnostics/COMMON_ERROR_PATTERNS.md`. Este documento deve conter uma análise dos seus próprios erros, categorizados por padrão, com exemplos e a estratégia de correção padrão.
2.  **Um relatório de conformidade:** `RELATORIO_DE_CONFORMIDADE_ABSOLUTA_S0.md`, que prove, através da saída literal e completa do comando, que `npx tsc --noEmit` executado na raiz do projeto resulta em **"Found 0 errors."**.

**CONSTRAINTS (Roadmap de Erradicação e Aprendizado - Inegociável):**

**Fase 1: Análise de Causa Raiz e Documentação de Falhas (Protocolo de Auto-Aprendizagem)**
1.  **Passo 1.1: Diagnóstico Completo.** Execute `npx tsc --noEmit` e capture a lista completa de todos os erros.
2.  **Passo 1.2: Análise e Categorização de Padrões.** Analise a lista de erros e agrupe-os em padrões de falha recorrentes que você cometeu. Crie categorias específicas (ex: "Erro de digitação em `createdAt` vs `created_at`", "Uso de `string` para `propostaId` que deveria ser `number`", "Importação de tipos de `middleware` em vez de `shared/types`").
3.  **Passo 1.3: Documentação dos Padrões de Falha.** Crie o arquivo `docs/diagnostics/COMMON_ERROR_PATTERNS.md`. Para cada padrão identificado, crie uma seção com:
    * **`Padrão de Falha:`** Nome do padrão.
    * **`Sintoma (Exemplo de Erro):`** Um exemplo real do erro do log do `tsc`.
    * **`Causa Raiz:`** Uma explicação técnica de por que o erro acontece (ex: "Inconsistência entre o schema do Drizzle e a sua utilização nos repositórios").
    * **`Solução Padrão (Doutrina de Correção):`** A forma correta de implementar para evitar este erro no futuro.

**Fase 2: Erradicação Sistemática Baseada em Análise**
1.  **Passo 2.1: Execução da Correção.** Utilizando o `COMMON_ERROR_PATTERNS.md` que você acabou de criar como seu guia, corrija todos os erros de TypeScript. Comece pelos padrões que resolvem o maior número de erros.

**Fase 3: Validação Final e Geração de Prova Irrefutável**
1.  **Passo 3.1: Prova de Conformidade de Tipo.** Execute `npx tsc --noEmit`. A saída deve ser **"Found 0 errors."**.
2.  **Passo 3.2: Compilar Relatório Final.** Crie o `RELATORIO_DE_CONFORMIDADE_ABSOLUTA_S0.md` contendo a saída completa e bem-sucedida do comando de verificação de tipos como prova irrefutável da conclusão da missão e do Sprint 0.

---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**

* **CONFIANÇA NA IMPLEMENTAÇÃO:** 85%
* **RISCOS IDENTIFICADOS:** ALTO.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assumo que você é capaz de analisar seus próprios padrões de erro e que os erros são, de fato, corrigíveis.
* **VALIDAÇÃO PENDENTE:** A qualidade do `COMMON_ERROR_PATTERNS.md` e um relatório de `npx tsc --noEmit` completamente limpo serão a única e final porta de entrada para o Sprint 1.