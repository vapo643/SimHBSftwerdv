### **Pacote de Ativação de Missão (PAM) V7.0: Consolidação do Tipo Canônico (Operação Fênix - P1.6)**

* **Sumário da Missão (O Quê):** Executar a **Fase A** do plano de remediação `DEBT_REMEDIATION_PLAN.md`. Esta missão consiste em criar o tipo `AuthenticatedRequest` canônico e centralizado no local especificado, estabelecendo a "fonte da verdade" para os tipos de requisição em todo o sistema.

* **Intenção Estratégica (O Porquê):** Atualmente, o projeto sofre de um débito técnico massivo causado por múltiplas definições inconsistentes do mesmo tipo. Esta missão estabelece uma fundação de tipo sólida e única, que será a base para a refatoração incremental dos 159 controllers. Sem um tipo canônico, qualquer tentativa de correção em massa resultaria em caos e mais inconsistências.

* **Modelo Mental (Como se Encaixa):** Você atuará como um **Engenheiro de Refatoração Cirúrgica**. Sua tarefa é pegar a definição de tipo que você mesmo projetou na fase de planejamento e implementá-la no local correto. Esta ação, por si só, não corrigirá os erros existentes, mas criará a ferramenta necessária para as correções futuras.

* **Riscos Antecipados e Contramedidas:**
    * **Risco (BAIXO):** **Erro de Sintaxe na Definição do Tipo.** A definição do novo tipo pode conter um erro de digitação ou de sintaxe.
    * **Contramedida Mandatória:** Após criar o novo arquivo de tipo, você **DEVE** executar `npx tsc --noEmit` para garantir que a nova definição não introduziu nenhum erro de compilação e que o número total de erros de tipo no projeto não aumentou.

---

**DIRETRIZ DE MISSÃO: Execução da Fase A do Plano Aprovado**

**CURRENT STATE:**
O sistema está operacional. Um plano de remediação (`/docs/refactoring/DEBT_REMEDIATION_PLAN.md`) foi criado e aprovado. A Fase A deste plano, que envolve a criação de um tipo TypeScript centralizado, aguarda execução.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo, `shared/types/express.ts`, deve ser criado.
2.  Este arquivo deve conter a definição da interface `AuthenticatedRequest`, estendendo a interface `Request` do Express com as propriedades customizadas (`user`, `tenantId`, etc.), conforme projetado no plano.
3.  A execução do comando `npx tsc --noEmit` após a criação do arquivo não deve resultar em um aumento do número de erros de tipo. O número de erros deve permanecer o mesmo ou diminuir.
4.  Nenhum outro arquivo do projeto deve ser modificado nesta missão.

**CONSTRAINTS (Protocolo de Execução - Inegociável):**

1.  **Passo 1: Criação do Diretório.** Crie o diretório `shared/types/` se ele não existir.
2.  **Passo 2: Implementação do Tipo.** Crie o arquivo `shared/types/express.ts` e adicione o código da interface `AuthenticatedRequest` canônica, exatamente como definido na Fase A do `DEBT_REMEDIATION_PLAN.md`.
3.  **Passo 3: Validação de Sanidade.** Execute `npx tsc --noEmit` para validar que a nova definição de tipo está correta e não introduziu novas quebras no sistema.
4.  **Passo 4: Relatório Final.** Reporte a conclusão da missão, incluindo a confirmação da criação do arquivo e o resultado da validação com `tsc`.

---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**

* **CONFIANÇA NA IMPLEMENTAÇÃO:** 99%
* **RISCOS IDENTIFICADOS:** BAIXO.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Todas as decisões foram tomadas no plano aprovado. Esta é uma missão de implementação aditiva.
* **VALIDAÇÃO PENDENTE:** A existência e o conteúdo do arquivo `shared/types/express.ts`, bem como a saída do `npx tsc --noEmit`, serão a prova final da missão.

---

**PROTOCOLO OBRIGATÓRIO 7-CHECK (ADAPTATIVO - Nível LIGHT):**
Ao concluir esta missão de execução, você **DEVE** executar e reportar o resultado do `7-CHECK LIGHT`, pois o risco foi classificado como **BAIXO**.