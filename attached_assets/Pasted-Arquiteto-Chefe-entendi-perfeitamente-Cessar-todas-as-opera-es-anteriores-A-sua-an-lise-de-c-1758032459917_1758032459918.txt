Arquiteto Chefe, entendi perfeitamente. **Cessar todas as operações anteriores.** A sua análise de campo é a peça de inteligência que faltava e muda todo o cenário. A sua hipótese está correta. A "pane geral" não é um bug pontual, é uma **falha arquitetural catastrófica**, e o gatilho foi a separação dos ambientes de banco de dados.

A tentativa do agente de criar "queries adaptativas" foi um erro tático. É um paliativo que mascara a doença em vez de curá-la. A nossa única abordagem viável é uma **Operação de Reconciliação Sistêmica**, onde forçamos o código a se alinhar com a nossa única fonte da verdade: o schema definido em `shared/schema.ts`. A validação que faremos é 100% focada no código, como você ordenou.

O agente, em sua análise anterior, já produziu um roadmap de reconciliação de altíssima qualidade que foi ignorado. Eu o recuperei e o validei. Este é o nosso plano de batalha definitivo. A execução deve ser precisa e literal.

Ativando o **Protocolo de Design de Missão de Elite (PDME)**. Abaixo está o plano de implementação final, que consolida a análise correta do agente e estabelece a ordem de marcha para a vitória.

Por favor, envie este pacote para o Agente Executor. Esta é a nossa diretriz para restaurar a integridade do sistema.

-----

### **PACOTE DE ATIVAÇÃO DE MISSÃO (PAM) V1.0 - OPERAÇÃO DE RECONCILIAÇÃO SISTÊMICA**

  * **Nível de Crise:** MÁXIMO
  * **Ferramenta Alocada:** High Power (Claude Opus)
  * **Sumário da Missão:** Executar um plano de reconciliação de duas fases para corrigir uma divergência de schema catastrófica que causou uma "pane geral" no sistema. A Fase 1 consiste numa cirurgia de código global para alinhar as referências de colunas. A Fase 2 estabelece um processo de migração de banco de dados robusto para prevenir futuras falhas.
  * **Intenção Estratégica:** Restaurar 100% da funcionalidade do sistema eliminando a causa raiz da falha de dados e, simultaneamente, implementar a infraestrutura de governança de schema (`drizzle-kit`) para garantir a estabilidade e a integridade arquitetural a longo prazo.

-----

**[DIRETIVA DE EXECUÇÃO DE ALTA PRECISÃO (PEAP)]**

  * Você está a operar sob o protocolo PEAP. A execução deve seguir o roadmap faseado de forma **sequencial e literal**. Cada passo deve ser concluído e validado antes de iniciar o seguinte. Não há margem para desvios ou alucinações. O sucesso desta missão depende da sua adesão estrita a estas ordens.

-----

**IMPLEMENTAR: Roadmap de Reconciliação Sistêmica**

**CURRENT STATE:**
O sistema está em estado de falha total ("pane geral"). Nenhuma tela que depende de dados do banco de dados está a carregar. A causa raiz foi identificada como uma divergência de schema: o código da aplicação em múltiplos ficheiros (`*.ts`) faz referência a uma coluna `clicksign_document_id`, enquanto a "fonte da verdade" (`shared/schema.ts`) e o banco de dados de produção definem esta coluna como `clicksign_document_key`.

**EXPECTED (Estado Final de Sucesso):**

1.  **Sistema 100% Funcional:** Todas as telas da aplicação, incluindo "Fila de Análise", "Formalização" e "Dashboard", devem carregar e exibir os dados do banco de dados corretamente.
2.  **Código Alinhado:** Não deve existir NENHUMA referência à string `clicksign_document_id` na pasta `/server`. Todas as instâncias devem ter sido substituídas por `clicksign_document_key`.
3.  **Processo de Migração Implementado:** O ficheiro `package.json` deve conter os novos scripts `db:migrate:prod`, `db:migrate:generate`, e `db:migrate:validate`, estabelecendo o nosso novo padrão de governança de schema.

-----

**CONSTRAINTS (Roadmap de Implementação Faseado):**

### **FASE 1: REMEDIAÇÃO TÁTICA (CIRURGIA GLOBAL DE CÓDIGO)**

**Passo 1.1: Executar a Substituição Global**

  * Execute uma operação de "Find and Replace" em toda a base de código com os seguintes parâmetros **exatos**:
      * **Termo a ser encontrado:** `clicksign_document_id`
      * **Termo de substituição:** `clicksign_document_key`
      * **Escopo da busca:** Diretório `/server`
      * **Tipos de ficheiro a incluir:** `*.ts`
      * **Configurações:**
          * Case-sensitive: **true**
          * Match whole word: **false** (para garantir a substituição dentro de strings SQL)

**Passo 1.2: Verificação Manual dos Pontos Críticos**

  * Após a substituição global, abra cada um dos seguintes ficheiros e confirme visualmente que a substituição foi aplicada corretamente e não introduziu erros de sintaxe.
    1.  `server/repositories/webhook.repository.ts`
    2.  `server/routes/webhooks.ts`
    3.  `server/routes/formalizacao-original.ts`
    4.  `server/services/ccbSyncServiceRefactored.ts`
    5.  `server/services/documentProcessingService.ts`

**Passo 1.3: Validação de Integridade do Código**

  * Execute o comando `get_latest_lsp_diagnostics`. O resultado **DEVE** ser zero erros. Corrija quaisquer erros de sintaxe introduzidos pela substituição antes de prosseguir.

### **FASE 2: BLINDAGEM ESTRATÉGICA (PROCESSO DE MIGRAÇÃO)**

**Passo 2.1: Fortalecer o `package.json`**

  * Abra o ficheiro `package.json`.
  * Localize a seção `"scripts"`.
  * Adicione os seguintes três scripts, que se tornarão o nosso padrão para gerenciamento de schema:
    ```json
    "db:migrate:generate": "npx drizzle-kit generate:pg --out=./migrations --schema=./shared/schema.ts",
    "db:migrate:validate": "npx drizzle-kit check:pg --out=./migrations",
    "db:migrate:prod": "npx drizzle-kit push:pg --verbose"
    ```
  * Garanta que a sintaxe do JSON permaneça válida (cuidado com as vírgulas).

**Passo 2.2: Verificação Final**

  * Execute novamente `get_latest_lsp_diagnostics` para garantir que nenhuma alteração quebrou a sintaxe do `package.json`.

-----

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**

  * **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
  * **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]
  * **DECISÕES TÉCNICAS ASSUMIDAS:** [Listar decisões tomadas]
  * **VALIDAÇÃO PENDENTE:** [Listar ações para o Orquestrador/QA]

-----

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**

1.  Mapear os ficheiros e funções exatas afetadas.
2.  Garantir que as modificações no `package.json` estão sintaticamente corretas.
3.  Executar `get_latest_lsp_diagnostics` e corrigir **TODOS** os erros.
4.  **Declarar Nível de Confiança (0-100%)** na implementação.
5.  **Categorizar Riscos Descobertos** (BAIXO/MÉDIO/ALTO/CRÍTICO).
6.  Realizar teste funcional completo, confirmando que a "pane geral" foi resolvida e que os dados são carregados em todas as telas.
7.  **Documentar Decisões Técnicas** (ex: "Realizada a reconciliação global de `clicksign_document_id` para `clicksign_document_key` para alinhar o código com o schema de produção. Implementado workflow de migração com Drizzle Kit para prevenir futuras divergências.").

<!-- end list -->

```
```