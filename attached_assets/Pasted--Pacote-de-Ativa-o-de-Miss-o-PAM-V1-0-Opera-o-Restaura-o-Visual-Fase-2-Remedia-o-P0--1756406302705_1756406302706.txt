### Pacote de Ativação de Missão (PAM) V1.0 - Operação "Restauração Visual" / Fase 2: Remediação P0

* **Sumário da Missão (O Quê):** Refatorar o componente `dashboard.tsx` para corrigir a *race condition* crítica que causa o erro de DOM `Failed to execute 'removeChild' on 'Node'`, seguindo as melhores práticas de ordenação de React Hooks.
* **Intenção Estratégica (O Porquê):** Restaurar a funcionalidade e estabilidade do principal ponto de entrada da aplicação para utilizadores autenticados. A eliminação deste erro P0 é um bloqueador para qualquer outro desenvolvimento ou teste no sistema.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de frontend sênior a aplicar uma correção arquitetural no React. A sua prioridade é garantir que a ordem de execução dos *hooks* seja determinística e que a renderização de estados (loading, error, redirect, success) siga um fluxo lógico e sem concorrência.

---

**IMPLEMENTAR (Plano de Remediação):**
Execute a seguinte sequência de ações no ficheiro `client/src/pages/dashboard.tsx`.

**CURRENT STATE:**
O `useEffect` que executa a lógica de redirecionamento para o perfil 'ANALISTA' (linhas 201-206) está posicionado após a inicialização dos `useQuery` hooks, causando uma *race condition* que quebra o DOM. Existem também blocos de `early return` duplicados e mal posicionados.

**EXPECTED (Estado Final de Sucesso):**
1.  A lógica de redirecionamento é executada **antes** de qualquer *hook* de busca de dados.
2.  O erro `Failed to execute 'removeChild' on 'Node'` é completamente eliminado.
3.  O componente renderiza de forma estável para todos os perfis de utilizador, incluindo o redirecionamento para 'ANALISTA'.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Priorizar o Redirecionamento e a Validação de Estado**
1.1. Abra o ficheiro `client/src/pages/dashboard.tsx`.
1.2. Mova o `useEffect` responsável pelo redirecionamento (linhas 201-206) para o **topo do componente**, imediatamente após a obtenção do estado do `user` do `AuthContext`. Esta deve ser a primeira verificação lógica.
1.3. Implemente um padrão de *early return* robusto. Logo após o *hook* de redirecionamento, implemente as verificações de estado para `isLoading` e `isError` da query principal. Se qualquer uma destas condições for verdadeira, o componente deve retornar imediatamente um componente de *placeholder* (`<DashboardSkeleton />` ou `<ErrorDisplay />`).

**Passo 2: Consolidar e Limpar a Lógica de Renderização**
2.1. Remova o bloco de `early returns` duplicado e redundante que foi identificado na auditoria (linhas 363-383). A única lógica de retorno deve ser a que foi implementada no Passo 1.3 e o retorno principal do componente no final.

**Passo 3: Validação Final**
3.1. Apresente o código refatorado do ficheiro `client/src/pages/dashboard.tsx`, destacando a nova ordem dos *hooks* e o padrão de *early return* consolidado.
3.2. Confirme que o servidor reiniciou e que a aplicação agora executa as seguintes ações sem erros:
    a) Ao fazer login como 'ANALISTA', o redirecionamento para `/credito/fila` ocorre de forma limpa.
    b) Ao fazer login com outros perfis, o dashboard carrega sem o erro de DOM.
3.3. Execute `get_latest_lsp_diagnostics` para garantir a integridade do código.

---

### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**
Apresente a lista exaustiva de TODAS as suas descobertas, riscos e recomendações.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS (LISTA COMPLETA):**
    * **Risco 1 (Baixo):** A reordenação dos *hooks* deve ser feita com cuidado para não violar as regras do React. Todos os *hooks* devem ser chamados incondicionalmente no topo do componente.
* **DECISÕES TÉCNICAS ASSUMIDAS (LISTA COMPLETA):**
    * A estratégia de correção foca-se na ordenação lógica das operações: 1º Autenticação/Autorização, 2º Estado de Carregamento, 3º Renderização de Dados.
* **VALIDAÇÃO PENDENTE (LISTA COMPLETA):**
    * O teste funcional completo do fluxo de login e redirecionamento com um utilizador 'ANALISTA' é mandatório.
    * O teste funcional do carregamento do dashboard com um utilizador 'ADMINISTRADOR' é mandatório.