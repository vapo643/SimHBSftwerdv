**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Implementar a "Fase 1: Fundação + Instrumentação" da sua própria proposta de "Plano de Implementação Otimizado", que inclui a criação da tabela `status_contextuais`, a implementação da lógica de "dupla escrita" com transações atômicas e o início do monitoramento.
* **Intenção Estratégica (O Porquê):** Para construir a fundação segura da nossa nova arquitetura de status, garantindo que a migração possa ocorrer sem downtime, com validação incremental e com a máxima segurança contra a inconsistência de dados.
* **Histórico Relevante (Consulta Obrigatória):** Use o seu próprio relatório de "Análise Arquitetural" como a única fonte da verdade para esta missão. Sua tarefa é executar a Fase 1 do plano que você mesmo projetou.
* **Modelo Mental (Como se Encaixa):** Você atuará como Engenheiro de Dados e de Backend. Sua tarefa é modificar o schema do banco de dados e refatorar todos os pontos de escrita de status para adotar a nova lógica de "dupla escrita" transacional.
* **Riscos Antecipados:** **Risco:** Condições de corrida na "dupla escrita". **Contramedida:** Como você mesmo sugeriu, a implementação **DEVE** usar transações de banco de dados atômicas para garantir que ambas as escritas (na tabela `propostas` e na `status_contextuais`) tenham sucesso ou falhem juntas.

---

**IMPLEMENTAR:**
A Fase 1 do seu "Plano de Implementação Otimizado".

**CURRENT STATE:**
O sistema possui uma única e sobrecarregada coluna `status` na tabela `propostas`.

**EXPECTED (Estado Final de Sucesso):**
1.  A nova tabela `status_contextuais` existe no banco de dados.
2.  Todos os pontos do código que atualizam o `status` de uma proposta (endpoints de API, webhooks, etc.) são refatorados para usar a lógica de "dupla escrita": eles agora atualizam **tanto** a coluna `status` antiga na tabela `propostas` **quanto** inserem/atualizam um registro na nova tabela `status_contextuais`, dentro de uma única transação atômica.
3.  A base para o monitoramento de consistência está implementada.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Migração do Banco de Dados (Drizzle):**
    - **Ação:** Crie e aplique uma nova migração Drizzle para adicionar a tabela `status_contextuais` ao banco de dados, com o schema exato que você projetou.

**2. Implementação da "Dupla Escrita" Transacional:**
    - **Ação:** Audite o código para encontrar **TODOS** os locais que executam um `UPDATE` na coluna `status` da tabela `propostas`.
    - **Implementação:** Refatore cada um desses locais. A lógica de atualização deve ser envolvida em uma **transação de banco de dados** (`db.transaction(async (tx) => { ... })`). Dentro da transação, você deve:
        a. Executar o `UPDATE` na tabela `propostas` (a lógica antiga).
        b. Executar um `INSERT ... ON CONFLICT UPDATE` na nova tabela `status_contextuais` (a nova lógica).

**3. Implementação do Monitoramento (Logging):**
    - **Ação:** Adicione logs detalhados para o novo processo.
    - **Implementação:** Crie logs claros para o início e o fim da transação de dupla escrita, e, crucialmente, para qualquer erro que ocorra dentro dela.

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
Siga o protocolo completo. O teste funcional deve ser: acionar um evento que mude o status de uma proposta (ex: aprovar uma proposta) e, em seguida, executar queries `SELECT` para **PROVAR** que **ambas** as tabelas (`propostas` e `status_contextuais`) foram atualizadas corretamente e de forma consistente dentro da mesma operação.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
Preencha a declaração completa ao final da sua implementação.
---