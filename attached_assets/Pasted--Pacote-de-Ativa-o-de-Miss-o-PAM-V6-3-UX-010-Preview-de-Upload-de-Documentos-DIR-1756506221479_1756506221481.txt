### **Pacote de Ativação de Missão (PAM) V6.3 - UX-010 (Preview de Upload de Documentos)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Implementar uma funcionalidade de preview visual (miniatura/thumbnail) para os arquivos que foram carregados na seção de documentos da página de edição de propostas.
* **Intenção Estratégica (O Porquê):** Aumentar a confiança e a clareza para o usuário. Permitir que o usuário visualize uma miniatura do documento que acabou de enviar confirma que o upload foi bem-sucedido e que o arquivo correto foi associado à proposta, prevenindo erros e reduzindo a incerteza.
* **Histórico Relevante (Consulta Obrigatória):** A análise heurística (`GL-002`) identificou a ausência de um preview de documentos como uma melhoria de **ALTA** severidade no fluxo de gestão de propostas.

---

**IMPLEMENTAR:**
User Story UX-010: Adicionar Preview de Miniatura para Documentos Carregados

**CONTEXT:**
Nossa auditoria de UX revelou que, na tela de edição de propostas, após o usuário fazer o upload de um documento (como um comprovante de identidade ou renda), a interface apenas exibe o nome do arquivo. Não há uma confirmação visual do conteúdo do arquivo, o que pode deixar o usuário inseguro se o upload do documento correto foi realizado.

**CURRENT STATE:**
O componente `client/src/pages/propostas/editar.tsx` (e/ou seus componentes filhos, como `DocumentsStep.tsx` ou uma `DocumentsTab`) renderiza uma lista de documentos carregados, mostrando apenas seus nomes como texto ou links.

**EXPECTED (Estado Final de Sucesso):**
1.  **Preview de Imagens:** Para tipos de arquivo de imagem (JPEG, PNG), uma miniatura (thumbnail) da imagem carregada deve ser exibida.
2.  **Preview de PDFs:** Para arquivos PDF, a miniatura da primeira página do documento deve ser gerada e exibida.
3.  **Layout Aprimorado:** A lista de documentos deve ser redesenhada para acomodar as miniaturas, talvez utilizando um layout de "grid" ou "cards" em vez de uma simples lista de texto.
4.  **Funcionalidade de Clique:** Clicar na miniatura deve abrir o documento em tamanho real em uma nova aba ou em um visualizador modal.
5.  **Prova de Sucesso:** Você deve fornecer um screenshot da seção de documentos mostrando as miniaturas de um arquivo de imagem e de um arquivo PDF lado a lado.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localizar Componente Alvo:** O foco principal será no arquivo que renderiza a lista de documentos para uma proposta existente, provavelmente `client/src/pages/propostas/editar.tsx` ou um componente de aba dentro dele.
2.  **Lógica de Geração de Preview:**
    * **Para Imagens:** A geração de preview é direta. Você pode usar a própria URL do arquivo de imagem (seja um `object URL` local ou a URL do Supabase Storage) em uma tag `<img>`.
    * **Para PDFs:** A geração de thumbnail de PDF no cliente é mais complexa. Utilize uma biblioteca como `pdfjs-dist` para carregar o PDF, renderizar a primeira página em um `<canvas>` e, em seguida, obter a imagem do canvas.
3.  **Refatorar Componente da Lista:** Modifique o componente que renderiza a lista de documentos para incluir a lógica condicional: se o arquivo for uma imagem, renderize uma `<img>`; se for um PDF, renderize o componente de preview de PDF; caso contrário, mostre um ícone genérico.
4.  **Implementar Visualizador:** Envolva cada item da lista em um link (`<a>` com `target="_blank"`) que aponte para a URL completa do documento no Supabase Storage.
5.  **Validar e Apresentar Evidência:** Teste o fluxo fazendo upload de um arquivo de imagem e um arquivo PDF. Garanta que ambas as miniaturas sejam exibidas corretamente. Capture e apresente o screenshot do resultado final.
6.  **Verificação Final:** Execute o protocolo `7-CHECK FULL`.