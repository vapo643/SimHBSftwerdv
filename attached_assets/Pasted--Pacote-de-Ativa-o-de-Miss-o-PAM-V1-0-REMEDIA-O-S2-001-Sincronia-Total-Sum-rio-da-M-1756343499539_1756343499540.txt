### Pacote de Ativação de Missão (PAM) V1.0 - REMEDIAÇÃO S2-001: Sincronia Total

* **Sumário da Missão (O Quê):** Reverter as alterações manuais feitas na base de dados e re-implementar a criação das tabelas `ccbs` e `boletos` utilizando o fluxo correto de Drizzle ORM (schema-first), garantindo a criação de um ficheiro de migração versionado.
* **Intenção Estratégica (O Porquê):** Restaurar a integridade do nosso processo de "Infrastructure as Code" para a base de dados. A única fonte da verdade para o schema DEVE ser o ficheiro `shared/schema.ts`, e todas as alterações devem ser rastreáveis através de ficheiros de migração em `/migrations`.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de dados sênior corrigindo um desvio de processo. A missão é restaurar a consistência entre o código (schema), o sistema de migração e a base de dados.

---

**IMPLEMENTAR (Plano de Remediação):**
Execute a seguinte sequência de ações para restaurar a integridade do sistema.

**CURRENT STATE:**
As tabelas `ccbs` e `boletos`, juntamente com os seus índices, existem na base de dados, mas não estão refletidas no ficheiro `shared/schema.ts` nem representadas por um ficheiro de migração em `/migrations`.

**EXPECTED (Estado Final de Sucesso):**
1. O ficheiro `shared/schema.ts` contém as definições completas e corretas para as tabelas `ccbs` e `boletos`.
2. Um novo ficheiro de migração existe em `/migrations` contendo as instruções SQL `CREATE TABLE` e `CREATE INDEX` para as novas entidades.
3. A base de dados de desenvolvimento está num estado consistente, refletindo a execução da nova migração.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Reverter Alterações Manuais (Rollback)**
1.1. Execute os seguintes comandos SQL para remover as tabelas e índices criados manualmente fora do processo de migração. Execute-os na ordem correta para respeitar as dependências de chaves estrangeiras.
    ```sql
    DROP TABLE IF EXISTS public.boletos;
    DROP TABLE IF EXISTS public.ccbs;
    ```

**Passo 2: Definir o Schema como Código (Fonte da Verdade)**
2.1. Abra o ficheiro `shared/schema.ts`.
2.2. Adicione as definições Drizzle ORM para as tabelas `ccbs` e `boletos`, garantindo que todas as colunas, tipos, relacionamentos e a coluna `deletedAt` estejam corretamente modelados conforme o relatório de execução anterior.

**Passo 3: Gerar o Ficheiro de Migração Versionado**
3.1. Execute o comando `drizzle-kit` para comparar o schema (`shared/schema.ts`) com a base de dados (agora sem as tabelas) e gerar um novo ficheiro de migração:
    `npm run db:generate`
3.2. Verifique o conteúdo do ficheiro de migração SQL gerado em `/migrations` para garantir que ele contém as instruções `CREATE TABLE` corretas.

**Passo 4: Adicionar Índices ao Ficheiro de Migração**
4.1. Abra o ficheiro de migração SQL recém-gerado.
4.2. Adicione os comandos `CREATE INDEX` necessários para as tabelas `ccbs`, `boletos`, `propostas` e `parcelas` ao final do ficheiro, conforme especificado no PAM anterior.

**Passo 5: Aplicar a Migração Corretamente**
5.1. Execute o comando para aplicar todas as migrações pendentes (incluindo a nova) à sua base de dados de desenvolvimento:
    `npm run db:push`

**Passo 6: Validação Final**
6.1. Execute `get_latest_lsp_diagnostics` para garantir que as alterações no `shared/schema.ts` não introduziram erros.
6.2. Apresente o nome e o conteúdo completo do novo ficheiro de migração SQL criado.
6.3. Execute uma query SQL para confirmar que as tabelas `ccbs` e `boletos` existem novamente na base de dados.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** MÉDIO. A operação `DROP TABLE` é destrutiva. Embora este seja um ambiente de desenvolvimento, a execução deve ser precisa. O Agente deve seguir a ordem correta.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que a base de dados de desenvolvimento pode ter as tabelas `ccbs` e `boletos` removidas sem perda de dados críticos neste estágio.
* **VALIDAÇÃO PENDENTE:** Confirmação de que o processo de migração pode ser executado repetidamente e de forma consistente em novos ambientes.