### Pacote de Ativação de Missão (PAM) V1.3 (Formalização dos Padrões de Design)

* **Sumário da Missão (O Quê):** Gerar o documento `design-patterns-doctrine.md`, criando um catálogo formal dos padrões de design mandatórios para o projeto Simpix, com base nos "Subtópicos Obrigatórios" do Ponto 25.
* **Intenção Estratégica (O Porquê):** Garantir a consistência, a manutenibilidade e a testabilidade da nossa base de código em escala. Um catálogo de padrões de design formal serve como uma "linguagem partilhada" para a equipa de engenharia, acelerando o desenvolvimento e reduzindo a complexidade acidental.
* **Histórico Relevante (Consulta Obrigatória):** A nossa refatoração DDD (Ponto 9) já implementou implicitamente vários destes padrões (Repository, DI). Esta missão irá extraí-los, formalizá-los e torná-los uma doutrina para todo o projeto.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Software Principal a escrever o "manual de estilo de código" da empresa. O foco é em documentar os padrões comprovados que garantem um código limpo, desacoplado e robusto.

---

**IMPLEMENTAR:**
Documento de Doutrina de Padrões de Design

**CURRENT STATE:**
Utilizamos vários padrões de design de forma ad-hoc, mas não temos um catálogo formal que os documente, o que leva a inconsistências e dificulta o onboarding de novos desenvolvedores.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/02-technical/design-patterns-doctrine.md`, é criado. O arquivo deve conter as seguintes seções, conforme o Ponto 25:

1.  **Padrões de Persistência:**
    * **Repository Pattern:** Descrever o nosso uso do padrão Repositório para abstrair a camada de dados (com `snippets` da nossa `IProposalRepository`).
    * **Unit of Work:** Descrever como as nossas transações (`db.transaction`) funcionam como uma Unidade de Trabalho.
2.  **Padrões para Gerenciamento de Concorrência:**
    * Descrever a nossa estratégia para evitar *race conditions* (ex: **Locking Otimista** com um campo de versão, ou **Locking Pessimista** com `SELECT ... FOR UPDATE` do PostgreSQL).
3.  **Padrões de Tratamento de Erros:**
    * Fazer referência ao nosso `ADR-004` e à implementação do padrão **RFC 7807** como a nossa doutrina de tratamento de erros.
4.  **Padrões de Injeção de Dependência (DI) e Inversão de Controle (IoC):**
    * Descrever a nossa abordagem de **Injeção de Dependência via Construtor** (ex: como passamos o `repository` para os `use cases`) e o princípio da Inversão de Dependência (DIP).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a Injeção de Dependência via Construtor é a abordagem mais simples e eficaz para a nossa stack TypeScript, sem a necessidade de um container de DI complexo."]
* **VALIDAÇÃO PENDENTE:** [O documento gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que todas as 4 seções obrigatórias são criadas no documento, com exemplos de código do nosso projeto.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.