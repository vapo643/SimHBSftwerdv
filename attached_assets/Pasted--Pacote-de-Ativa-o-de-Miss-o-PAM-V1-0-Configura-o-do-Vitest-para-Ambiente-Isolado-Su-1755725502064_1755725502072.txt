### Pacote de Ativação de Missão (PAM) V1.0 (Configuração do Vitest para Ambiente Isolado)

* **Sumário da Missão (O Quê):** Modificar a configuração do `vitest` para carregar o arquivo de ambiente `.env.test` e refatorar o código de teste para utilizar a nova variável `TEST_DATABASE_URL`.
* **Intenção Estratégica (O Porquê):** Ativar a terceira e mais robusta camada de defesa contra a perda de dados: o isolamento físico completo do banco de dados de teste. Esta é a solução estrutural e definitiva que erradica a causa-raiz da vulnerabilidade original.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior (Passo 2.1) criou o arquivo `.env.test` contendo a variável `TEST_DATABASE_URL`. Esta missão irá configurar o `vitest` para efetivamente usá-la.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de configuração de ambiente de teste. O Agente irá modificar os arquivos de configuração do `vitest` e os helpers de teste para redirecionar todas as conexões de banco de dados durante os testes para a nova `TEST_DATABASE_URL`.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A configuração pode ser complexa e falhar em carregar as variáveis de ambiente corretamente.
    * **Contramedida:** O prompt sugere uma abordagem padrão da indústria (usando `dotenv` em um arquivo de setup) e a validação final será uma revisão de código que prova que a nova variável está a ser usada.

---

**IMPLEMENTAR:**
Configuração do Vitest para Ambiente de Teste Isolado

**CURRENT STATE:**
O `vitest` atualmente executa os testes utilizando a variável global `DATABASE_URL`. O arquivo `.env.test` com a variável `TEST_DATABASE_URL` existe, mas não está a ser utilizado.

**EXPECTED (Estado Final de Sucesso):**
1.  Um arquivo de setup para o `vitest` (ex: `tests/setup.ts`) é criado ou modificado para carregar as variáveis de ambiente do arquivo `.env.test`.
2.  O arquivo de configuração `vitest.config.ts` é atualizado para usar este novo arquivo de setup.
3.  Todos os arquivos dentro do diretório `tests/` que atualmente usam `process.env.DATABASE_URL` são refatorados para usar `process.env.TEST_DATABASE_URL`. Isso inclui o helper `tests/lib/db-helper.ts` e as guardas `beforeAll` implementadas anteriormente.
4.  A suíte de testes continua a funcionar, mas agora está comprovadamente a apontar para a nova variável de banco de dados de teste.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Carregue o `.env.test`:** A abordagem recomendada é criar um arquivo `tests/setup.ts` e adicionar o seguinte código no topo, utilizando a biblioteca `dotenv`:
    ```typescript
    import { config } from 'dotenv';
    config({ path: '.env.test' });
    ```
    Em seguida, atualize o `vitest.config.ts` para incluir a referência a este arquivo de setup.
2.  **Refatore as Referências:** Realize uma busca global por `process.env.DATABASE_URL` dentro do diretório `tests/` e substitua todas as ocorrências por `process.env.TEST_DATABASE_URL`.
3.  **Validação:** A prova de sucesso será uma revisão dos arquivos modificados (`vitest.config.ts`, `tests/setup.ts`, `tests/lib/db-helper.ts`, etc.), mostrando que a nova variável `TEST_DATABASE_URL` está a ser usada consistentemente em todo o ambiente de teste.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a biblioteca `dotenv` é a forma padrão e mais robusta de carregar arquivos de ambiente para o `vitest`."]
* **VALIDAÇÃO PENDENTE:** [Após esta missão, a próxima etapa será popular o banco de dados de teste real (substituindo o placeholder) e executar a suíte de testes completa contra ele.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear todos os ficheiros de configuração e de teste a serem modificados.
2.  Garantir que o `vitest` está corretamente configurado para usar o arquivo de setup e que todas as referências à variável de ambiente foram atualizadas.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão lógica do código para confirmar as modificações).
7.  **Documentar Decisões Técnicas**.