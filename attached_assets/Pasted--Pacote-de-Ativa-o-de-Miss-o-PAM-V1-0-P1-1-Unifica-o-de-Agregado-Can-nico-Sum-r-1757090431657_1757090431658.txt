### **Pacote de Ativação de Missão (PAM) V1.0 - P1.1: Unificação de Agregado Canónico**

* **Sumário da Missão (O Quê):** Resolver a "Crise de Identidade" do sistema ao consolidar as duas definições conflitantes do agregado `Proposal` numa única fonte da verdade, eliminando o código duplicado e refatorando todas as dependências para apontar para a nova definição canónica.
* **Intenção Estratégica (O Porquê):** Esta é a Ação P1.1 da "Operação Aço Líquido". A existência de múltiplos agregados para a mesma entidade é a violação mais fundamental do Domain-Driven Design e a causa raiz da "Esquizofrenia Arquitetural". A unificação estabelecerá uma base de código sã e consistente, pré-requisito indispensável para todas as refatorações futuras.
* **Histórico Relevante (Consulta Obrigatória):** O `DIAGNOSTICO_SISTEMICO_FINAL.md` identificou as duas localizações conflitantes: `server/modules/proposal/domain/Proposal.ts` (considerada a mais completa) e `server/modules/credit/domain/aggregates/Proposal.ts` (a ser eliminada).
* **Modelo Mental (Como se Encaixa):** Estamos a realizar uma fusão no coração do nosso domínio. O agregado em `proposal/domain` será o "recipiente" canónico. O agregado em `credit/domain` será dissecado, a sua lógica e propriedades valiosas (se existirem) serão transplantadas para o recipiente, e o seu invólucro vazio será então erradicado. Todas as "estradas" (importações) que levavam ao agregado antigo serão redirecionadas para o novo local unificado.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (ALTO):** A remoção do agregado duplicado pode quebrar dezenas de importações em todo o sistema, resultando numa falha de compilação massiva.
    * **Contramedida:** A execução será faseada. Primeiro, a análise e fusão da lógica. Segundo, a eliminação do arquivo. Terceiro, e mais crucial, uma busca e substituição sistemática de todas as importações quebradas, guiada pelo output do `get_latest_lsp_diagnostics`.

---

**IMPLEMENTAR:** Consolidação do Agregado `Proposal`

**CONTEXT:** O sistema possui duas definições de `class Proposal` em `bounded contexts` diferentes, com estruturas e lógicas distintas, causando inconsistência massiva. A versão em `server/modules/proposal/domain/Proposal.ts` foi designada como a fonte canónica da verdade.

**CURRENT STATE:** Dois arquivos definem o mesmo agregado, violando os princípios de DDD e causando a "Crise de Identidade" do sistema.

**EXPECTED (Estado Final de Sucesso):**
1.  Deve existir apenas UM arquivo definindo o agregado `Proposal`: `server/modules/proposal/domain/Proposal.ts`.
2.  Este arquivo deve conter a lógica consolidada e completa de ambas as versões anteriores.
3.  O arquivo `server/modules/credit/domain/aggregates/Proposal.ts` deve ser permanentemente eliminado.
4.  TODOS os arquivos no projeto que anteriormente importavam o agregado de `credit/domain` devem ser refatorados para importar a versão canónica de `proposal/domain`.
5.  O sistema deve compilar sem erros de tipo ou de importação após a refatoração.

**CONSTRAINTS (Roadmap de Implementação):**

1.  **Fase 1: Análise Comparativa e Fusão de Lógica**
    * Abra simultaneamente os dois arquivos:
        * **Canónico:** `server/modules/proposal/domain/Proposal.ts`
        * **Redundante:** `server/modules/credit/domain/aggregates/Proposal.ts`
    * Compare as duas classes. Identifique quaisquer métodos, propriedades ou lógicas de negócio presentes na versão **redundante** que estejam ausentes na versão **canónica**.
    * Se encontrar lógica valiosa e não duplicada, transplante-a para a classe `Proposal` canónica.

2.  **Fase 2: Erradicação do Agregado Redundante**
    * **Delete** o arquivo `server/modules/credit/domain/aggregates/Proposal.ts`.

3.  **Fase 3: Refatoração de Dependências e Validação**
    * Execute `get_latest_lsp_diagnostics`. É esperado que isto retorne uma lista de erros de "module not found" ou "cannot find name 'Proposal'".
    * Para cada erro reportado, navegue até o arquivo correspondente e corrija a instrução `import` para que aponte para o caminho canónico: `... from '../../proposal/domain/Proposal'`.
    * Continue a executar `get_latest_lsp_diagnostics` e a corrigir as importações de forma iterativa até que o comando retorne **ZERO erros**. Este é o "Definition of Done" para esta missão.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** \[Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** \[Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição. O risco principal aqui é ALTO devido à natureza da refatoração.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** \[Ex: "Assumi que toda a lógica necessária da versão `credit` pode ser mesclada na versão `proposal` sem criar conflitos."]
* **VALIDAÇÃO PENDENTE:** \[Ex: "Testes de integração completos serão necessários após a Fase P1 para garantir que a consolidação não introduziu regressões lógicas."]

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (a lista de arquivos com importações corrigidas será longa).
2.  Garantir que a fusão da lógica, se aplicável, mantenha os tipos consistentes.
3.  Executar `get_latest_lsp_diagnostics` até que **nenhum erro** seja reportado.
4.  Declarar Nível de Confiança (0-100%) na implementação.
5.  Categorizar Riscos Descobertos (BAIXO/MÉDIO/ALTO/CRÍTICO).
6.  Realizar teste funcional (será feito no final da Fase P1).
7.  Documentar Decisões Técnicas assumidas para auditoria futura.