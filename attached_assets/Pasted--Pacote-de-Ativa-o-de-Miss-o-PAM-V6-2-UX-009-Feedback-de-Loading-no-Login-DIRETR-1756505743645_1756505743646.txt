### **Pacote de Ativação de Missão (PAM) V6.2 - UX-009 (Feedback de Loading no Login)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Implementar um feedback visual de carregamento (`loading state`) no botão de submissão do formulário de login.
* **Intenção Estratégica (O Porquê):** Melhorar a "Visibilidade do estado do sistema". Quando um usuário clica em "Entrar", uma operação de rede assíncrona é iniciada. Sem um feedback visual, o usuário pode pensar que a aplicação travou ou que seu clique não foi registrado, levando a cliques múltiplos e frustração. Um indicador de `loading` fornece a certeza de que o sistema está processando a sua requisição.
* **Histórico Relevante (Consulta Obrigatória):** A análise heurística (`GL-002`) identificou a ausência de feedback de `loading` como uma melhoria de **ALTA** severidade para o fluxo de autenticação.

---

**IMPLEMENTAR:**
User Story UX-009: Adicionar Indicador de Carregamento ao Formulário de Login

**CONTEXT:**
Nossa auditoria de UX revelou que, após clicar no botão "Entrar", a interface não fornece nenhum feedback de que a tentativa de login está em andamento. O usuário fica aguardando sem saber se o sistema está funcionando, o que é uma experiência de usuário pobre e confusa.

**CURRENT STATE:**
No componente `client/src/pages/login.tsx`, a função `onSubmit` é chamada, mas não há uma gestão de estado para desabilitar o botão ou mostrar um indicador de carregamento enquanto a promessa de autenticação está sendo resolvida.

**EXPECTED (Estado Final de Sucesso):**
1.  **Feedback Visual Implementado:**
    * Quando o usuário clica no botão "Entrar", o botão deve ser imediatamente desabilitado (`disabled`).
    * O texto do botão deve ser substituído por um ícone de carregamento (spinner) e/ou um texto como "Entrando...".
2.  **Gestão de Estado Correta:**
    * Após a conclusão da tentativa de login (seja com sucesso ou erro), o botão deve retornar ao seu estado normal (ativo e com o texto "Entrar").
3.  **Prevenção de Cliques Duplos:** O estado `disabled` deve efetivamente prevenir que o usuário submeta o formulário múltiplas vezes.
4.  **Prova de Sucesso:** Você deve fornecer um GIF ou screenshot mostrando o botão no estado de `loading` (com spinner) após um clique.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localizar Componente Alvo:** O foco principal da implementação será no arquivo `client/src/pages/login.tsx`.
2.  **Analisar Estado do `react-hook-form`:** Investigue o hook `useForm`. O objeto `formState` contém uma propriedade `isSubmitting` que é `true` enquanto a função assíncrona `onSubmit` está em execução. Esta é a maneira preferencial de controlar o estado de `loading` em formulários que usam `react-hook-form`.
3.  **Refatorar o Botão:** Modifique o componente `Button` do `shadcn/ui` usado para a submissão.
    * Adicione a propriedade `disabled={formState.isSubmitting}`.
    * Implemente a lógica de renderização condicional dentro do botão: se `formState.isSubmitting` for `true`, mostre um ícone de `Loader2` (spinner); caso contrário, mostre o texto "Entrar".
4.  **Validar e Apresentar Evidência:** Teste o formulário. Clique em "Entrar" e observe o estado de carregamento do botão. Capture e apresente o GIF ou screenshot que demonstre a funcionalidade.
5.  **Verificação Final:** Execute o protocolo `7-CHECK FULL`.