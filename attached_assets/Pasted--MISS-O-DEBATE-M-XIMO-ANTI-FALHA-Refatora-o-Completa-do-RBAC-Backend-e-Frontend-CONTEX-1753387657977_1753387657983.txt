# MISSÃO: DEBATE MÁXIMO (ANTI-FALHA) - Refatoração Completa do RBAC (Backend e Frontend)

**CONTEXTO ESTRATÉGICO:**
Todas as tentativas de corrigir o nosso sistema de autorização (RBAC) falharam. A última tentativa revelou a causa raiz: nosso middleware não está a enriquecer a sessão do usuário com a sua `role` da tabela `profiles`, e o nosso frontend não está a ocultar elementos de UI com base na `role` do usuário.

**SUA TAREFA (ASSISTENTE):**
A sua tarefa é projetar uma solução **full-stack** definitiva para o nosso RBAC, cobrindo tanto a lógica de autorização no servidor quanto o controle de visibilidade na interface. Esta será a nossa **Interação 1 de 3**.

---
### **Interação 1: Proposta de Arquitetura RBAC Full-Stack**

Por favor, analise o problema e responda com a sua proposta para os seguintes pontos:

**1. Arquitetura do Backend (Middleware de Enriquecimento):**
* **Ação Proposta:** Proponha a implementação **exata e completa** para o nosso `jwtAuthMiddleware` (ou um novo middleware). O código deve seguir estes passos:
    a. Validar o token JWT do Supabase.
    b. Extrair o `id` do usuário autenticado.
    c. Fazer uma query à nossa tabela `profiles` para buscar o perfil completo do usuário (incluindo a `role`).
    d. Anexar o objeto de perfil completo (ex: `{ id, email, role, loja_id }`) a `req.user`.
    e. Lidar de forma graciosa com o caso de um usuário autenticado que (por algum erro) não tenha um perfil correspondente na nossa tabela.

**2. Arquitetura do Frontend (Controle de Visibilidade na UI):**
* **Ação Proposta:** Proponha uma estratégia robusta para implementar o controle de acesso na UI.
    * Devemos criar um **hook customizado** (ex: `useAuth()` ou `useUser()`) que retorne os dados do usuário logado, incluindo a sua `role`?
    * Como podemos usar este hook para renderizar condicionalmente elementos de navegação, como o botão "Usuários" no nosso componente `DashboardLayout`, para que ele seja visível **apenas** se a `role` do usuário for `ADMINISTRADOR`?

**3. Plano de Implementação (Micro-Passos para o Agente):**
* **Ação Proposta:** Decomponha a sua solução completa em **"micro-passos" atómicos** para o Agente executar. Priorize a correção do backend primeiro. (Ex: "Passo 1: Refatorar o `jwtAuthMiddleware`...", "Passo 2: Criar o hook `useAuth`...", "Passo 3: Aplicar a lógica condicional no `DashboardLayout`...", etc.).

---