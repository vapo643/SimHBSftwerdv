### Pacote de Ativação de Missão (PAM) V1.0 - Operação "Certificação de Produção" / Missão 2: Validação Assíncrona

* **Sumário da Missão (O Quê):** Desenvolver e executar um conjunto de testes de carga isolados para a nossa infraestrutura de filas (BullMQ/Redis), validando não apenas o processamento de *jobs* bem-sucedidos, mas também os mecanismos de resiliência (*retry*) e de tratamento de falhas (DLQ).
* **Intenção Estratégica (O Porquê):** Obter provas irrefutáveis de que o nosso sistema de processamento assíncrono, que é crítico para as operações financeiras (geração de CCBs, etc.), é robusto, fiável e se comporta como esperado em cenários de falha.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de QA especializado em sistemas distribuídos. A sua tarefa é criar cenários de teste que validem tanto o "caminho feliz" como os "caminhos infelizes" da nossa infraestrutura de filas.

---
### **DOUTRINA DE EXECUÇÃO OBRIGATÓRIA: PEO V2.0**
* **MODO DE OPERAÇÃO:** **MODO_EXECUÇÃO**.
* **PERSONA:** **"Executor de Elite"**.
* **VALIDAÇÃO (7-CHECK ADAPTATIVO):** O risco desta missão é **ALTO**. Execute o **"7-CHECK FULL"**.
---

**IMPLEMENTAR (Plano de Teste):**

**Passo 1: Desenvolver um Teste de Injeção de Jobs na `formalization-queue`**
1.1. Crie um novo script de teste (ex: `scripts/load-test/queue-stress.js`).
1.2. O script deve injetar 50 *jobs* na `formalization-queue`. Cada *job* deve ter um *payload* que simule um `ProposalApprovedEvent`.
1.3. Execute o script.

**Passo 2: Desenvolver um Teste de Falha e DLQ**
2.1. Crie um segundo script de teste ou modifique o existente.
2.2. Este script deve injetar um *job* na `formalization-queue` com um *payload* que você sabe que causará uma falha no `FormalizationWorker` (ex: um ID de proposta inválido que não será encontrado na base de dados).
2.3. O *job* deve ser configurado com uma política de `attempts: 2` para testar o mecanismo de *retry*.

**Passo 3: Monitorar e Validar a Execução**
3.1. **Durante e após** a execução de ambos os scripts, utilize o endpoint `GET /api/monitoring/queues/metrics` para monitorar o estado das filas.
3.2. **Validação do Caminho Feliz:** Confirme que os 50 *jobs* do Passo 1.2 foram processados com sucesso (o contador de `completed` deve aumentar) e meça a latência média de processamento.
3.3. **Validação do Caminho Infeliz:** Confirme que o *job* de falha do Passo 2.2 foi tentado 2 vezes (logs de *retry*) e depois movido para a `dead-letter-queue` (o contador `dlqSize` deve ser 1).

**Passo 4: Validação Final (Execução do 7-CHECK FULL)**
4.1. Apresente os *outputs* do endpoint de monitoramento que provam o processamento bem-sucedido e a transferência para a DLQ.
4.2. Execute o checklist completo do 7-CHECK FULL e gere o "Relatório de Execução V2 com Prova".

---
### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**
Apresente a lista exaustiva de TODAS as suas descobertas, métricas, riscos e recomendações.