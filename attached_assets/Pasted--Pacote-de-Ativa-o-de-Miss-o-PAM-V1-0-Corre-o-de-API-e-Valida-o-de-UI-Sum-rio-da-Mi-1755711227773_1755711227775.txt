### Pacote de Ativação de Missão (PAM) V1.0 (Correção de API e Validação de UI)

* **Sumário da Missão (O Quê):** Corrigir a resposta da API de busca por CPF para retornar um status `404 Not Found` quando um cliente não é encontrado e, em seguida, validar a funcionalidade de auto-preenchimento de ponta a ponta na interface do usuário.
* **Intenção Estratégica (O Porquê):** Garantir que a nossa API adere aos padrões RESTful corretos e validar que a nova funcionalidade de auto-preenchimento por CPF está a funcionar perfeitamente do ponto de vista do usuário final, completando assim a missão.
* **Histórico Relevante (Consulta Obrigatória):** A sua implementação anterior do endpoint `GET /api/clientes/cpf/:cpf` retorna incorretamente um `200 OK` com `{ exists: false }` em vez de um `404 Not Found`. O frontend (`ClientDataStep.tsx`) está à espera de consumir esta API.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de duas partes. Primeiro, uma correção cirúrgica no backend. Segundo, uma validação de Quality Assurance (QA) no frontend.

---

**IMPLEMENTAR:**
Correção da API de Busca e Validação Funcional da UI

**CURRENT STATE:**
A API de busca por CPF está funcional, mas não segue as melhores práticas de resposta HTTP para recursos não encontrados. A funcionalidade de auto-preenchimento na UI ainda não foi validada.

**EXPECTED (Estado Final de Sucesso):**

**Parte 1: Correção do Backend**
1.  O handler do endpoint `GET /api/clientes/cpf/:cpf` é modificado.
2.  A lógica que anteriormente retornava `{ exists: false }` é alterada para retornar `res.status(404).json({ message: 'Cliente não encontrado' })`, conforme o PAM original.

**Parte 2: Validação do Frontend**
3.  Uma verificação funcional completa é realizada na tela de "Nova Proposta".
4.  Ao inserir um CPF **existente**, os campos do formulário (nome, email, telefone, etc.) são auto-preenchidos corretamente.
5.  Ao inserir um CPF **não existente**, nenhum campo é preenchido e a UI permanece no seu estado normal, sem erros.
6.  Uma captura de tela é fornecida como prova do auto-preenchimento bem-sucedido.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Corrija a API Primeiro:** Localize o handler da rota `GET /api/clientes/cpf/:cpf` e ajuste a lógica de resposta para o caso de "cliente não encontrado", garantindo que ela retorne um status `404`.
2.  **Valide na UI:** Após corrigir a API, interaja com a interface de "Nova Proposta".
    * Use um CPF que você sabe que existe no banco de dados de teste e verifique se o auto-preenchimento ocorre.
    * Use um CPF заведомо inexistente (ex: "11111111111") e verifique se nada acontece.
3.  **Prova de Sucesso:** A sua prova final de sucesso para esta missão é a captura de tela mostrando os campos do formulário preenchidos automaticamente após a inserção de um CPF válido.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO. O risco principal é que a lógica do frontend não trate corretamente a resposta `404`.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o frontend já possui um tratamento de erro `catch` na sua chamada de API que irá lidar graciosamente com a resposta `404`."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. Esta missão é a validação final.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os ficheiros e funções exatas a serem modificados (backend) e verificados (frontend).
2.  Garantir que a nova lógica de resposta `404` está correta.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (corrigir a API, testar a UI e fornecer a prova visual).
7.  **Documentar Decisões Técnicas**.