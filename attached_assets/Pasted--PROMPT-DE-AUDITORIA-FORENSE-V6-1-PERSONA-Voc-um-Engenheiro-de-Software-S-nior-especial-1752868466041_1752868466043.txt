# PROMPT DE AUDITORIA FORENSE V6.1

**PERSONA:**
Você é um Engenheiro de Software Sênior especialista em React, TypeScript e na stack de desenvolvimento moderna (TanStack Query, React Hook Form, Zod). Sua missão é realizar uma auditoria completa e detalhada do código-fonte fornecido, focando em boas práticas, lógica, funcionalidade, UI/UX e possíveis vulnerabilidades.

**CÓDIGO-FONTE PARA ANÁLISE:**
```typescript
import React from 'react';
import { useRoute, Link } from 'wouter';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import DashboardLayout from '@/components/DashboardLayout';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import HistoricoComunicao from '@/components/analise/HistoricoComunicao';

const fetchProposta = async (id: string | undefined) => {
    if (!id) throw new Error("ID da proposta não fornecido.");
    const res = await fetch(`/api/propostas/${id}`);
    if (!res.ok) throw new Error('Proposta não encontrada');
    return res.json();
}

const updatePropostaStatus = async ({ id, status, observacao }: { id: string, status: string, observacao?: string }) => {
    const res = await fetch(`/api/propostas/${id}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status, observacao })
    });
    if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || 'Falha ao atualizar status');
    }
    return res.json();
}

const decisionSchema = z.object({
  status: z.enum(['Aprovada', 'Negada', 'Pendente com Observação']),
  observacao: z.string().optional(),
});

type DecisionFormData = z.infer<typeof decisionSchema>;

const AnaliseManualPage: React.FC = () => {
  const [match, params] = useRoute("/credito/analise/:id");
  const propostaId = params?.id;
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  const { data: proposta, isLoading, isError } = useQuery({
    queryKey: ['proposta', propostaId], 
    queryFn: () => fetchProposta(propostaId), 
    enabled: !!propostaId 
  });
  
  const { register, handleSubmit, control } = useForm<DecisionFormData>({
    resolver: zodResolver(decisionSchema),
  });

  const mutation = useMutation({
      mutationFn: updatePropostaStatus,
      onSuccess: () => {
          toast({ title: "Sucesso!", description: "O status da proposta foi atualizado." });
          queryClient.invalidateQueries({ queryKey: ['proposta', propostaId] });
          queryClient.invalidateQueries({ queryKey: ['proposta_logs', propostaId] });
      },
      onError: (error: Error) => {
          toast({ title: "Erro!", description: error.message, variant: "destructive" });
      }
  });

  const onSubmit = (data: DecisionFormData) => {
      if (!propostaId) return;
      mutation.mutate({ id: propostaId, ...data });
  };

  if (isLoading) return <DashboardLayout title="Análise Manual"><p className="p-6">Carregando proposta...</p></DashboardLayout>;
  if (isError || !proposta) return <DashboardLayout title="Erro"><p className="p-6">Proposta não encontrada. <Link to="/credito/fila" className="text-blue-500 hover:underline">Voltar para a fila.</Link></p></DashboardLayout>;

  return (
    <DashboardLayout title={`Análise Manual - Proposta #${proposta.id}`}>
      <div className="grid md:grid-cols-3 gap-6">
        <div className="md:col-span-2 space-y-6">
            <Card>
              <CardHeader><CardTitle>Detalhes da Proposta</CardTitle></CardHeader>
              <CardContent>
                <p><strong>Cliente:</strong> {proposta.clienteNome || 'N/A'}</p>
                <p><strong>CPF:</strong> {proposta.cpf || 'N/A'}</p>
                <p><strong>Valor Solicitado:</strong> {proposta.valorSolicitado || 'N/A'}</p>
                <p><strong>Prazo:</strong> {proposta.prazo || 'N/A'}</p>
                <p><strong>Score:</strong> {proposta.score || 'N/A'}</p>
                <p><strong>Parceiro:</strong> {proposta.parceiro || 'N/A'}</p>
                <p><strong>Status Atual:</strong> {proposta.status || 'N/A'}</p>
              </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle>Painel de Decisão</CardTitle></CardHeader>
                <CardContent>
                    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                        <div>
                            <Label>Decisão</Label>
                             <Controller 
                                name="status" 
                                control={control} 
                                render={({ field }) => (
                                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                                        <SelectTrigger><SelectValue placeholder="Selecione uma decisão..." /></SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="Aprovada">Aprovar Proposta</SelectItem>
                                            <SelectItem value="Negada">Negar Proposta</SelectItem>
                                            <SelectItem value="Pendente com Observação">Pendenciar</SelectItem>
                                        </SelectContent>
                                    </Select>
                                )} 
                            />
                        </div>
                        <div>
                            <Label htmlFor="observacao">Observações (obrigatório se pendenciar)</Label>
                            <Textarea id="observacao" {...register('observacao')} />
                        </div>
                        <Button type="submit" className="w-full" disabled={mutation.isPending}>
                            {mutation.isPending ? "Salvando..." : "Confirmar Decisão"}
                        </Button>
                    </form>
                </CardContent>
            </Card>
        </div>
        <div className="md:col-span-1">
            <HistoricoComunicao propostaId={propostaId} />
        </div>
      </div>
    </DashboardLayout>
  );
}

export default AnaliseManualPage;
```

**DIRETRIZES DE AUDITORIA (5 CAMADAS):**
Execute uma análise sequencial, abordando cada uma das seguintes camadas.

**Camada 1: Conformidade Estrutural e Boas Práticas**
1.  **Importações:** Verifique se há importações não utilizadas ou desnecessárias.
2.  **Estrutura do Componente:** Confirme se a estrutura do componente funcional e o uso de hooks seguem as regras do React.
3.  **Tipagem (TypeScript):** Avalie a corretude e a eficácia da tipagem. A inferência de tipo de `zod` para `DecisionFormData` está correta? Existem tipos `any` implícitos?
4.  **Legibilidade:** O código está limpo, bem formatado e fácil de entender?

**Camada 2: Integração Lógica e Fluxo de Dados**
1.  **`useQuery`:** A chave da query (`['proposta', propostaId]`) é ideal para o cache? A condição `enabled: !!propostaId` é uma guarda eficaz?
2.  **`useMutation`:** A invalidação de queries em `onSuccess` está correta? A query `['proposta_logs', propostaId]` é uma suposição lógica para o componente `HistoricoComunicao`?
3.  **`react-hook-form`:** A integração com o componente `Select` via `<Controller>` está implementada corretamente?
4.  **Funções de API:** As funções `fetchProposta` e `updatePropostaStatus` são robustas? O tratamento de erro (verificação de `res.ok` e parse do JSON de erro) é adequado?

**Camada 3: Renderização Visual e Experiência do Usuário (UI/UX)**
1.  **Estados da UI:** Avalie como os estados de `isLoading`, `isError` e `mutation.isPending` são comunicados ao usuário. São claros e eficazes?
2.  **Responsividade:** A estrutura de grid (`md:grid-cols-3`) é adequada? Como a interface se comportaria em telas menores (mobile)?
3.  **Feedback de Ação:** O uso de `toast` para sucesso e erro é uma boa prática de feedback? O estado desabilitado do botão previne submissões duplicadas de forma eficaz?

**Camada 4: Validação Funcional e Casos de Borda**
1.  **Lógica de Validação:** Analise o `decisionSchema` do Zod. O campo `observacao` é `z.string().optional()`. No entanto, a `Label` diz: "Observações (obrigatório se pendenciar)". **Isso representa uma inconsistência crítica entre a UI e a lógica de validação.** Investigue e descreva a falha.
2.  **Fluxo de Submissão:** O que acontece se `propostaId` for nulo e o usuário tentar submeter? A guarda `if (!propostaId) return;` é suficiente?
3.  **Coerência de Estado:** Após uma mutação bem-sucedida, a invalidação da query garante que a UI (ex: `proposta.status`) será atualizada corretamente?

**Camada 5: Geração do Relatório Final**
Sintetize todas as suas descobertas no template Markdown abaixo. Seja conciso, mas detalhado, e forneça recomendações acionáveis.

**TEMPLATE DO RELATÓRIO DE AUDITORIA:**
```markdown
## Relatório de Auditoria do Assistente Replit

### Avaliação Geral
Uma breve avaliação (1-2 frases) da qualidade geral, arquitetura e robustez do código.

### Camada 1: Conformidade Estrutural
- **Importações:** (Status e observações)
- **Estrutura:** (Status e observações)
- **Tipagem:** (Status e observações)
- **Legibilidade:** (Status e observações)

### Camada 2: Integração Lógica
- **`useQuery`:** (Status e observações)
- **`useMutation`:** (Status e observações)
- **`react-hook-form`:** (Status e observações)
- **Funções de API:** (Status e observações)

### Camada 3: Renderização Visual e UI/UX
- **Estados da UI:** (Status e observações)
- **Responsividade:** (Status e observações)
- **Feedback de Ação:** (Status e observações)

### Camada 4: Validação Funcional
- **Inconsistência de Validação (Observação):** (Análise detalhada da falha entre a Label e o Zod schema)
- **Fluxo de Submissão:** (Status e observações)
- **Coerência de Estado:** (Status e observações)

### Recomendações de Refinamento
1.  **Correção Crítica:** (Ação recomendada para corrigir a validação da observação).
2.  **Melhoria:** (Sugestão para aprimorar o código, se houver).
3.  **Opcional:** (Outra sugestão de melhoria).
