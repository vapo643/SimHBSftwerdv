### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Refatorar todos os pontos de modificação de status no backend para utilizar o novo `statusFsmService`, implementando a lógica da FSM em toda a aplicação.
* **Intenção Estratégica (O Porquê):** Ativar a camada de segurança e validação da FSM. Ao final desta missão, será arquiteturalmente impossível para o sistema realizar uma transição de estado de negócio inválida, eliminando uma classe inteira de bugs e inconsistências de dados.
* **Histórico Relevante (Consulta Obrigatória):** A Missão 1.2 identificou os arquivos `server/routes.ts` e `server/storage.ts` como os principais locais que chamam diretamente a função `updateStatusWithContext`. A Missão 1.4 criou o serviço `statusFsmService` com a função `transitionTo` que deve substituir essas chamadas diretas.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de refatoração cirúrgica. Estamos substituindo o "encanamento" antigo pelo novo. As chamadas que antes iam direto para a camada de escrita (`updateStatusWithContext`) agora devem passar primeiro pelo "gatekeeper" de validação (`statusFsmService.transitionTo`).
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A substituição pode falhar em capturar todos os parâmetros necessários ou em tratar os novos erros.
    * **Contramedida:** O prompt exige a implementação de tratamento de erro específico para a `InvalidTransitionError` e a passagem de todos os parâmetros relevantes.

---

**IMPLEMENTAR:**
Integração do Serviço FSM nos Controllers e Serviços

**CURRENT STATE:**
Diversos pontos no código (`server/routes.ts`, `server/storage.ts`) chamam a função `updateStatusWithContext` diretamente, sem nenhuma validação da validade da transição de estado.

**EXPECTED (Estado Final de Sucesso):**
1.  Todas as chamadas à função `updateStatusWithContext` nos arquivos de backend são localizadas e substituídas por chamadas à nova função `statusFsmService.transitionTo`.
2.  Cada local de chamada é envolvido em um bloco `try/catch` para tratar adequadamente a exceção customizada `InvalidTransitionError`.
3.  Quando uma `InvalidTransitionError` é capturada, a API deve retornar uma resposta de erro HTTP `409 Conflict` com uma mensagem clara para o cliente (ex: "Transição de status inválida: não é possível mover de 'APROVADO' para 'REJEITADO'.").
4.  O restante do código deve permanecer funcional, sem regressões.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Foco da Refatoração:** Concentre-se nos arquivos identificados na Missão 1.2, principalmente `server/routes.ts` e `server/storage.ts`.
2.  **Importação:** Em cada arquivo modificado, importe a função `transitionTo` do `server/services/statusFsmService.ts`.
3.  **Substituição:** Localize cada chamada a `updateStatusWithContext` e substitua-a pela chamada `await transitionTo(...)`, garantindo que todos os parâmetros (`propostaId`, `novoStatus`, `userId`, `contexto`, `observacoes`) sejam passados corretamente.
4.  **Tratamento de Erro Mandatório:** Implemente o bloco `try/catch` em torno de cada nova chamada. Dentro do `catch`, verifique se o erro é uma `instanceof InvalidTransitionError`. Se for, retorne `res.status(409).json({ error: error.message })`. Caso contrário, relance o erro ou retorne um erro 500 genérico.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e descrever riscos, como o impacto da nova lógica de erro nos clientes da API]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o status code 409 Conflict é o mais apropriado para uma transição de estado de negócio inválida."]
* **VALIDAÇÃO PENDENTE:** [Ex: "A camada de frontend precisará ser atualizada para tratar os novos erros 409 e fornecer feedback adequado ao usuário."]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas pela refatoração.
2.  Garantir importações e tipos corretos para o novo serviço FSM.
3.  Executar `get_latest_lsp_diagnostics` e corrigir TODOS os erros.
4.  **Declarar Nível de Confiança (0-100%)** na integração.
5.  **Categorizar Riscos Descobertos**.
6.  Realizar teste funcional completo, focando em testar tanto transições válidas quanto inválidas para garantir que os erros 409 sejam retornados corretamente.
7.  **Documentar Decisões Técnicas** como a escolha do status code HTTP para erros de transição.