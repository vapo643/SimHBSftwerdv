Positivo. Diretriz recebida. Antes de executarmos o novo "Prompt Mestre Coreografado", vamos submetê-lo ao escrutínio do Assistente.

Esta é a aplicação mais rigorosa do nosso "Protocolo de Debate Técnico": não apenas debater o "o quê", mas também o "como". A sua abordagem garante que a nossa própria metodologia seja à prova de falhas.

A seguir, a missão para iniciarmos este debate profundo com o Assistente.

PROMPT DE DEBATE ESTRATÉGICO (PARA O ASSISTENTE)
Sua Diretriz: Submeta o seguinte prompt de missão ao Assistente.

Markdown

# MISSÃO: DEBATE TÉCNICO AVANÇADO - Validação da Nova Doutrina de "Prompt Coreografado"

**CONTEXTO ESTRATÉGICO:**
Estamos num ciclo de falha-rollback. As missões de "bazuca" para o Agente, mesmo com roadmaps detalhados, têm falhado devido a "Context Overflow", onde o Agente perde o rasto de dependências e executa passos de forma incorreta ou incompleta. A minha hipótese como Orquestrador (GEM 02) é que o Agente precisa de um nível de instrução mais granular e processual, não apenas um roadmap de alto nível.

Com base nisso, projetei um novo tipo de prompt, o "Prompt Mestre Coreografado".

**SUA TAREFA (ASSISTENTE):**
A sua tarefa é atuar como um Especialista em Execução de IA e analisar a minha proposta para este novo tipo de prompt. Você deve avaliar se esta nova doutrina irá, de facto, resolver o problema de falha de execução do Agente. Esta será a nossa **Interação 1 de 3**.

---
### **PROPOSTA DE "PROMPT MESTRE COREOGRAFADO" (SOB ANÁLISE)**
```markdown
# MISSÃO DE IMPLEMENTAÇÃO COREOGRAFADA: Arquitetura RBAC Definitiva

**CONTEXTO:** Este é um prompt "coreografado". Execute cada passo de forma atómica e sequencial. Não prossiga para o próximo passo até que o anterior esteja completo e validado.

---
**# PASSO 1 de 4: Refatoração do Middleware de Backend**
* **AÇÃO:** Modifique **APENAS** o ficheiro `/server/lib/jwt-auth-middleware.ts`...
* **VALIDAÇÃO IMEDIATA:** Após aplicar esta mudança, reinicie o servidor. Confirme que ele inicia sem erros. **NÃO PROSSIGA se houver erros.**
---
**# PASSO 2 de 4: Criação do Contexto de Autenticação no Frontend**
* **AÇÃO:** Crie **APENAS** o ficheiro `/client/src/contexts/AuthContext.tsx`...
* **VALIDAÇÃO IMEDIATA:** Confirme que o ficheiro foi criado e não apresenta erros de compilação. **NÃO PROSSIGA se houver erros.**
---
**# PASSO 3 de 4: Integração do Provedor de Contexto**
* **AÇÃO:** Modifique **APENAS** o ficheiro `client/src/App.tsx`...
* **VALIDAÇÃO IMEDIATA:** Reinicie o servidor. Confirme que a aplicação ainda carrega sem erros.
---
**# PASSO 4 de 4: Aplicação do Controle de Visibilidade na UI**
* **AÇÃO:** Modifique **APENAS** o ficheiro `/client/src/components/DashboardLayout.tsx`...
* **VALIDAÇÃO FINAL:** Reinicie o servidor. Verifique o resultado.
---
Interação 1: Sua Análise Crítica sobre a Nova Doutrina de Prompt
Por favor, analise a proposta de prompt "coreografado" acima e responda com a sua avaliação técnica para os seguintes pontos:

1. Análise da Estratégia:

A abordagem de decompor a missão em "micro-passos" atómicos, cada um com uma instrução de validação explícita e um comando implícito de "PARE", é uma estratégia eficaz para mitigar o "Context Overflow" do Agente? Quais são os pontos fortes e fracos desta abordagem?

2. Análise de Risco:

Você identifica algum risco nesta nova doutrina de prompt? Por exemplo, o Agente poderia ficar confuso com os comandos de validação ou a granularidade excessiva poderia causar outros tipos de falhas?

3. Sugestão de Aprimoramento:

Você tem alguma sugestão para aprimorar ainda mais esta estrutura de prompt "coreografado"? Por exemplo, deveríamos adicionar um passo de "reportar o resultado da validação" após cada etapa?


A opinião do Assistente irá selar a nossa nova doutrina de execução