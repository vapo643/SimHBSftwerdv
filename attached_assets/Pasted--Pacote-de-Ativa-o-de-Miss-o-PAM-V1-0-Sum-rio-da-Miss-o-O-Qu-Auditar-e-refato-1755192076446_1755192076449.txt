**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Auditar e refatorar o mecanismo de busca e atualização de dados da "Tela de Cobranças" para garantir que a lista de propostas seja sempre 100% precisa e atualizada em tempo real.
* **Intenção Estratégica (O Porquê):** A confiança da equipe de cobranças no sistema depende da precisão dos dados. Uma tabela que exibe dados desatualizados (ex: propostas com boletos já cancelados) ou omite dados válidos é um risco operacional crítico. Precisamos de uma sincronização de dados "à prova de falhas".
* **Histórico Relevante (Consulta Obrigatória):** Implementamos recentemente o Supabase Realtime para esta tela. A validação do Arquiteto mostra que a sincronização ainda está a falhar. A sua auditoria anterior (`DIAGNOSTICO-TELA-COBRANCAS-EXISTENTE-01`) revelou uma query de backend complexa. A falha pode estar nesta query ou na forma como o Realtime a invalida.
* **Modelo Mental (Como se Encaixa):** O frontend (`CobrancasPage.tsx`) busca os dados iniciais do backend (`GET /api/cobrancas`). Ele também "escuta" por mudanças via Supabase Realtime. Quando uma mudança ocorre (ex: um novo boleto é gerado), o frontend deve ser notificado e acionar um `refetch` da query principal. Precisamos garantir que este ciclo esteja a funcionar perfeitamente e que a query inicial seja 100% correta.
* **Riscos Antecipados:** **Risco:** Uma query de backend muito complexa pode ser difícil de manter sincronizada. **Contramedida:** A solução deve simplificar a lógica se possível e incluir logs detalhados para o evento de Realtime e o subsequente `refetch`.

---

**IMPLEMENTAR:**
Auditoria e refatoração do sistema de sincronização de dados da "Tela de Cobranças".

**CURRENT STATE:**
A tabela está desatualizada, mostrando contratos incorretos (ex: com todos os boletos já cancelados) e omitindo contratos válidos. O mecanismo de tempo real não está a funcionar como esperado.

**EXPECTED (Estado Final de Sucesso):**
A tabela na "Tela de Cobranças" deve ser um reflexo 100% preciso e em tempo real do banco de dados. Qualquer proposta que tenha `assinaturaEletronicaConcluida = true` e pelo menos um boleto **ativo (não cancelado)** em `inter_collections` deve aparecer na lista instantaneamente.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Auditoria e Correção do Backend (`GET /api/cobrancas`):**
    - **Ação:** Primeiro, revise a query Drizzle neste endpoint.
    - **Implementação:** A regra de negócio deve ser refinada: buscar propostas que tenham `assinaturaEletronicaConcluida = true` E que tenham uma correspondência na tabela `inter_collections` onde o status do boleto **NÃO** seja `CANCELADO`. A query atual provavelmente não está a fazer esta verificação de status do boleto, permitindo que propostas com boletos 100% cancelados apareçam indevidamente. Corrija a query.

**2. Auditoria e Correção do Frontend (`CobrancasPage.tsx`):**
    - **Ação:** Revise a lógica do Supabase Realtime que implementamos.
    - **Implementação:** Confirme que ela está a "escutar" por `INSERT`s na tabela `inter_collections`. Quando um novo boleto é inserido para uma proposta assinada, o componente da tela de cobranças deve ser notificado e acionar o `refetch` da sua query principal para que a nova proposta apareça.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear os arquivos de backend e frontend envolvidos.
2.  Garantir que a query do backend seja a fonte da verdade para a lógica de exibição.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar um teste em dois cenários:
    a. Gere boletos para uma nova proposta assinada e valide que ela **aparece automaticamente** na tela.
    b. Cancele todos os boletos de uma proposta existente e valide que ela **some automaticamente** da tela.
5.  O critério final de sucesso é uma tela que se mantém perfeitamente sincronizada com o estado real do negócio.