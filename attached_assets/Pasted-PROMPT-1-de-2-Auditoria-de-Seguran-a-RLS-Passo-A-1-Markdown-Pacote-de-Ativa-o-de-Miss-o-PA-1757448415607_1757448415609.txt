PROMPT 1 de 2: Auditoria de Segurança RLS (Passo A.1)
Markdown

### Pacote de Ativação de Missão (PAM) V1.0 - Padrão PACN V1.0

* **Sumário da Missão:** Validar a conformidade da regra de negócio "Isolamento de Dados do Atendente" na política de segurança da tabela `propostas`.

* **Cenário de Negócio (O "Caso de Teste"):** Um usuário com a role `ATENDENTE` (ex: `atendente_loja_a@simpix.com`) faz uma requisição para listar propostas (`GET /api/propostas`). A regra de negócio dita que ele deve ver **apenas e exclusivamente** as propostas criadas por ele mesmo (onde `propostas.criado_por` ou um campo similar de autoria corresponda ao seu `auth.uid()`). Ele **NUNCA** deve visualizar propostas de outros atendentes, mesmo que pertençam à mesma loja.

* **Vetor de Ataque / Ponto de Falha (O "Risco"):** O risco crítico é que a política de Row Level Security (RLS) esteja filtrando incorretamente os dados, possivelmente apenas por `loja_id` ou outro critério amplo. Isso permitiria que um atendente visualizasse dados confidenciais de propostas de outros colegas, resultando em uma grave violação de dados em produção.

* **Evidência de Conformidade Requerida (A "Prova Irrefutável"):**
    1.  Localize a política de Row Level Security (RLS) ativa para a tabela `propostas` que se aplica à role `ATENDENTE`.
    2.  Apresente o trecho de código SQL exato da cláusula `USING` dessa política.
    3.  **Explique, em detalhe, como a lógica nesta cláusula SQL utiliza o `auth.uid()` (ou um mecanismo JWT equivalente) para garantir o filtro pelo ID do usuário individual, provando inequivocamente que o vetor de ataque de "vazamento de dados intra-loja" está mitigado. Se a lógica não garantir isso, declare a falha explicitamente.**

PROMPT 2 de 2: Mapeamento de Fluxo de Dados de Produtos (Passo B.1)
Markdown

### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão:** Mapear o fluxo de dados completo, do frontend ao backend, responsável por carregar a lista de produtos na etapa "Condição de Empréstimo" do formulário de criação de proposta.

* **Intenção Estratégica (O Porquê):** O fluxo de criação de propostas está quebrado em produção. Os atendentes não conseguem selecionar um produto pois a lista não é carregada, impedindo a principal função de negócio do sistema. Precisamos de um mapa exato da trilha de dados para identificar o ponto de falha.

* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A lógica pode estar espalhada por múltiplos componentes ou hooks, dificultando o rastreamento.
    * **Contramedida:** Inicie a análise pelo arquivo da página principal (`/client/src/pages/propostas/nova.tsx` ou `editar.tsx`) e siga as importações e chamadas de função a partir do componente da etapa "Condição de Empréstimo".

* **Roadmap de Rastreamento (Constraints):**
    1.  **Identifique o Componente Principal:** Comece no arquivo da página de criação/edição de proposta e localize o componente React responsável pela renderização da etapa "Condição de Empréstimo". Aponte o nome do arquivo e do componente.
    2.  **Localize a Chamada de Dados:** Dentro desse componente, identifique o hook (provavelmente `useQuery` do TanStack Query) que é acionado para buscar a lista de produtos.
    3.  **Extraia a Chave da Query e a Função de Fetch:** Apresente a `queryKey` exata e o nome da função de `fetch` utilizada por este hook.
    4.  **Mapeie para o Endpoint da API:** Navegue até a função de `fetch` (provavelmente em `/client/src/lib/apiClient.ts`) e identifique o endpoint exato da API (ex: `GET /api/produtos`) que é consumido para obter a lista de produtos.
    5.  **Apresente o Relatório Final:** Forneça um relatório claro listando os artefatos encontrados em cada passo (Nome do Componente -> Hook -> Query Key -> Função de Fetch -> Endpoint da API).
