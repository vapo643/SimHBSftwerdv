### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria de Estado Atual - Nova Proposta)

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense completa do fluxo de "Nova Proposta" para mapear o estado atual do código-fonte (Frontend, Backend, Banco de Dados) relacionado aos novos requisitos de negócio.
* **Intenção Estratégica (O Porquê):** Coletar 100% da inteligência de campo necessária para planejar e arquitetar as novas funcionalidades e regras de negócio com precisão cirúrgica, evitando retrabalho e regressões em uma área sensível do sistema.
* **Histórico Relevante (Consulta Obrigatória):** As missões anteriores refatoraram a estrutura de pastas e a lógica de status. Esta auditoria deve operar sobre a nova arquitetura modular.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de reconhecimento puro (read-only). O Agente deve atuar como um analista de sistemas, extraindo e relatando trechos de código e definições de schema sem realizar qualquer modificação.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O Agente pode não encontrar todos os trechos de código relevantes se a lógica estiver fragmentada.
    * **Contramedida:** O prompt especifica os arquivos e domínios exatos a serem investigados, guiando a busca do Agente.

---

**IMPLEMENTAR:**
Relatório de Auditoria de Estado Atual - Nova Proposta

**CURRENT STATE:**
A funcionalidade de "Nova Proposta" existe, mas precisa ser expandida para incluir novos campos, regras de validação, permissões e lógica de negócio. O estado atual exato dessas áreas precisa ser mapeado.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria detalhado em formato Markdown, dividido em 5 seções, uma para cada requisito. O relatório deve conter trechos de código e definições de schema para cada ponto.

---

**CONSTRAINTS (Roadmap de Auditoria):**

**1. Análise: Campo Dados Bancários**
   * **Banco de Dados:** Apresente a definição Drizzle schema para as tabelas `clientes` e `contas_bancarias_clientes`.
   * **Frontend:** Localize e apresente o código JSX do componente React que renderiza o formulário de dados bancários na tela de "Nova Proposta".

**2. Análise: Campo Referências**
   * **Banco de Dados:** Procure por uma tabela `referencias` ou similar. Apresente a sua definição Drizzle schema. Se não existir, declare "Tabela de Referências não encontrada".
   * **Frontend:** Localize e apresente o código JSX do componente do formulário de referências. Se não existir, declare "Componente de Referências não encontrado".

**3. Análise: Campo Dados da Empresa**
   * **Banco de Dados:** Inspecione a tabela `clientes`. Apresente os campos do schema que atualmente armazenam informações de trabalho/empregador.
   * **Frontend:** Localize e apresente o código JSX do componente do formulário que captura os dados do empregador do cliente.

**4. Análise: Acesso do Analista para Anexar Documentos**
   * **Backend:** Localize a rota da API responsável pelo upload de documentos de proposta. Apresente a definição da rota, incluindo o middleware `requireRole` utilizado.
   * **Frontend:** Localize o componente de upload de documentos na interface e apresente o código que controla sua visibilidade ou estado (habilitado/desabilitado) com base na role do usuário.

**5. Análise: Regra de Pré-Aprovação**
   * **Backend:** Inspecione o serviço `proposalService.ts` (ou similar). Procure por qualquer lógica existente que analise a renda do cliente ou calcule percentagens de comprometimento. Apresente qualquer trecho de código relevante. Se nada for encontrado, declare "Nenhuma lógica de pré-aprovação de renda encontrada".
   * **Banco de Dados:** Apresente os campos do Drizzle schema (provavelmente na tabela `clientes` ou `propostas`) que armazenam os valores de "renda" e "dívidas" ou "compromissos financeiros" do cliente.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100% de confiança na COMPLETUDE da auditoria]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a lógica de negócio principal reside nos `services` e a UI nos `components`."]
* **VALIDAÇÃO PENDENTE:** [O relatório de auditoria será a base para o planejamento da missão de implementação.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (apenas leitura).
2.  Garantir que os trechos de código e schemas estão corretos e completos.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)** na completude da auditoria.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do relatório gerado para precisão).
7.  **Documentar Decisões Técnicas** e os critérios usados na busca.