### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Criar e executar um script de migração de dados único (one-off) para definir um valor de TAC padrão em todos os produtos legados que atualmente não possuem esta configuração.
* **Intenção Estratégica (O Porquê):** Garantir a retrocompatibilidade e a estabilidade do sistema. Ao definir um valor padrão seguro para os produtos antigos, evitamos erros de `null pointer` ou cálculos incorretos na nova lógica do `TacCalculationService` e garantimos um comportamento consistente em toda a base de produtos.
* **Histórico Relevante (Consulta Obrigatória):** O nosso roadmap de planejamento definiu a necessidade de uma migração de dados para produtos existentes, com um valor padrão sugerido de R$ 50,00 e tipo 'fixo'.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de manutenção de dados. O Agente irá criar e executar um script que realiza uma operação de `UPDATE` em massa no banco de dados, focada em um subconjunto específico de registros (aqueles com `tacValor` nulo).
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O script pode acidentalmente atualizar produtos que já possuem uma configuração de TAC.
    * **Contramedida:** O prompt exige uma cláusula `WHERE` estrita (`isNull(produtos.tacValor)`) para garantir que apenas os registros legados e nulos sejam afetados.

---

**IMPLEMENTAR:**
Script de Migração de Dados para Produtos Legados

**CURRENT STATE:**
Registros na tabela `produtos` que foram criados antes desta missão podem ter o valor da coluna `tacValor` como `NULL`, o que pode causar comportamento inesperado na nova lógica de cálculo de TAC.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo script, `scripts/migrate-legacy-products-tac.ts`, é criado.
2.  O script utiliza o Drizzle ORM para executar uma operação de `UPDATE` na tabela `produtos`.
3.  A operação define `tacValor` como `50.00` e `tacTipo` como `'fixo'` **apenas** para os registros onde `tacValor` é atualmente `NULL`.
4.  O script é executado com sucesso.
5.  O script imprime no console o número de produtos que foram atualizados.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Script de Migração:** Crie um novo arquivo em `scripts/migrate-legacy-products-tac.ts`.
2.  **Implemente a Query Drizzle:** Utilize o Drizzle para construir a query de `UPDATE`. A lógica deve ser semelhante a:
    ```typescript
    const updatedProducts = await db.update(produtos)
      .set({
        tacValor: '50.00',
        tacTipo: 'fixo'
      })
      .where(isNull(produtos.tacValor))
      .returning({ id: produtos.id });
    ```
3.  **Execute e Reporte:** O script deve ser autoexecutável. Ao final, ele deve imprimir uma mensagem no console, como: `console.log(\`Migração concluída. ${updatedProducts.length} produtos legados foram atualizados com a TAC padrão.\`);`
4.  **Validação Final Mandatória:** A sua prova de sucesso é a execução do script e o log do console mostrando o resultado da operação.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o valor padrão de R$ 50,00 e tipo 'fixo' é um fallback seguro e apropriado para todos os produtos legados."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela execução bem-sucedida do script.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (criação do novo script).
2.  Garantir que a query Drizzle de `UPDATE` com a cláusula `WHERE` está correta.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar o script e reportar o output do console).
7.  **Documentar Decisões Técnicas**.