### Pacote de Ativação de Missão (PAM) V1.0 (Hotfix de Contexto RLS nos Testes)

* **Sumário da Missão (O Quê):** Diagnosticar e corrigir a causa-raiz da falha de autorização (`403 Forbidden`) nos testes de integração subsequentes, garantindo que o contexto RLS seja corretamente aplicado para cada teste de forma isolada.
* **Intenção Estratégica (O Porquê):** Alcançar uma taxa de sucesso de 100% na nossa suíte de testes de integração, completando a criação de uma rede de segurança confiável e repetível para a nossa nova arquitetura DDD.
* **Histórico Relevante (Consulta Obrigatória):** A sua missão anterior revelou que, embora o setup do banco de dados e a autenticação funcionem para o primeiro teste, o contexto de autorização RLS não é mantido ou é corrompido para os testes seguintes no mesmo arquivo.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Testes Sênior a depurar um problema de estado entre testes. A sua tarefa é investigar como o `vitest` e o nosso `setup` interagem e garantir que cada teste (`it(...)`) seja executado num "universo" completamente isolado.

---

**IMPLEMENTAR:**
Correção do Isolamento de Contexto RLS entre Testes

**CURRENT STATE:**
Na suíte `tests/integration/proposal-api.test.ts`, o primeiro teste passa, mas os testes subsequentes falham com um erro `403 Forbidden`, indicando que o contexto RLS do usuário de teste está a ser perdido.

**EXPECTED (Estado Final de Sucesso):**
1.  **Análise de Causa Raiz:** Primeiro, investigue e declare a causa exata do problema. A hipótese principal é que a autenticação e o `setup` estão a ser feitos uma única vez (`beforeAll`) e o estado não está a ser corretamente restabelecido antes de cada teste.
2.  **Refatoração da Suíte de Testes:** Modifique a estrutura da suíte de testes `proposal-api.test.ts`. A solução provável é mover a lógica de criação de usuário, autenticação e obtenção do token para dentro de um hook `beforeEach`, garantindo que um novo contexto limpo seja criado **antes de cada teste individual**.
3.  **Validação Final Irrefutável:** A execução do comando `npx vitest run tests/integration/proposal-api.test.ts` agora resulta na passagem de **TODOS** os testes, provando que o bloqueio de autorização foi resolvido e que os testes são verdadeiramente independentes.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Isolamento por Teste:** A sua principal diretriz é garantir o isolamento. A lógica de `setup` e autenticação deve ser executada para cada teste (`it`), não uma vez para a suíte inteira (`describe`). Utilize o hook `beforeEach`.
2.  **Validação Final Mandatória:** A prova de sucesso é o output do `vitest` a mostrar **100%** dos testes da suíte a passar.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que mover a lógica de setup para `beforeEach` é a solução padrão do `vitest` para o isolamento de estado entre testes."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela passagem de 100% dos testes de integração.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os ficheiros e hooks a serem refatorados.
2.  Garantir que a nova estrutura com `beforeEach` está correta.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a suíte de testes completa e garantir que todos passem).
7.  **Documentar Decisões Técnicas**.