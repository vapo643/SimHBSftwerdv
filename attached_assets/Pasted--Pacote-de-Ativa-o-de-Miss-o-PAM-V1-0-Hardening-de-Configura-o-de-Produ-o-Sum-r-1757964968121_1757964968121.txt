### **Pacote de Ativa√ß√£o de Miss√£o (PAM) V1.0 - Hardening de Configura√ß√£o de Produ√ß√£o**

* **Sum√°rio da Miss√£o (O Qu√™):** Implementar um "health check" de auto-valida√ß√£o no arranque do servidor que verifica a integridade da `SUPABASE_JWT_SECRET`. Se o segredo for inv√°lido, a aplica√ß√£o deve falhar imediatamente (`fail-fast`) e recusar-se a iniciar, prevenindo um deploy defeituoso.
* **Inten√ß√£o Estrat√©gica (O Porqu√™):** Transformar uma falha silenciosa de configura√ß√£o (que s√≥ se manifesta em runtime quando o Redis est√° offline) num erro expl√≠cito e ruidoso no momento do deploy. Isto protege a produ√ß√£o de ser paralisada por uma dessincroniza√ß√£o de segredos.
* **Modelo Mental (Como se Encaixa):** Modificaremos o ficheiro `/server/lib/config.ts`. A fun√ß√£o `getJwtSecret()` ser√° aprimorada para n√£o apenas verificar a exist√™ncia e o comprimento do segredo, mas tamb√©m para tentar us√°-lo para assinar e verificar um payload de teste. Se a verifica√ß√£o falhar, significa que o segredo est√° corrompido ou √© inv√°lido, e o processo ser√° encerrado.

---

**IMPLEMENTAR:**
Plano de Blindagem Arquitetural para a Valida√ß√£o da `SUPABASE_JWT_SECRET`.

**CURRENT STATE:**
A aplica√ß√£o inicia mesmo com uma `SUPABASE_JWT_SECRET` inv√°lida. O erro s√≥ ocorre em runtime, sob a condi√ß√£o espec√≠fica de o Redis estar offline, causando uma paragem total do sistema.

**EXPECTED (Estado Final de Sucesso):**
1.  Se a `SUPABASE_JWT_SECRET` no ambiente for inv√°lida, a aplica√ß√£o **deve recusar-se a iniciar**.
2.  O log de arranque deve apresentar uma mensagem de erro **FATAL e inequ√≠voca**, explicando que a valida√ß√£o do segredo JWT falhou e que o deploy foi abortado para proteger o sistema.
3.  Se a `SUPABASE_JWT_SECRET` for v√°lida, a aplica√ß√£o deve iniciar normalmente.

**CONSTRAINTS (Roadmap de Implementa√ß√£o Faseado):**

**Passo 1: [Refatora√ß√£o] Aprimorar a Fun√ß√£o `getJwtSecret`**
1.  Abra o ficheiro `/server/lib/config.ts`.
2.  Importe a biblioteca `jsonwebtoken` no topo do ficheiro:
    ```typescript
    import jwt from 'jsonwebtoken';
    ```
3.  Modifique a fun√ß√£o `getJwtSecret()` para incluir um bloco de auto-valida√ß√£o antes do `return`.
    * **DEPOIS** da verifica√ß√£o de comprimento (`secret.length < 20`), adicione o seguinte bloco `try/catch`:

    ```typescript
    // ... ap√≥s a verifica√ß√£o de comprimento
    try {
      const payload = { test: 'self-validation' };
      const token = jwt.sign(payload, secret);
      jwt.verify(token, secret);
      console.log(`[CONFIG] ‚úÖ Auto-valida√ß√£o do Segredo JWT bem-sucedida.`);
    } catch (e) {
      console.error('üö® FATAL ERROR (OPERA√á√ÉO PHOENIX): Falha na auto-valida√ß√£o da SUPABASE_JWT_SECRET.');
      console.error('O segredo JWT configurado √© inv√°lido ou est√° corrompido.');
      if (process.env.NODE_ENV === 'production') {
          console.error('üö® Encerrando aplica√ß√£o para prevenir falhas de seguran√ßa.');
          process.exit(1);
      }
      throw new Error('Falha na auto-valida√ß√£o do segredo JWT.');
    }
    // ... antes do return secret;
    ```

**Passo 2: [Valida√ß√£o] Verifica√ß√£o Final de Integridade**
1.  Execute `get_latest_lsp_diagnostics` para garantir que n√£o h√° erros de sintaxe.
2.  Declare o seu n√≠vel de confian√ßa e quaisquer riscos identificados.

---

**DECLARA√á√ÉO DE INCERTEZA (OBRIGAT√ìRIO):**

* **CONFIAN√áA NA IMPLEMENTA√á√ÉO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/M√âDIO/ALTO/CR√çTICO e uma breve descri√ß√£o]
* **DECIS√ïES T√âCNICAS ASSUMIDAS:** [Listar decis√µes tomadas que podem ter implica√ß√µes futuras]
* **VALIDA√á√ÉO PENDENTE:** [Listar a√ß√µes que o Orquestrador (GEM 02) ou o QA (GEM 03) devem validar]

---

**PROTOCOLO OBRIGAT√ìRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e fun√ß√µes exatas afetadas.
2.  Garantir importa√ß√µes e tipos corretos.
3.  Executar `get_latest_lsp_diagnostics` e corrigir **TODOS** os erros.
4.  **Declarar N√≠vel de Confian√ßa (0-100%)** na implementa√ß√£o.
5.  **Categorizar Riscos Descobertos** (BAIXO/M√âDIO/ALTO/CR√çTICO).
6.  Realizar teste funcional completo do arranque do servidor.
7.  **Documentar Decis√µes T√©cnicas** assumidas (ex: "Adicionado health check de auto-valida√ß√£o para `SUPABASE_JWT_SECRET` para implementar uma estrat√©gia de 'fail-fast'.").