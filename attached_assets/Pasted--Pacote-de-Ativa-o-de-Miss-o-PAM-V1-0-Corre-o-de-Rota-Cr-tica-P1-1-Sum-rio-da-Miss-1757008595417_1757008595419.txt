### **Pacote de Ativação de Missão (PAM) V1.0 - Correção de Rota Crítica P1.1**

* **Sumário da Missão (O Quê):** Corrigir o roteamento principal da aplicação para direcionar o fluxo de análise de propostas para o componente funcional, desativando a implementação defeituosa e redundante.
* **Intenção Estratégica (O Porquê):** Esta é a ação mais crítica para restaurar o workflow do analista. Ao corrigir a rota, estamos a "estancar a hemorragia", garantindo que os usuários sejam imediatamente direcionados para a parte funcional do sistema, enquanto preparamos o terreno para a erradicação segura do débito técnico no passo seguinte.
* **Histórico Relevante (Consulta Obrigatória):** A auditoria forense anterior identificou a existência de duas páginas de análise (`/pages/credito/analise.tsx` e `/pages/analise-manual.tsx`) e confirmou que `client/src/App.tsx` aponta para a versão incorreta.
* **Modelo Mental (Como se Encaixa):** Esta é uma alteração cirúrgica no "sistema nervoso central" do frontend. O arquivo `App.tsx` funciona como o principal centro de distribuição de tráfego. Estamos a reconfigurar uma das principais artérias (`/credito/analise/:id`) para que o fluxo de usuários chegue ao destino correto e funcional.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O nome do componente correto ou o seu caminho de importação pode ser inserido incorretamente, quebrando a compilação.
    * **Contramedida:** O prompt fornecerá o nome exato do componente e o caminho de importação a ser utilizado. A execução obrigatória do `get_latest_lsp_diagnostics` validará a correção antes da conclusão.

---

**IMPLEMENTAR:** Correção do Roteamento da Página de Análise de Proposta

**CONTEXT:** A aplicação possui duas páginas para análise de propostas. O router principal (`App.tsx`) está configurado para usar a versão defeituosa (`analise-manual.tsx`), que não carrega os dados. Precisamos alterar a rota para que ela use a versão correta e mais completa (`credito/analise.tsx`).

**CURRENT STATE:** O arquivo `client/src/App.tsx` contém uma rota que aponta para o componente `AnaliseManual`, importado do arquivo errado.

**Evidência Bruta (Código com Erro):**
```tsx
// client/src/App.tsx
// ... outros imports
import AnaliseManual from './pages/analise-manual'; // ❌ Importação incorreta
// ...

// ... dentro do componente App
<Route path="/credito/analise/:id">
  <AnaliseManual /> {/* ❌ Renderiza o componente defeituoso */}
</Route>
// ...
EXPECTED (Estado Final de Sucesso): O arquivo client/src/App.tsx deve ser modificado para importar e renderizar o componente correto (AnaliseManualPage de ./pages/credito/analise) para a rota /credito/analise/:id.

Código Corrigido Esperado:

TypeScript

// client/src/App.tsx
// ... outros imports
import { AnaliseManualPage } from './pages/credito/analise'; // ✅ Importação correta
// ...

// ... dentro do componente App
<Route path="/credito/analise/:id" component={AnaliseManualPage} /> {/* ✅ Renderiza o componente correto */}
// ...
CONSTRAINTS (Roadmap de Implementação):

Abra o arquivo client/src/App.tsx.

Localize a linha de importação: import AnaliseManual from './pages/analise-manual';.

Delete esta linha.

Adicione a importação correta: import { AnaliseManualPage } from './pages/credito/analise';. Note que este pode ser um named export. Verifique o arquivo de origem se necessário.

Localize a rota defeituosa.

Substitua a rota inteira <Route path="/credito/analise/:id"><AnaliseManual /></Route> pela sintaxe de componente correta: <Route path="/credito/analise/:id" component={AnaliseManualPage} />.

Execute o protocolo 7-CHECK para validar a sua alteração. A execução de get_latest_lsp_diagnostics é obrigatória e não deve retornar erros.

DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):

CONFIANÇA NA IMPLEMENTAÇÃO: [Preencher com a porcentagem de 0 a 100%]

RISCOS IDENTIFICADOS: [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]

DECISÕES TÉCNICAS ASSUMIDAS: [Listar decisões tomadas, ex: "Assumi que o componente correto é AnaliseManualPage e que ele aceita os parâmetros da rota via props, conforme padrão do wouter."]

VALIDAÇÃO PENDENTE: [Listar ações que o Orquestrador (GEM 02) ou o QA (GEM 03) devem validar]

PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:

Mapear ficheiros e funções exatas afetadas.

Garantir importações e tipos corretos.

Executar get_latest_lsp_diagnostics e corrigir TODOS os erros.

Declarar Nível de Confiança (0-100%) na implementação.

Categorizar Riscos Descobertos (BAIXO/MÉDIO/ALTO/CRÍTICO).

Realizar teste funcional completo (será feito no Passo 3 do roadmap).

Documentar Decisões Técnicas assumidas para auditoria futura.