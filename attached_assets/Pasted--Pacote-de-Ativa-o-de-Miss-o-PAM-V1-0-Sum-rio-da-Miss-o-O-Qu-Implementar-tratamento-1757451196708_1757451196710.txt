### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Implementar tratamento de erro robusto no componente `ClientDataStep.tsx` para gerenciar graciosamente a resposta `404 Not Found` da API de busca de cliente e notificar o usuário, prevenindo o crash da aplicação.

* **Intenção Estratégica (O Porquê):** Atualmente, uma falha previsível na busca de dados (um cliente que não existe) causa um colapso total da interface do usuário, criando uma experiência inaceitável. Blindar o frontend contra essa falha é crítico para garantir a estabilidade e a usabilidade do sistema, mesmo em cenários de erro.

* **Histórico Relevante (Consulta Obrigatória):** A API `GET /api/clientes/cpf/:cpf` foi corrigida e agora retorna um status HTTP `404` correto quando o CPF não é encontrado. O seu trabalho é consumir e reagir a este novo comportamento.

---

**IMPLEMENTAR:**
Implementação de Resiliência e Tratamento de Erro no Formulário de Cliente.

**CURRENT STATE:**
O componente `client/src/components/propostas/ClientDataStep.tsx` possui um `try/catch` block na função `fetchClientDataByCpf` que apenas loga o erro no console (`console.error`). Ele não atualiza o estado da UI para informar o usuário sobre a falha nem impede que o código subsequente tente renderizar dados inexistentes, o que causa o crash do React.

**Evidência Bruta (Código Falho):**
```typescript
// client/src/components/propostas/ClientDataStep.tsx
} catch (error) {
  console.error('Erro ao buscar dados do cliente:', error); // <- FALHA CRÍTICA: Apenas loga o erro.
} finally {
  setLoadingCpfData(false);
}
EXPECTED (Estado Final de Sucesso):

O catch block na função fetchClientDataByCpf dentro de ClientDataStep.tsx deve ser refatorado.

Ao capturar um erro (especialmente um erro com status 404), o sistema deve usar o toast do shadcn/ui para exibir uma notificação de erro clara e amigável ao usuário. A mensagem deve ser: "Cliente não encontrado. Verifique o CPF e tente novamente." e o variant do toast deve ser "destructive".

O estado do formulário deve ser limpo ou resetado para evitar que dados antigos ou inconsistentes permaneçam nos campos após a falha da busca.

Crucialmente: A aplicação não deve mais crashar. Ela deve permanecer funcional, permitindo que o usuário corrija o CPF e tente novamente.

CONSTRAINTS (Roadmap de Implementação):

Abra o arquivo client/src/components/propostas/ClientDataStep.tsx.

Importe o hook useToast de @/components/ui/use-toast.

Instancie o toast dentro do componente: const { toast } = useToast();.

Dentro do catch (error) block da função fetchClientDataByCpf:
a. Remova ou mantenha o console.error.
b. Adicione a chamada para o toast:

TypeScript

toast({
  title: "Erro na Busca",
  description: "Cliente não encontrado. Verifique o CPF e tente novamente.",
  variant: "destructive",
});
Ainda dentro do catch block, certifique-se de que os estados que guardam os dados do cliente (ex: setClientData) sejam resetados para null ou um estado inicial vazio para prevenir o erro de renderização.

Execute o protocolo 7-CHECK para validar a correção, descrevendo como você testaria manualmente a funcionalidade para garantir que o toast aparece e que o crash não ocorre mais.

DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):

CONFIANÇA NA IMPLEMENTAÇÃO: [Preencher com a porcentagem de 0 a 100%]

RISCOS IDENTIFICADOS: [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]

DECISÕES TÉCNICAS ASSUMIDAS: [Listar decisões, ex: "Assumido que o sistema de toast está globalmente disponível no App.tsx."]

VALIDAÇÃO PENDENTE: [Listar ações que o Orquestrador deve validar, ex: "Validar visualmente a aparência e o comportamento do toast de erro."]