### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Integrar o novo `preApprovalService` no endpoint de criação de propostas (`POST /api/propostas`), utilizando o seu resultado para orquestrar a transição de estado inicial via FSM.
* **Intenção Estratégica (O Porquê):** Ativar a nova regra de negócio de negação automática, tornando o processo de criação de propostas mais inteligente e eficiente. Esta integração garantirá que o resultado da análise automática defina o estado inicial correto da proposta, formalizando o fluxo de decisão.
* **Histórico Relevante (Consulta Obrigatória):** O Passo 2.1 criou o `preApprovalService`, que retorna um resultado estruturado (`PreApprovalResult`). A arquitetura existente possui um `statusFsmService` para todas as transições de estado. Este controller deve atuar como o orquestrador entre os dois.
* **Modelo Mental (Como se Encaixa):** Estamos a inserir um "cérebro" de decisão no fluxo principal. A requisição chega ao controller, passa pelo motor de pré-aprovação, e o resultado dessa decisão é então usado para comandar a FSM, que por sua vez atualiza o estado da proposta.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A lógica de orquestração no controller pode se tornar complexa ou tratar incorretamente um dos resultados do `PreApprovalResult`.
    * **Contramedida:** O prompt exige uma lógica condicional clara que mapeie cada tipo de resultado (`rejected`, `pendingData`, `approved`, `error`) para uma ação específica.

---

**IMPLEMENTAR:**
Integração do Serviço de Pré-Aprovação no Fluxo de Criação de Proposta

**CURRENT STATE:**
O endpoint `POST /api/propostas` (localizado em `server/routes/propostas/core.ts`) cria propostas com um status inicial padrão, sem qualquer verificação de comprometimento de renda. O `preApprovalService` existe, mas não está a ser utilizado.

**EXPECTED (Estado Final de Sucesso):**
1.  O arquivo `server/routes/propostas/core.ts` é modificado.
2.  A rota de criação de proposta (`POST /`) agora importa e utiliza o `preApprovalService`.
3.  Após a validação de dados (Zod), a função `preApprovalService.checkIncomeCommitment()` é chamada com os dados da proposta.
4.  Uma lógica condicional (ex: `if/else` ou `switch`) é implementada no controller para tratar o `PreApprovalResult`:
    * Se o resultado indicar `rejected: true` ou `pendingData: true`, o controller deve chamar o `statusFsmService.transitionTo()` com o status e o motivo retornados pelo serviço.
    * Se o resultado indicar `approved: true`, o fluxo de criação da proposta continua como antes, provavelmente com o status `rascunho` ou similar.
5.  O objeto final da proposta é persistido no banco de dados com o status inicial correto, determinado pelo resultado da pré-aprovação.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Local da Integração:** A nova lógica deve ser inserida dentro da rota `POST /` no arquivo `server/routes/propostas/core.ts`, logo após a validação Zod e antes da inserção final no banco.
2.  **Orquestração:** O controller é o orquestrador. Ele deve:
    * Chamar o `preApprovalService`.
    * Analisar o objeto `PreApprovalResult`.
    * Chamar a `FSM` com os dados corretos, se aplicável.
3.  **Lógica Condicional Clara:** Implemente uma lógica explícita para tratar cada um dos possíveis resultados (`rejected`, `pendingData`, `approved`, `error`) retornados por `checkIncomeCommitment`.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o status inicial para uma proposta aprovada na pré-análise deve ser 'rascunho' para o usuário completar o restante do formulário."]
* **VALIDAÇÃO PENDENTE:** [Testes de integração para o endpoint de criação de propostas devem ser atualizados para cobrir os novos cenários de rejeição e pendência automáticas.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (`server/routes/propostas/core.ts`).
2.  Garantir que as importações do `preApprovalService` e `statusFsmService` estão corretas.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão lógica do fluxo de orquestração implementado).
7.  **Documentar Decisões Técnicas**.