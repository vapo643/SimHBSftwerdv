### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Atualizar os schemas de validação Zod no arquivo `shared/schema.ts` para incluir as regras para os novos campos de TAC (`tacValor`, `tacTipo`) no formulário de produtos.
* **Intenção Estratégica (O Porquê):** Garantir a integridade dos dados na sua origem. Ao atualizar os schemas de validação antes de modificar a UI, garantimos que a lógica de negócio (backend) e a interface do usuário (frontend) operem com base na mesma "fonte da verdade" para os dados, prevenindo a submissão de dados inválidos.
* **Histórico Relevante (Consulta Obrigatória):** O nosso debate de planejamento definiu a necessidade de atualizar o `insertProdutoSchema` para incluir a validação dos novos campos de TAC.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de modificação de schema de validação. O Agente irá editar um arquivo TypeScript para adicionar novas regras a um objeto Zod existente, garantindo a consistência entre o frontend e o backend.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** Uma regra de validação incorreta pode impedir a criação/edição de produtos legítimos ou permitir a entrada de dados inválidos.
    * **Contramedida:** O prompt especifica as regras exatas (`z.number().min(0)`, `z.enum(["fixo", "percentual"])`), e a validação final verificará a sintaxe e a lógica do schema.

---

**IMPLEMENTAR:**
Atualização do Schema Zod para Configuração de TAC de Produtos

**CURRENT STATE:**
O schema Zod para a criação/edição de produtos (provavelmente `insertProdutoSchema` ou similar em `shared/schema.ts`) não inclui validações para os campos `tacValor` e `tacTipo`.

**EXPECTED (Estado Final de Sucesso):**
1.  O arquivo `shared/schema.ts` é modificado.
2.  O schema Zod existente para a entidade `produtos` é estendido (`.extend({...})`) para incluir as seguintes validações:
    * `tacValor`: Deve ser um número (`z.number()`) com um valor mínimo de `0`.
    * `tacTipo`: Deve ser um enum (`z.enum()`) que aceita apenas os valores `"fixo"` ou `"percentual"`.
3.  O arquivo não contém erros de LSP.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localize o Schema Correto:** Inicie por encontrar o schema Zod principal para a criação de produtos em `shared/schema.ts`. É provável que seja chamado `insertProdutoSchema` ou algo similar.
2.  **Modifique o Schema:** Adicione as novas regras de validação para `tacValor` e `tacTipo` usando o método `.extend()` do Zod para não alterar a base do schema gerada pelo Drizzle.
3.  **Ação Restrita:** A modificação deve ser focada exclusivamente no schema Zod. Não altere as definições de tabela do Drizzle (`pgTable`).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que estender o schema existente é a melhor abordagem para manter a sincronia com o Drizzle."]
* **VALIDAÇÃO PENDENTE:** [A validação final desta mudança ocorrerá quando os testes da FASE 3 forem implementados.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro e o schema exato a ser modificado (`shared/schema.ts`).
2.  Garantir que as novas regras Zod estão sintaticamente corretas.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão lógica do código para garantir que o schema foi estendido corretamente).
7.  **Documentar Decisões Técnicas**.