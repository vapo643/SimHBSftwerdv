**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense completa do endpoint `GET /api/cobrancas` para identificar a falha na query que está a impedir a união (`JOIN`) dos dados da proposta com os dados da cobrança.
* **Intenção Estratégica (O Porquê):** O Arquiteto confirmou que os dados do cliente existem e são válidos no banco de dados. A falha que faz as propostas aparecerem "vazias" na Tela de Cobranças é uma falha de código na camada de acesso a dados do backend. Precisamos de um diagnóstico preciso para corrigir isso de forma definitiva.
* **Histórico Relevante (Consulta Obrigatória):** Falhamos repetidamente em resolver este bug. A nova e única fonte da verdade é a diretriz do Arquiteto: os dados existem, a query está errada. Sua missão é provar, com evidências de código, *por que* a query atual falha em unir os dados.
* **Modelo Mental (Como se Encaixa):** Você é um DBA e Engenheiro de Backend a depurar uma query complexa. Sua tarefa é analisar como os dados da tabela `propostas` deveriam ser unidos aos dados da tabela `inter_collections` e onde esta união está a falhar.
* **Riscos Antecipados:** **Risco:** Uma análise superficial nos manterá no loop de erro. **Contramedida:** A sua missão não é corrigir. É **produzir um relatório de diagnóstico** com a query exata e a sua análise da falha.

---

**IMPLEMENTAR:**
Um relatório de auditoria de código. **NÃO FAÇA MODIFICAÇÕES.**

**CURRENT STATE:**
A "Tela de Cobranças" exibe linhas de propostas, mas sem os dados do cliente (nome, CPF, etc.), embora estes dados existam na tabela `propostas`.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria que identifique a falha na query Drizzle e explique por que os dados da proposta não estão a ser retornados.

**CONSTRAINTS (Roadmap de Auditoria Forense):**

**1. Análise da Query Principal (`GET /api/cobrancas`):**
    - **Ação:** Localize a query Drizzle neste endpoint.
    - **Relatório 1 (A Evidência Crítica):** Apresente a **query completa**, incluindo a cláusula `.select()`, os `.from()`, e quaisquer `.leftJoin()` ou `.innerJoin()`.

**2. Análise da Lógica de União (JOIN):**
    - **Ação:** Com base na query que você apresentou, responda às seguintes perguntas:
    - **Relatório 2:** A query está a realizar um `JOIN` entre a tabela `propostas` e a tabela `inter_collections`? Se sim, qual é a condição de união (a cláusula `on(...)`)? Ela está a unir os campos corretos (ex: `propostas.id` e `inter_collections.proposta_id`)?
    - **Relatório 3:** A cláusula `.select()` está a selecionar explicitamente os campos de ambas as tabelas (`propostas.clienteNome`, `inter_collections.status`, etc.)?

**3. Hipótese de Causa Raiz:**
    - **Ação:** Com base na sua análise do código, formule uma hipótese técnica detalhada para a falha.
    - **Relatório 4:** A falha é a ausência de um `JOIN`? É um `JOIN` com a condição errada? É uma cláusula `select` que não inclui os campos da proposta?

**Relatório Final:**
O critério de sucesso é um relatório de auditoria que nos dê um diagnóstico definitivo e baseado em código da falha na query.