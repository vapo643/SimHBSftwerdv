---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*O seu modo operacional muda de "Perito Forense" para "Arquiteto de Segurança". Com base na análise de causa raiz, a sua missão é projetar uma fortaleza digital. Você deve arquitetar um sistema de defesa em profundidade, com múltiplas camadas de proteção, para garantir que o nosso banco de dados de produção seja inviolável por ações acidentais ou não autorizadas de scripts e testes.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** para consultar a **documentação do PostgreSQL sobre gerenciamento de roles e permissões (GRANT/REVOKE)**, e as melhores práticas para a criação de scripts `npm` seguros e interativos (ex: uso de `prompts` para confirmação).*

---
### **Pacote de Ativação de Missão: OPERAÇÃO GUARDIÃO DO COFRE (FASE 3 - ARQUITETURA DE BLINDAGEM)**

* **Sumário da Missão (O Quê):** Arquitetar um "Protocolo de Blindagem de Ambiente" detalhado, que servirá como um plano de implementação para corrigir as vulnerabilidades sistémicas identificadas no carregamento de variáveis de ambiente e na execução de scripts destrutivos.
* **Intenção Estratégica (O Porquê):** O objetivo é construir defesas em múltiplas camadas. Se uma camada falhar (ex: um desenvolvedor comete um erro), as outras camadas (permissões de banco de dados, scripts interativos) devem conter a ameaça. Esta estratégia de "defesa em profundidade" é o padrão para sistemas de nível empresarial.
* **Histórico Relevante (Consulta Obrigatória):** A sua arquitetura deve endereçar diretamente cada uma das "Descobertas Críticas" e "Evidências Forenses" documentadas no relatório `docs/diagnostics/CAUSA_RAIZ_DELECAO_DB.md`.
* **Modelo Mental (Como se Encaixa):** Você está a projetar o sistema de segurança de um cofre de banco. O seu plano deve incluir fechaduras mais fortes nas portas (código), cartões de acesso com permissões limitadas para os funcionários (roles do banco de dados) e procedimentos de dupla verificação para operações perigosas (scripts interativos).

---

### **PLANEJAR E ARQUITETAR:**
Protocolo de Blindagem de Ambiente de Banco de Dados.

**CURRENT STATE:**
A análise de causa raiz confirmou que o sistema não tem um isolamento de ambiente eficaz. O `drizzle.config.ts` lê diretamente a `DATABASE_URL` de produção, e os scripts de teste e migração podem executá-la sem salvaguardas adequadas, resultando em perda de dados.

**EXPECTED (Estado Final de Sucesso):**
A geração de um novo documento Markdown em `docs/missions/PROTOCOLO_BLINDAGEM_AMBIENTE.md`. Este documento deve conter um roadmap de implementação detalhado para as seguintes quatro camadas de defesa:

1.  **Camada 1: Blindagem da Configuração (`drizzle.config.ts`)**
    * **Plano de Ação:** Detalhe o código necessário para modificar o `drizzle.config.ts`. A nova lógica deve:
        * Carregar explicitamente o arquivo `.env` apropriado com base no `process.env.NODE_ENV`.
        * Lançar um erro fatal e encerrar o processo se `NODE_ENV` for `'test'` e a `DATABASE_URL` não terminar com `'-test'`.
        * Lançar um erro fatal e encerrar o processo se um comando destrutivo (como `push:pg`) for invocado e o `NODE_ENV` não estiver explicitamente definido como `'development'` ou `'test'`.

2.  **Camada 2: Blindagem dos Scripts (`package.json`)**
    * **Plano de Ação:** Proponha a refatoração dos scripts de banco de dados no `package.json`.
        * Crie scripts específicos por ambiente, como `db:push:dev` e `db:push:test`.
        * Crie um script interativo de "confirmação de perigo" (usando `shell script` com um `read` prompt) que será invocado por qualquer script que execute uma ação destrutiva contra o banco de dados principal. O script deve exigir que o usuário digite o nome do banco de dados para confirmar a ação.

3.  **Camada 3: Blindagem dos Helpers de Teste (`tests/lib/db-helper.ts`)**
    * **Plano de Ação:** Detalhe o reforço da função `cleanTestDatabase()`. A função deve, no seu início, verificar `process.env.NODE_ENV` e lançar um erro fatal se não for estritamente `'test'`.

4.  **Camada 4: Blindagem do Banco de Dados (Política de "Menos Privilegiado")**
    * **Plano de Ação:** Arquitetar a estratégia de segurança a nível de banco de dados. O plano deve conter:
        * O SQL para criar um novo `ROLE` no PostgreSQL (ex: `app_user`).
        * Os comandos `GRANT` para dar a este `ROLE` apenas as permissões necessárias (`SELECT`, `INSERT`, `UPDATE`, `DELETE`) nas tabelas da aplicação.
        * Os comandos `REVOKE` (ou a ausência de `GRANT`) para garantir que o `app_user` **NÃO TENHA** permissões de `DROP`, `TRUNCATE`, `ALTER`.
        * A instrução para que a `DATABASE_URL` usada pela aplicação e pelos testes utilize as credenciais deste novo `app_user`, enquanto um `MIGRATION_DATABASE_URL` separado (com um usuário com mais privilégios) será usado apenas para executar as migrações.

**CONSTRAINTS (Roadmap de Análise):**
1.  **Foco no Plano:** A sua missão é projetar e documentar este plano de forma clara e acionável. **Não implemente nenhuma correção.**
2.  **Referência Cruzada:** Para cada camada de defesa, referencie explicitamente qual "Vetor de Falha" do relatório `CAUSA_RAIZ_DELECAO_DB.md` ela mitiga.