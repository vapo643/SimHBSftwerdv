# MISSÃO: Debate Técnico para Refatoração Completa do Módulo de Gestão de Usuários

**CONTEXTO ESTRATÉGICO:**
O nosso módulo de "Gestão de Usuários" está funcionalmente quebrado em duas frentes:
1.  A tabela de listagem de usuários não exibe o nome da Loja a que o usuário pertence.
2.  O formulário de criação de novos usuários está a usar dados "mock" para os dropdowns de "Parceiro" e "Loja", nos impedindo de criar usuários de teste.

**SUA TAREFA (ASSISTENTE):**
A sua tarefa não é escrever código. A sua tarefa é atuar como um Arquiteto Full-Stack e propor um plano de implementação robusto e anti-falha para corrigir todo o módulo. Esta será a nossa **Interação 1 de 3**.

---
### **Interação 1: Sua Proposta de Plano e Análise de Risco**

Por favor, responda seguindo **exatamente** esta estrutura:

**1. Estratégia de Backend (Listagem de Usuários):**
* **Problema:** A API `GET /api/admin/users` atualmente busca dados apenas da tabela `profiles`.
* **Ação Proposta:** Descreva a modificação necessária na query do banco de dados (utilizando Drizzle ORM ou SQL) para que ela faça um `JOIN` entre as tabelas `profiles` e `lojas` e inclua o `nome_loja` na resposta JSON de cada usuário.

**2. Estratégia de Frontend (Dados do Formulário):**
* **Problema:** O formulário de criação (`UserForm.tsx`) precisa de dados reais de Parceiros e Lojas.
* **Ação Proposta:** Confirme a estratégia: devemos buscar os dados de `GET /api/admin/parceiros` e `GET /api/admin/lojas` no componente pai (`usuarios/index.tsx`) usando `useQuery` e passá-los como "props" para o formulário? Justifique por que esta é uma abordagem robusta.

**3. Proposta de Lógica de Dropdown em Cascata:**
* **Problema:** O dropdown de Lojas deve ser filtrado com base no Parceiro selecionado.
* **Ação Proposta:** Descreva, passo a passo, a lógica de frontend para implementar esta funcionalidade. A filtragem deve ser `client-side` (usando os dados já carregados) ou `server-side` (fazendo uma nova chamada à API a cada seleção)? Justifique a sua recomendação considerando performance e UX.

**4. Análise de Risco e Experiência do Usuário (UX):**
* Liste os 3 maiores riscos nesta refatoração (ex: performance, tratamento de erros, complexidade de estado) e proponha uma solução de mitigação para cada um. Como devemos lidar com os estados de carregamento e erro para garantir uma experiência de usuário clara?