**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Implementar a nova lógica de atualização de status em todos os pontos de gatilho de eventos (geração de CCB, envio para assinatura, webhooks, etc.), em paralelo com o sistema de flags booleanas existente.
* **Intenção Estratégica (O Porquê):** Esta é a fase onde damos vida ao nosso novo sistema de status. Ao implementar os gatilhos, começamos a popular nossa nova tabela de auditoria (`status_transitions`) e a registrar o ciclo de vida de cada proposta com a nova granularidade e precisão que arquitetamos.
* **Histórico Relevante (Consulta Obrigatória):** Use o seu relatório `AUDITORIA_ARQUITETURAL_-_SISTEMA_DE_STATUS_V2.0.md` como seu mapa. Sua missão é implementar a lógica nos "Pontos de Modificação Necessários" que você mesmo identificou.
* **Modelo Mental (Como se Encaixa):** Você está a adicionar uma nova camada de lógica. O sistema antigo (com `ccbGerado = true`, etc.) continua a funcionar. Em paralelo, você irá adicionar o código que, no momento certo, muda a proposta para o novo status (ex: `CCB_GERADA`) e chama o `auditService.logStatusTransition` que acabamos de criar.
* **Riscos Antecipados:** **Risco:** Uma atualização de status no local errado pode quebrar o fluxo. **Contramedida:** A sua implementação deve ser precisa, adicionando a nova lógica exatamente nos pontos de sucesso de cada operação (ex: *depois* que a CCB é gerada com sucesso, *depois* que o envio para o ClickSign é bem-sucedido).

---

**IMPLEMENTAR:**
A lógica de atualização de status V2.0 em todos os gatilhos de eventos relevantes.

**CURRENT STATE:**
O sistema atualiza flags booleanas (`ccbGerado`, `assinaturaEletronicaConcluida`) em resposta a eventos. O novo campo `status` não é atualizado com a nova granularidade.

**EXPECTED (Estado Final de Sucesso):**
O sistema passa a operar com dois sistemas de status em paralelo. Além de definir as flags booleanas antigas, o código agora também atualiza o campo `status` da proposta para os novos valores (`CCB_GERADA`, `AGUARDANDO_ASSINATURA`, etc.) e registra cada uma dessas transições na tabela `status_transitions`.

**CONSTRAINTS (Roadmap de Implementação):**

Com base no seu relatório de auditoria, implemente a lógica de atualização de status nos seguintes locais:

1.  **Geração de CCB (`pdfGeneratorService.ts`):**
    - **Gatilho:** Após a geração bem-sucedida do PDF da CCB.
    - **Ação:** Atualize o `status` da proposta para `CCB_GERADA` e registre a transição.

2.  **Envio para Assinatura (`clickSignService.ts`):**
    - **Gatilho:** Após o envio bem-sucedido do documento para a API da ClickSign.
    - **Ação:** Atualize o `status` da proposta para `AGUARDANDO_ASSINATURA` e registre a transição.

3.  **Webhook de Assinatura Concluída (`clickSignWebhookService.ts`):**
    - **Gatilho:** Ao receber o evento `document.signed`.
    - **Ação:** Atualize o `status` da proposta para `ASSINATURA_CONCLUIDA` e registre a transição.

4.  **Geração de Boletos (`interBankService.ts` ou serviço orquestrador):**
    - **Gatilho:** Após a geração bem-sucedida de **TODOS** os boletos para uma proposta.
    - **Ação:** Atualize o `status` da proposta para `BOLETOS_EMITIDOS` e registre a transição.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear todos os arquivos de serviço que precisam ser alterados.
2.  Garantir que cada atualização de status seja acompanhada de uma chamada ao `auditService.logStatusTransition`.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar um teste funcional completo: crie uma proposta e avance-a por todo o fluxo de formalização.
5.  O critério final de sucesso é inspecionar a tabela `status_transitions` e ver o histórico completo e correto de todas as transições de estado para a proposta de teste.