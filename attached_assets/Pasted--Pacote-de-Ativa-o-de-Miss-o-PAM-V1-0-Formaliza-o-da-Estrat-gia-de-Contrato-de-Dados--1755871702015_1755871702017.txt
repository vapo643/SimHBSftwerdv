### Pacote de Ativação de Missão (PAM) V1.0 (Formalização da Estratégia de Contrato de Dados)

* **Sumário da Missão (O Quê):** Gerar um Architecture Decision Record (ADR) que defina a nossa estratégia e os padrões mandatórios para os "Contratos de Dados" (payloads de API), conforme os "Subtópicos Obrigatórios" do Ponto 35.
* **Intenção Estratégica (O Porquê):** Garantir que todos os dados que entram e saem do nosso sistema sejam consistentes, validados e seguros. Este ADR estabelecerá as regras para a validação na borda (princípio "Fail Fast") e, crucialmente, como lidamos com dados sensíveis (PII), um requisito fundamental de segurança e compliance.
* **Histórico Relevante (Consulta Obrigatória):** A FASE 0 já mapeou os nossos dados sensíveis (PII). A FASE 1 já definiu o nosso Guia de Estilo de API (ADR-007). Esta missão irá conectar os dois, definindo como os dados sensíveis devem ser tratados dentro dos payloads da API.
* **Modelo Mental (Como se Encaixa):** Aja como um Arquiteto de Segurança de Dados. A sua tarefa é definir as regras de validação e proteção para os "pacotes" de dados que a nossa API envia e recebe.

---

**IMPLEMENTAR:**
ADR: Estratégia de Contrato de Dados e Segurança de Payloads

**CURRENT STATE:**
A validação de payloads é feita com Zod, mas não temos uma estratégia formal documentada sobre a evolução de schemas, um repositório centralizado ou, mais importante, uma política clara para o tratamento de dados PII nos payloads.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/07-decisions/adr-008-api-data-contracts-payloads.md`, é criado. O arquivo deve conter um ADR completo, incluindo as seguintes seções:

1.  **Decisão:** Uma declaração clara, por exemplo: "Adotaremos a validação de schema Zod na borda de todas as APIs como mandatória. Dados PII sensíveis nunca devem ser expostos em respostas de GET; em vez disso, serão usados identificadores ou dados mascarados."
2.  **Repositório Centralizado de Schemas:** A nossa decisão de usar `shared/schema.ts` como o repositório central para os schemas Zod, garantindo a consistência entre o frontend e o backend.
3.  **Estratégia de Validação de Payloads na Borda:** A política de que toda requisição (`request`) que contém um `body` deve ser validada com um schema Zod como a **primeira etapa** dentro do `controller` da rota.
4.  **Estratégia para Lidar com Campos Sensíveis (PII):** A nossa política de segurança para payloads de resposta (`response`). Por exemplo:
    * `GET /api/clientes/{id}`: **NÃO DEVE** retornar o CPF completo. Deve retornar um ID ou uma versão mascarada.
    * Payloads de criação/atualização (`POST`/`PUT`) podem receber dados PII, mas eles devem ser validados e nunca retornados na resposta da mesma requisição.
5.  **Política de Evolução de Schema e Compatibilidade:** A nossa política para introduzir mudanças nos schemas (ex: "Todas as novas adições a um payload de resposta devem ser opcionais para garantir a retrocompatibilidade").

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a estratégia de nunca retornar PII em GETs é a melhor prática de segurança, mesmo que exija que o frontend armazene alguns dados temporariamente."]
* **VALIDAÇÃO PENDENTE:** [O ADR gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATório 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que todas as seções obrigatórias do ADR são criadas.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.