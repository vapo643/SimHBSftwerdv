### Pacote de Ativação de Missão (PAM) V1.0 - Remediação Crítica de Performance e Eventos

* **Sumário da Missão (O Quê):** Corrigir a falha crítica no despacho de eventos de domínio em contextos transacionais e implementar os índices de base de dados em falta, seguindo rigorosamente o processo de migração versionado do Drizzle-Kit.
* **Intenção Estratégica (O Porquê):** Restaurar a funcionalidade do fluxo de aprovação de propostas, que está atualmente quebrado, e eliminar o estrangulamento de performance nas queries de listagem. A conclusão desta missão é um requisito P0 para a viabilidade do sistema em produção.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de software sênior a corrigir uma falha arquitetural crítica. A sua prioridade é a correção do processo e a implementação de código resiliente, seguindo a doutrina de Infrastructure as Code sem desvios.

---

**IMPLEMENTAR (Plano de Remediação):**
Execute a seguinte sequência de ações.

**CURRENT STATE:**
1. O `TransactionalProposalRepository.save()` não despacha eventos de domínio.
2. A base de dados não possui os índices de performance para as queries de propostas.
3. O Redis pode não estar a ser detetado corretamente.

**EXPECTED (Estado Final de Sucesso):**
1. O `TransactionalProposalRepository.save()` despacha corretamente os eventos de domínio após a persistência.
2. Um novo ficheiro de migração versionado existe em `/migrations` com os novos índices.
3. A base de dados foi atualizada com os novos índices através do sistema de migração.
4. O sistema está funcional e performático.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Corrigir o Despacho de Eventos de Domínio (Remediação P0)**
1.1. Abra o ficheiro `server/modules/shared/infrastructure/TransactionalProposalRepository.ts`.
1.2. Localize o método `save`.
1.3. **Restrição Crítica:** Implemente a mesma lógica de despacho de eventos que existe no `ProposalRepository` não transacional. O `EventDispatcher` deve ser injetado e os eventos não confirmados (`getUncommittedEvents`) do agregado `Proposal` devem ser despachados após a operação de salvamento.

**Passo 2: Otimizar a Base de Dados via Migração Versionada (Remediação P2)**
2.1. **Restrição Crítica:** Você está **PROIBIDO** de usar `CREATE INDEX` diretamente na base de dados. Você DEVE usar o fluxo de trabalho do Drizzle-Kit.
2.2. Abra o ficheiro `shared/schema.ts` e adicione a definição dos seguintes índices à tabela `propostas` usando a sintaxe Drizzle:
    ```typescript
    // Adicionar dentro do callback de pgTable para propostas
    statusPerformanceIdx: index('idx_propostas_status_performance')
      .on(table.status, table.createdAt.desc())
      .where(sql`"deletedAt" IS NULL`),
    cpfStatusIdx: index('idx_propostas_cpf_status')
      .on(table.clienteCpf, table.status)
      .where(sql`"deletedAt" IS NULL`),
    ```
2.3. Execute o comando canónico para gerar o ficheiro de migração: `npx drizzle-kit generate --name=performance_indices_sync`
2.4. Execute o comando canónico para aplicar a migração: `npx drizzle-kit migrate` (ou `npm run db:push --force` como fallback se o primeiro falhar).

**Passo 3: Garantir a Conectividade do Redis (Remediação P0)**
3.1. Verifique se a configuração centralizada do Redis em `server/lib/redis-config.ts` está a ser usada corretamente por todos os componentes BullMQ.
3.2. Assegure que a aplicação lida de forma graciosa com a ausência do Redis em ambiente de desenvolvimento, sem impedir o arranque do servidor.

**Passo 4: Validação Final**
4.1. Apresente o código refatorado do `TransactionalProposalRepository.ts` com a lógica de despacho de eventos.
4.2. Apresente o nome e o conteúdo completo do novo ficheiro de migração SQL criado para os índices.
4.3. Execute `get_latest_lsp_diagnostics` para confirmar que não há erros de compilação.

---

### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**

* **Diretriz Mestra:** Completude exaustiva em todos os relatórios.
* **Regra de Execução:** Listar 100% dos erros, riscos, recomendações e passos executados.
* **Justificativa Estratégica:** A ocultação de riscos ou desvios de processo é uma falha de missão.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** ALTO. A principal ameaça é a persistência da falha do agente em usar o `drizzle-kit` corretamente. A injeção da dependência do `EventDispatcher` no repositório transacional também requer atenção para evitar dependências circulares.
* **DECISÕES TÉCNICAS ASSUMIDAS:** O despacho de eventos ocorrerá dentro da mesma transação do `save`. Para uma arquitetura mais avançada, isto poderia ser movido para fora da transação, mas para a remediação atual, esta abordagem é aceitável.
* **VALIDAÇÃO PENDENTE:** Um teste de integração completo do fluxo de aprovação é mandatório para validar que o `FormalizationWorker` é agora acionado corretamente.