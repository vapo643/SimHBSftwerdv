### **Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA FORENSE DA INTEGRAÇÃO CLICKSIGN**

* **Sumário da Missão:** Realizar uma auditoria forense de ponta-a-ponta no fluxo de envio de CCB para a ClickSign, a fim de identificar a causa raiz da exceção não tratada no backend que resulta numa resposta HTML de erro em vez de um JSON.

* **Cenário de Negócio (O "Caso de Teste"):** Um `ATENDENTE` na tela de Formalização clica no botão "Enviar para ClickSign". O frontend exibe uma mensagem de sucesso, mas o processo falha no backend, e nenhum link de assinatura é gerado ou retornado.

* **Vetor de Ataque / Ponto de Falha (Hipóteses):**
    1.  **Recuperação de Documento:** O serviço falha ao tentar obter a CCB gerada a partir do Supabase Storage (ex: caminho do ficheiro incorreto, erro de permissão).
    2.  **Dados do Signatário:** O serviço falha ao obter ou formatar os dados do cliente (signatário) para a API da ClickSign.
    3.  **Comunicação com a API Externa:** A chamada para a API da ClickSign está a falhar devido a um `payload` malformado, chave de API inválida, ou outro erro na requisição.
    4.  **Erro de Lógica Interna:** Uma falha de lógica (ex: um `TypeError` num *Value Object*, como vimos anteriormente) ocorre durante o processamento dos dados.

* **Evidência de Conformidade Requerida (A "Prova Irrefutável"):**

1.  **Análise do Frontend (`formalizacao.tsx`):**
    * Localize o `onClick` handler do botão "Enviar para ClickSign".
    * Apresente o `useMutation` que ele invoca e confirme o endpoint da API que está a ser chamado (provavelmente `POST /api/propostas/:id/enviar-clicksign`).

2.  **Análise do Backend (Rota e Controller):**
    * Navegue até o ficheiro de rotas relevante e localize a definição da rota para o endpoint identificado.
    * Apresente o código da rota e identifique qual método do `proposalController` (ou similar) é acionado.

3.  **Análise da Lógica de Negócio (`UseCase` e `Service`):**
    * Siga o fluxo do controller até o `UseCase` de envio para a ClickSign. Apresente o código completo deste `UseCase`.
    * Siga o fluxo do `UseCase` até a camada de serviço que interage diretamente com a API da ClickSign (provavelmente `ClickSignService.ts`). Apresente o código deste serviço. Preste atenção especial em como o ficheiro da CCB é lido do storage e como o `payload` para a ClickSign é montado.

4.  **Diagnóstico do Erro (Logs do Servidor - ETAPA MAIS CRÍTICA):**
    * Execute o fluxo "Enviar para ClickSign" na aplicação.
    * Imediatamente após a falha, inspecione os **logs do servidor backend** (não do navegador). A resposta HTML indica um erro não tratado. Localize e apresente o **`stack trace` completo do erro** que causou o crash da requisição.

5.  **Veredito Final:** Com base no `stack trace` e na análise do código, aponte a linha exata e o ficheiro onde o erro ocorre e explique a causa raiz definitiva.