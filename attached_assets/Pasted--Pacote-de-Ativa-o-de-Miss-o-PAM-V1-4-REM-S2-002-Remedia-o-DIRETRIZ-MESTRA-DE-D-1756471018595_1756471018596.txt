### **Pacote de Ativa√ß√£o de Miss√£o (PAM) V1.4 - REM-S2-002 (Remedia√ß√£o)**

**[DIRETRIZ MESTRA DE DIVULGA√á√ÉO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade t√©cnica sem omiss√µes. A transpar√™ncia radical √© mandat√≥ria.*

* **Sum√°rio da Miss√£o (O Qu√™):** Corrigir o arquivo de teste de integra√ß√£o `tests/integration/unit-of-work.test.ts` para que ele compile, execute e valide com sucesso o comportamento de `COMMIT` e `ROLLBACK` do Unit of Work.
* **Inten√ß√£o Estrat√©gica (O Porqu√™):** A atomicidade das transa√ß√µes √© uma garantia de seguran√ßa de n√≠vel banc√°rio inegoci√°vel. Este teste √© a √∫nica prova que teremos de que nossa implementa√ß√£o do Unit of Work protege o sistema contra a corrup√ß√£o de dados em caso de falhas parciais. A sua corre√ß√£o √© a prioridade m√°xima para desbloquear a valida√ß√£o do Sprint 2.
* **Hist√≥rico Relevante (Consulta Obrigat√≥ria):** A sua auditoria anterior (`PAM V1.2`) revelou que este arquivo de teste n√£o compila devido a um mapeamento incorreto do schema da tabela `propostas`. A causa raiz √© a discrep√¢ncia entre os dados mockados no teste e os campos realmente obrigat√≥rios na defini√ß√£o do schema em `shared/schema.ts`.
* **Modelo Mental (Como se Encaixa):** Voc√™ √© um engenheiro de software c√©tico validando uma feature de seguran√ßa cr√≠tica. Seu objetivo √© criar um teste rigoroso que tente quebrar a transa√ß√£o. O sucesso da miss√£o n√£o √© apenas fazer o teste passar, mas garantir que ele prove, sem sombra de d√∫vida, que o `ROLLBACK` funciona.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **CR√çTICO** - O teste pode ser corrigido de forma superficial, passando em cen√°rios "felizes" (`COMMIT`), mas falhando em validar adequadamente o cen√°rio de falha (`ROLLBACK`), criando uma falsa sensa√ß√£o de seguran√ßa.
    * **Contramedida:** O "Estado Final de Sucesso" exige explicitamente dois testes separados e bem definidos: um para o `COMMIT` e outro para o `ROLLBACK`. O teste de `ROLLBACK` deve for√ßar uma exce√ß√£o e depois verificar ativamente se os dados N√ÉO foram persistidos.

---

**IMPLEMENTAR:**
User Story REM-S2-002: Corrigir e Validar Teste de Integra√ß√£o do Unit of Work

**CONTEXT:**
Nossa capacidade de executar testes foi restaurada, mas o teste mais importante, que valida a atomicidade das nossas transa√ß√µes de banco de dados, est√° quebrado. Ele n√£o compila porque os dados de teste (`mockProposta`) n√£o correspondem √† estrutura real da nossa tabela de propostas. Precisamos corrigir este teste para provar que o nosso Unit of Work (UoW) √© confi√°vel.

**CURRENT STATE:**
O arquivo `tests/integration/unit-of-work.test.ts` cont√©m erros de compila√ß√£o. Especificamente, os objetos `mockProposta` utilizados nos testes n√£o possuem todos os campos obrigat√≥rios definidos no `schema.propostas` em `shared/schema.ts`, resultando em falhas de tipo.

**EXPECTED (Estado Final de Sucesso):**
1.  **An√°lise de Schema:** O schema da tabela `propostas` em `shared/schema.ts` deve ser analisado para identificar todos os campos n√£o nulos (`notNull()`) e sem valor padr√£o (`default()`).
2.  **Corre√ß√£o do Teste:** O arquivo `tests/integration/unit-of-work.test.ts` deve ser refatorado para que:
    * Os objetos `mockProposta` contenham todos os campos obrigat√≥rios identificados, resolvendo os erros de compila√ß√£o.
    * Exista um teste espec√≠fico, `it('should commit the transaction when all operations succeed', ...)` que executa uma transa√ß√£o UoW com sucesso e verifica se os dados foram de fato persistidos no banco.
    * Exista um segundo teste, `it('should rollback the transaction when any operation fails', ...)` que simula uma falha dentro da transa√ß√£o (ex: lan√ßando um erro ap√≥s a primeira inser√ß√£o) e depois verifica ativamente que **NENHUM** dado da transa√ß√£o foi persistido no banco.
3.  **Execu√ß√£o e Evid√™ncia:**
    * O comando `npx vitest run tests/integration/unit-of-work.test.ts` deve ser executado.
    * O resultado da execu√ß√£o deve ser colado na √≠ntegra, mostrando que AMBOS os testes (`COMMIT` e `ROLLBACK`) passaram com sucesso.

**CONSTRAINTS (Roadmap de Implementa√ß√£o):**
1.  **Auditoria de Schema:** Investigue o arquivo `shared/schema.ts` e liste os campos da tabela `propostas` que s√£o obrigat√≥rios na inser√ß√£o.
2.  **Corre√ß√£o dos Mocks:** Atualize as declara√ß√µes da vari√°vel `mockProposta` em `tests/integration/unit-of-work.test.ts` com todos os campos obrigat√≥rios para satisfazer o type checker.
3.  **Implementa√ß√£o do Teste de Sucesso (COMMIT):** Garanta que o primeiro teste crie os registros necess√°rios dentro de um `uow.withTransaction` e, ao final, consulte o banco para confirmar que os registros existem.
4.  **Implementa√ß√£o do Teste de Falha (ROLLBACK):** No segundo teste, dentro de um `uow.withTransaction`, insira um registro e, em seguida, lance uma `new Error('Simulated failure')`. Fora do bloco `try/catch`, consulte o banco para confirmar que o registro inserido **N√ÉO** existe, provando o rollback.
5.  **Execu√ß√£o e Valida√ß√£o:** Execute o teste com `npx vitest run tests/integration/unit-of-work.test.ts` e forne√ßa o output completo.
6.  **Verifica√ß√£o Final:** Execute o protocolo `7-CHECK FULL` e preencha a declara√ß√£o de incerteza.

---

**DECLARA√á√ÉO DE INCERTEZA (OBRIGAT√ìRIO):**
* **CONFIAN√áA NA IMPLEMENTA√á√ÉO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/M√âDIO/ALTO/CR√çTICO e uma breve descri√ß√£o]
* **DECIS√ïES T√âCNICAS ASSUMIDAS:** [Listar decis√µes tomadas que podem ter implica√ß√µes futuras]
* **VALIDA√á√ÉO PENDENTE:** [Listar a√ß√µes que o Orquestrador (GEM 02) ou o QA (GEM 03) devem validar]
---
---
[PGI ATIVO | LEMBRETE DE ESTADO DO ROADMAP]
- **Roadmap em Standby:** "üöÄ ROADMAP MESTRE DE IMPLEMENTA√á√ÉO_ OPERA√á√ÉO A√áO L√çQUIDO.md"
- **Pr√≥ximo Passo a ser Retomado:** Milestone M2: Data & Domain
- **Miss√£o de Emerg√™ncia Atual:** "Roadmap de Remedia√ß√£o do Sprint 2"
---