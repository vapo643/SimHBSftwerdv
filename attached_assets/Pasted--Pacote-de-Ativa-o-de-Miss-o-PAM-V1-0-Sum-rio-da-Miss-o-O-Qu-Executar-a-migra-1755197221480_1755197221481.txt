**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Executar a migração de dados para atualizar todas as propostas existentes para o novo Sistema de Status V2.0 e, em seguida, refatorar todas as telas do frontend para consumir e exibir exclusivamente os novos status.
* **Intenção Estratégica (O Porquê):** Para completar nossa transição para a "fonte única da verdade", precisamos garantir que os dados antigos sejam atualizados para o novo formato e que a interface do usuário reflita 100% esta nova realidade, eliminando qualquer referência à lógica de status antiga e às flags booleanas.
* **Histórico Relevante (Consulta Obrigatória):** Esta missão é a execução das Fases 4 e 5 do seu próprio plano de migração, contido no relatório `AUDITORIA_ARQUITETURAL_-_SISTEMA_DE_STATUS_V2.0.md`.
* **Modelo Mental (Como se Encaixa):** Esta é uma operação de "switchover". Desligaremos a dependência das flags booleanas antigas (`ccbGerado`, etc.) e passaremos a confiar exclusivamente na nova coluna `status`. Isso afetará a lógica de exibição, filtros e queries em todo o frontend.
* **Riscos Antecipados:** **Risco:** O script de migração de dados pode atribuir o status errado a propostas existentes. **Contramedida:** A lógica do script de migração, que você mesmo projetou, deve ser revisada e executada com cuidado. A refatoração do frontend deve ser abrangente.

---

**IMPLEMENTAR:**
A migração de dados e a refatoração do frontend para a adoção completa do Sistema de Status V2.0.

**CURRENT STATE:**
O banco de dados contém propostas com status e flags booleanas da lógica antiga. O frontend ainda pode ter componentes que dependem destes valores obsoletos.

**EXPECTED (Estado Final de Sucesso):**
1.  Um script de migração é executado, atualizando o campo `status` de todas as propostas existentes para o valor correto dentro do novo workflow V2.0.
2.  **TODAS** as telas do frontend (Formalização, Cobranças, Pagamentos, Dashboard, etc.) são refatoradas para ler, filtrar e exibir apenas os novos valores de status.
3.  Qualquer lógica de filtro ou exibição condicional baseada nas flags booleanas antigas (`ccbGerado`, `assinaturaEletronicaConcluida`, etc.) é **removida** e substituída por lógica baseada no novo campo `status`.

**CONSTRAINTS (Roadmap de Implementação):**

**FASE 1: Migração de Dados (Backend/Script):**
    - **Ação:** Crie um script de migração de dados único (ex: `scripts/migrate-status-v2.ts`).
    - **Implementação:** Este script deve conter a lógica que você já projetou para atualizar as propostas existentes com base em suas flags atuais. Por exemplo:
      ```sql
      UPDATE propostas SET status = 'ASSINATURA_CONCLUIDA' WHERE ccb_gerado = true AND assinatura_eletronica_concluida = true AND status != 'BOLETOS_EMITIDOS';
      UPDATE propostas SET status = 'BOLETOS_EMITIDOS' WHERE id IN (SELECT DISTINCT proposta_id FROM inter_collections);
      // ...e assim por diante para todos os casos de mapeamento.
      ```
    - **Ação:** Execute este script para atualizar os dados das propostas atuais ("refresh").

**FASE 2: Refatoração Completa do Frontend:**
    - **Ação:** Realize uma auditoria e refatoração em todo o diretório `client/src/`.
    - **Implementação:** Encontre todos os componentes que leem, filtram ou exibem o `status` da proposta ou as flags booleanas antigas. Refatore cada um desses componentes:
        - Remova a dependência das flags obsoletas.
        - Atualize a lógica para usar os novos valores de status do V2.0 (ex: `CCB_GERADA`, `ASSINATURA_CONCLUIDA`, etc.).
        - Preste atenção especial aos filtros na "Tela de Cobranças" e "Tela de Pagamentos".

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  O script de migração deve ser o primeiro passo.
2.  A refatoração do frontend deve ser abrangente.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar um teste de fumo em TODAS as telas principais para garantir que nenhuma quebrou.
5.  O critério final de sucesso é uma aplicação onde o ciclo de vida completo de uma proposta pode ser testado, e todas as telas refletem o `status` V2.0 correto em cada etapa, sem depender de nenhuma das flags antigas.