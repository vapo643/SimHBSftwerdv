### Pacote de Ativação de Missão (PAM) V1.0 - Remediação Arquitetural Crítica (Sprints 1-2)

* **Sumário da Missão (O Quê):** Refatorar a camada de persistência e os serviços de aplicação para eliminar os desvios arquiteturais críticos identificados na auditoria "Fundação de Aço", garantindo o uso correto dos padrões Repository e Unit of Work.
* **Intenção Estratégica (O Porquê):** Restaurar a integridade arquitetural do sistema. A lógica de negócio deve ser agnóstica à implementação da base de dados e todas as operações de modificação devem ser atômicas para garantir a consistência dos dados, um requisito fundamental para operações financeiras.
* **Modelo Mental (Como se Encaixa):** Você é um arquiteto de software sênior encarregado de corrigir dívidas técnicas críticas. Sua tarefa é reintroduzir a disciplina arquitetural, garantindo que as abstrações corretas sejam respeitadas e que a integridade transacional seja garantida em todos os casos de uso.

---

**IMPLEMENTAR (Plano de Remediação):**
Execute a seguinte sequência de ações de refatoração para corrigir as violações arquiteturais.

**CURRENT STATE:**
1. Os repositórios (`CcbRepository`, `BoletoRepository`, `ProposalRepository`) acedem diretamente ao cliente Drizzle (`db`) em vez de utilizarem o cliente transacional.
2. Os *Use Cases* (`ApproveProposalUseCase`, etc.) chamam diretamente `.save()` nos repositórios, sem orquestração transacional através do `UnitOfWork`.

**EXPECTED (Estado Final de Sucesso):**
1. Os métodos nos repositórios são refatorados para usar a instância transacional do Drizzle (`this.tx`) que lhes é passada, em vez do cliente global `db`.
2. Todos os *Use Cases* que executam operações de escrita são refatorados para utilizar o `UnitOfWork`, envolvendo a sua lógica no método `uow.executeInTransaction(...)` para garantir a atomicidade.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Refatorar Repositórios para Usar o Cliente Transacional (`this.tx`)**
1.1. Inspecione todos os ficheiros de implementação de repositório em `server/modules/*/infrastructure/`.
1.2. Localize todas as instâncias de chamadas diretas ao cliente Drizzle global (ex: `db.insert(...)`, `db.select(...)`, `db.update(...)`).
1.3. Substitua estas chamadas para utilizarem a instância de cliente transacional injetada, que deve estar disponível como `this.tx` (ou similar, conforme a implementação do `UnitOfWork`).
    * **Exemplo de Alteração:**
        * **ANTES:** `await db.insert(ccbs).values(...)`
        * **DEPOIS:** `await this.tx.insert(ccbs).values(...)`

**Passo 2: Implementar o Padrão Unit of Work nos Use Cases**
2.1. Inspecione todos os ficheiros de *use case* em `server/modules/*/application/` que realizam operações de escrita (ex: `CreateProposalUseCase`, `ApproveProposalUseCase`, `RejectProposalUseCase`).
2.2. Para cada *use case*, injete a dependência do `IUnitOfWork`.
2.3. Refatore o método `execute` para envolver a lógica de negócio principal dentro de uma chamada a `this.unitOfWork.execute(async (uow) => { ... })`.
2.4. Dentro do *callback* da transação, certifique-se de que as chamadas aos repositórios utilizam as instâncias fornecidas pelo `uow` (ex: `await uow.propostas.save(proposal)`).

**Passo 3: Validação Final**
3.1. Apresente um exemplo de um ficheiro de repositório refatorado (ex: `CcbRepository.ts`) mostrando o uso de `this.tx`.
3.2. Apresente um exemplo de um ficheiro de *use case* refatorado (ex: `ApproveProposalUseCase.ts`) mostrando o uso do `UnitOfWork`.
3.3. Execute `get_latest_lsp_diagnostics` para confirmar que a refatoração massiva não introduziu erros de compilação.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** ALTO. Esta é uma refatoração estrutural significativa. O principal risco é a introdução de regressões funcionais. A lógica de passagem do cliente transacional (`tx`) para os repositórios dentro do `UnitOfWork` deve ser perfeita.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que a estrutura existente do `UnitOfWork` já é capaz de instanciar repositórios com um cliente transacional.
* **VALIDAÇÃO PENDENTE:** Testes de integração completos são mandatórios após esta refatoração para garantir que todos os fluxos de negócio continuam a operar corretamente e que as transações são, de facto, atômicas.