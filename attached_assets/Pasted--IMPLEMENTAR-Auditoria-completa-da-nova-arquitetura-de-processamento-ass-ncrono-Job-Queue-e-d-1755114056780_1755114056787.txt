**IMPLEMENTAR:**
Auditoria completa da nova arquitetura de processamento assíncrono (Job Queue) e da primeira camada de resiliência (Retry com Backoff Exponencial).

**CONTEXT:**
Concluímos a implementação das Fases 1 e 2.1 da "Operação Antifrágil". O objetivo desta missão de auditoria é verificar rigorosamente se a nova arquitetura está implementada corretamente, se as lógicas de negócio foram migradas com sucesso para os workers e, mais importante, se o novo mecanismo de resiliência (Retry) está funcional.

**CURRENT STATE:**
O código foi modificado para incluir a infraestrutura de BullMQ, e as lógicas de "geração de carnê" e "sincronização de boletos" foram movidas para workers que supostamente possuem uma política de re-tentativa.

**PROCESSO SISTEMÁTICO (Roadmap de Auditoria - NÃO FAÇA CORREÇÕES):**

**1. Auditoria da Migração para Workers (Passos 1.2 & 1.3):**
    - **Ação:** Inspecione os endpoints `POST /api/propostas/:id/gerar-carne` e `POST /api/propostas/:id/sincronizar-boletos`.
    - **Verificação:** Confirme que a lógica pesada de processamento foi **REMOVIDA** destes endpoints e que eles agora apenas adicionam um job à fila e retornam um `jobId` imediatamente.
    - **Ação:** Inspecione o ficheiro `server/worker.ts`.
    - **Verificação:** Confirme que as lógicas de negócio para `gerarCarneDoStorage` e `sincronizarBoletosDaProposta` estão agora a ser executadas **DENTRO** dos processadores de jobs do worker.

**2. Auditoria da Camada de Resiliência (Passo 2.1 - Ponto Crítico):**
    - **Ação:** Inspecione a instanciação dos `Workers` no ficheiro `server/worker.ts`.
    - **Verificação de Código:** Confirme que a configuração `opts` foi adicionada à declaração de cada `Worker`, incluindo as chaves `attempts` (com um valor como 5) e `backoff` (com `type: 'exponential'`). Apresente este trecho de código.
    - **Teste Funcional Simulado (Obrigatório):**
        a. Crie um **novo endpoint de teste temporário** (ex: `POST /api/test/retry`) que adiciona um job a uma **nova fila de teste** (ex: `test-retry-queue`).
        b. Crie um **worker para esta fila de teste** que **SEMPRE falha** (ex: `throw new Error('Falha simulada para teste de retry');`).
        c. Configure este worker de teste com a mesma política de retry (`attempts: 5`, `backoff` exponencial).
        d. Execute o endpoint de teste para enfileirar o job que falha.

**Relatório Final:**
O critério de sucesso desta missão é um relatório de auditoria que:
1.  Confirme que a migração para a arquitetura Produtor/Consumidor está correta.
2.  Apresente, como prova final e irrefutável, os **logs do processo Worker** gerados pelo teste funcional simulado. Os logs devem mostrar claramente o job a falhar e o BullMQ a agendar as re-tentativas com um tempo de espera crescente (ex: "Retrying in 10000ms", "Retrying in 20000ms", etc.), provando que a nossa camada de resiliência está ativa e funcional.