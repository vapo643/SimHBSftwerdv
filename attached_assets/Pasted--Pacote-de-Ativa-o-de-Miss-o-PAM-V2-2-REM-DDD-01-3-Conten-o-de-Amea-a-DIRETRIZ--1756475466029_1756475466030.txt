### **Pacote de Ativa√ß√£o de Miss√£o (PAM) V2.2 - REM-DDD-01.3 (Conten√ß√£o de Amea√ßa)**

**[DIRETRIZ MESTRA DE DIVULGA√á√ÉO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade t√©cnica sem omiss√µes. A transpar√™ncia radical √© mandat√≥ria.*

* **Sum√°rio da Miss√£o (O Qu√™):** Implementar um "kill switch" de seguran√ßa multicamada na fun√ß√£o `cleanTestDatabase` em `tests/lib/db-helper.ts` para prevenir a execu√ß√£o acidental contra bancos de dados de n√£o-teste.
* **Inten√ß√£o Estrat√©gica (O Porqu√™):** Proteger nossos ativos de dados contra destrui√ß√£o acidental. A salvaguarda atual (`NODE_ENV`) √© fraca e j√° falhou. Precisamos de uma defesa em profundidade que torne imposs√≠vel, por design, que um script de teste apague um banco de dados de produ√ß√£o ou desenvolvimento.
* **Hist√≥rico Relevante (Consulta Obrigat√≥ria):** Sua an√°lise forense (`REM-DDD-01.1`) identificou a fun√ß√£o `cleanTestDatabase` como a causa raiz da exclus√£o de dados. Esta miss√£o √© a resposta direta a essa descoberta.
* **Modelo Mental (Como se Encaixa):** Voc√™ √© um engenheiro de seguran√ßa refor√ßando uma porta blindada. Voc√™ n√£o vai apenas consertar a fechadura quebrada (`NODE_ENV`), mas vai adicionar m√∫ltiplas travas novas e um alarme, garantindo que a porta nunca mais possa ser aberta acidentalmente.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **ALTO** - Uma implementa√ß√£o incorreta das novas salvaguardas pode bloquear indevidamente a execu√ß√£o de testes em ambientes de CI/CD leg√≠timos, quebrando o pipeline.
    * **Contramedida:** A l√≥gica deve ser expl√≠cita e rigorosa. As verifica√ß√µes devem permitir a execu√ß√£o apenas se M√öLTIPLAS condi√ß√µes forem atendidas (ex: `NODE_ENV` √© 'test' E o nome do banco de dados cont√©m '-test').

---

**IMPLEMENTAR:**
User Story REM-DDD-01.3: Implementar Salvaguardas Anti-Destrui√ß√£o no Ambiente de Teste

**CONTEXT:**
Nossa investiga√ß√£o forense identificou uma fun√ß√£o de limpeza de banco de dados (`cleanTestDatabase`) em nosso helper de teste que √© perigosamente destrutiva. A sua √∫nica prote√ß√£o (`NODE_ENV === 'test'`) √© insuficiente e j√° permitiu a limpeza acidental do banco de dados de desenvolvimento. Precisamos blindar esta fun√ß√£o para que ela nunca mais possa ser executada contra um banco de dados que n√£o seja especificamente dedicado a testes.

**CURRENT STATE:**
O arquivo `tests/lib/db-helper.ts` cont√©m a fun√ß√£o `cleanTestDatabase`. A primeira linha da fun√ß√£o √© um `if (process.env.NODE_ENV !== 'test')` que tenta prevenir a execu√ß√£o. Esta prote√ß√£o se mostrou ineficaz.

**EXPECTED (Estado Final de Sucesso):**
A fun√ß√£o `cleanTestDatabase` em `tests/lib/db-helper.ts` deve ser refatorada para incluir as seguintes salvaguardas **adicionais** e **mandat√≥rias**:
1.  **Verifica√ß√£o do Nome do Banco de Dados:** A fun√ß√£o deve extrair o nome do banco de dados da string de conex√£o (`process.env.DATABASE_URL`). A execu√ß√£o s√≥ pode prosseguir se o nome do banco de dados terminar explicitamente com `-test` (ex: `simpix-db-test`). Se n√£o terminar, a fun√ß√£o deve lan√ßar um erro fatal imediatamente.
2.  **Verifica√ß√£o de Hostname Proibido:** A fun√ß√£o deve verificar se o hostname do banco de dados na `DATABASE_URL` corresponde a qualquer endere√ßo de produ√ß√£o conhecido (esta lista pode estar vazia por agora, mas a estrutura da verifica√ß√£o deve ser implementada). Se for um host de produ√ß√£o, a fun√ß√£o deve lan√ßar um erro fatal.
3.  **Logs de Alerta:** Antes de executar o comando `TRUNCATE`, a fun√ß√£o deve registrar um log de alerta expl√≠cito e de alta visibilidade no console (ex: `console.warn('--- ALERTA: EXECUTANDO LIMPEZA DE BANCO DE DADOS DE TESTE ---')`).
4.  **Remo√ß√£o do CI/CD (Conten√ß√£o Imediata):** O arquivo `.github/workflows/ci.yml` deve ser modificado. A etapa `Run integration tests` que executa `npm run test:integration --if-present` deve ser **comentada ou removida** para desativar o gatilho autom√°tico at√© que a infraestrutura de teste seja considerada 100% segura.

**CONSTRAINTS (Roadmap de Implementa√ß√£o):**
1.  **Modificar `db-helper.ts`:** Edite o arquivo `tests/lib/db-helper.ts` e a fun√ß√£o `cleanTestDatabase`.
2.  **Implementar Verifica√ß√£o de Nome:** Adicione a l√≥gica para analisar a `DATABASE_URL` e impor a regra do sufixo `-test`.
3.  **Implementar Verifica√ß√£o de Hostname:** Adicione a estrutura de verifica√ß√£o de hostname proibido.
4.  **Adicionar Logs de Alerta:** Insira o `console.warn` antes do comando `db.execute`.
5.  **Modificar `ci.yml`:** Edite o arquivo `.github/workflows/ci.yml` e comente a etapa de execu√ß√£o dos testes de integra√ß√£o.
6.  **Valida√ß√£o:** Descreva como voc√™ validaria que as novas prote√ß√µes funcionam (n√£o √© necess√°rio executar os testes, apenas descrever o plano de teste mental).
7.  **Verifica√ß√£o Final:** Execute o protocolo `7-CHECK FULL` e preencha a declara√ß√£o de incerteza.

---
---
[PGI ATIVO | LEMBRETE DE ESTADO DO ROADMAP]
- **Roadmap em Standby:** "üöÄ ROADMAP MESTRE DE IMPLEMENTA√á√ÉO_ OPERA√á√ÉO A√áO L√çQUIDO.md"
- **Pr√≥ximo Passo a ser Retomado:** Milestone M3: Core Business Logic
- **Miss√£o de Emerg√™ncia Atual:** "An√°lise forense de destrui√ß√£o de dados (REM-DDD-01)"
---