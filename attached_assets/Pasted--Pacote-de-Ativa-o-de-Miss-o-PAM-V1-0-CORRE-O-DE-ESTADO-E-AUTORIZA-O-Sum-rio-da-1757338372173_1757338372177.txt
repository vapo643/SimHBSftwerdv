### **Pacote de Ativação de Missão (PAM) V1.0 - CORREÇÃO DE ESTADO E AUTORIZAÇÃO**

* **Sumário da Missão:** Realizar uma correção em duas frentes: (1) Implementar uma estratégia de invalidação de cache agressiva no frontend para garantir que o dashboard e as listas de propostas reflitam o estado mais recente do banco de dados imediatamente após uma mutação. (2) Auditar e corrigir as políticas de segurança (RLS/RBAC) para resolver os erros `403 Forbidden` nos endpoints de métricas e auditoria.

* **Intenção Estratégica:** Garantir a consistência dos dados em toda a interface do usuário e restaurar o acesso a funcionalidades críticas (métricas e histórico), que atualmente estão bloqueadas por falhas de permissão.

* **Contexto Técnico:**
    1.  **Inconsistência de Estado:** A causa raiz é que o dashboard (`dashboard.tsx`) e a fila de análise (`fila.tsx`) estão a usar dados cacheados pelo TanStack Query que não são invalidados quando uma proposta muda de estado na página `editar.tsx`.
    2.  **Falha de Permissão:** As rotas `/api/propostas/metricas` e `/api/propostas/:id/auditoria` estão a ser bloqueadas. Isso indica que as políticas de Row Level Security (RLS) do Supabase para as tabelas subjacentes (ex: `propostas`, `auditoria_propostas`) não concedem acesso de leitura para o `role` do usuário que está a fazer a requisição.

---

**IMPLEMENTAR:**
Invalidação Global de Cache e Correção de Políticas de Acesso

**CURRENT STATE:**
1.  A página `editar.tsx` não invalida as queries usadas pelo dashboard e pela fila de análise.
2.  Os usuários recebem um erro `403 Forbidden` ao tentar aceder a métricas e histórico de auditoria.
3.  O frontend exibe uma tela de erro "Proposta não editável" porque o dashboard mostra um status desatualizado, mas a página de edição busca e reage ao status correto do banco de dados.

**EXPECTED (Estado Final de Sucesso):**
1.  Após um usuário reenviar uma proposta com sucesso na página `editar.tsx`, as queries de dados nas páginas do dashboard e da fila de análise são invalidadas e forçadas a recarregar os dados do backend.
2.  O dashboard e a fila de análise exibem o status correto (`em_analise`) para a proposta que foi reenviada.
3.  O usuário pode aceder à página `editar.tsx` de uma proposta `pendenciado` sem ver a tela de erro.
4.  As chamadas para os endpoints `/api/propostas/metricas` e `/api/propostas/:id/auditoria` devem retornar `HTTP 200 OK` com os dados corretos, sem erros de permissão.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Correção de Invalidação de Cache (Frontend):**
    * Navegue até `client/src/pages/propostas/editar.tsx`.
    * Localize o hook `resubmitMutation`.
    * Dentro do callback `onSuccess` (ou `onSettled` para garantir a execução mesmo em caso de erro), adicione a invalidação para as queries principais do dashboard e da fila. O código deve ser semelhante a:
        ```typescript
        queryClient.invalidateQueries({ queryKey: ['propostas'] });
        queryClient.invalidateQueries({ queryKey: ['dashboard-kpis'] }); // Ou a chave correta para as métricas
        ```
    * Consulte `client/src/hooks/queries/queryKeys.ts` para identificar as chaves de query exatas usadas pelo dashboard e pela fila de análise e invalide-as.

2.  **Correção de Permissões de Métricas e Auditoria (RLS - Banco de Dados):**
    * Esta é uma tarefa de banco de dados. Forneça o seguinte script SQL para ser executado no SQL Editor do Supabase. Ele cria políticas que permitem a um usuário autenticado ler métricas e auditorias de propostas que ele já tem permissão para ver.
        ```sql
        -- Política para a View de Métricas (assumindo que a view se chama vw_metricas_dashboard)
        -- Primeiro, garanta que a RLS está ativa na view
        ALTER VIEW public.vw_metricas_dashboard WITH (security_invoker = on);

        DROP POLICY IF EXISTS "Usuários podem ver métricas da sua instituição" ON public.vw_metricas_dashboard;

        CREATE POLICY "Usuários podem ver métricas da sua instituição"
        ON public.vw_metricas_dashboard
        FOR SELECT
        USING (
          instituicao_id = auth.user_instituicao_id() -- Usando a função helper já existente
        );

        -- Política CORRIGIDA para Auditoria
        DROP POLICY IF EXISTS "Usuários podem ver auditoria de propostas que podem acessar" ON public.auditoria_propostas;

        CREATE POLICY "Usuários podem ver auditoria de propostas que podem acessar"
        ON public.auditoria_propostas
        FOR SELECT
        USING (
          EXISTS (
            SELECT 1
            FROM propostas p
            WHERE p.id = auditoria_propostas.proposta_id
            -- A política RLS da tabela 'propostas' será aplicada implicitamente aqui,
            -- garantindo que o usuário só possa ver a auditoria se puder ver a proposta.
          )
        );
        ```

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** **BAIXO** - O principal risco é que a invalidação de muitas queries possa causar um "efeito cascata" de requisições, mas dado o contexto, é uma ação necessária para garantir a consistência. A política de RLS para as métricas assume a existência de uma view `vw_metricas_dashboard` com uma coluna `instituicao_id`; se o nome for diferente, precisará de ajuste.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que as chaves de query são gerenciadas de forma centralizada e são facilmente identificáveis para a invalidação. As falhas de permissão são puramente de RLS e não de lógica de autorização na camada da aplicação.
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deve validar rigorosamente o fluxo de ponta a ponta: criar uma proposta, movê-la para pendente, corrigi-la, reenviá-la e confirmar que (a) o dashboard atualiza, (b) a página de edição não quebra mais ao ser acedida, e (c) os logs de auditoria e as métricas carregam sem erros de permissão.