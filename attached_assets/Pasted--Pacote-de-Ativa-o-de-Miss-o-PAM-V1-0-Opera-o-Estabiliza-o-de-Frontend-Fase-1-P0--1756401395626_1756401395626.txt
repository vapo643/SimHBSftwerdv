### Pacote de Ativação de Missão (PAM) V1.0 - Operação "Estabilização de Frontend" / Fase 1 (P0)

* **Sumário da Missão (O Quê):** Corrigir o erro crítico de renderização do DOM (`Failed to execute 'removeChild' on 'Node'`) no componente do Dashboard, que está a quebrar a aplicação após o login.
* **Intenção Estratégica (O Porquê):** Restaurar a funcionalidade básica da aplicação para utilizadores autenticados. Este erro P0 impede qualquer interação com o sistema, tornando a sua resolução um bloqueador para todas as outras atividades de desenvolvimento e validação.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de frontend sênior a depurar um erro complexo de renderização no React. A causa raiz provável é uma "race condition" na renderização condicional de *hooks*, onde a UI tenta remover um nó do DOM que já foi removido ou nunca existiu no local esperado.

---

**IMPLEMENTAR (Plano de Remediação):**
Execute a seguinte sequência de ações no ficheiro `client/src/pages/dashboard.tsx`.

**CURRENT STATE:**
O componente `Dashboard` contém uma lógica de renderização condicional que causa um erro fatal de manipulação do DOM quando o estado de autenticação muda ou os dados são carregados.

**EXPECTED (Estado Final de Sucesso):**
1.  O erro `Failed to execute 'removeChild' on 'Node'` foi eliminado.
2.  O Dashboard renderiza um estado de *loading* (esqueleto) de forma estável enquanto os dados são carregados.
3.  Após o carregamento, o Dashboard exibe os dados ou um estado de erro de forma estável, sem quebrar a aplicação.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Implementar um Padrão de Retorno Antecipado (Early Return)**
1.1. No ficheiro `client/src/pages/dashboard.tsx`, localize o início do componente funcional `Dashboard`.
1.2. Antes da declaração de quaisquer *hooks* condicionais ou da lógica de renderização principal, implemente uma verificação para os estados de `loading` e `error` da query principal (`useQuery`).
1.3. Se a query estiver em estado de `loading`, retorne imediatamente um componente de *skeleton* (esqueleto).
1.4. Se a query estiver em estado de `error`, retorne imediatamente um componente de mensagem de erro.
    ```typescript
    // Exemplo de implementação
    const { data: propostas, isLoading, isError, error } = useQuery({ ... });

    if (isLoading) {
      return <DashboardSkeleton />; // Componente de skeleton a ser criado se não existir
    }

    if (isError) {
      return <ErrorDisplay message={error.message} />; // Componente de erro
    }

    // ... resto da lógica de renderização do componente
    ```

**Passo 2: Estabilizar a Lógica de Redirecionamento**
2.1. Inspecione o componente `ProtectedRoute.tsx`. Confirme que a lógica de redirecionamento (`setLocation('/login')`) é a primeira verificação a ser feita e que ela causa um retorno imediato, prevenindo a renderização dos componentes filhos (`children`) se o utilizador não estiver autenticado.

**Passo 3: Validação Final**
3.1. Apresente o código refatorado do componente `client/src/pages/dashboard.tsx` com o padrão de *early return* implementado.
3.2. Confirme que o servidor reiniciou e que a aplicação agora carrega a página do dashboard sem o erro de DOM.
3.3. Execute `get_latest_lsp_diagnostics` para garantir a integridade do código.

---

### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**
Liste a totalidade das suas descobertas, riscos e recomendações.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS (LISTA COMPLETA):**
    * **Risco 1 (Médio):** A causa raiz pode ser mais profunda do que uma simples *race condition*, envolvendo a forma como o `wouter` interage com o `ProtectedRoute` e o ciclo de vida do React. O *early return* é a mitigação mais provável.
* **DECISÕES TÉCNICAS ASSUMIDAS (LISTA COMPLETA):**
    * A estratégia principal de correção é isolar a renderização do componente principal até que todos os dados e estados necessários (autenticação e dados da query) estejam resolvidos.
* **VALIDAÇÃO PENDENTE (LISTA COMPLETA):**
    * A Fase 2 (Estabilização de Hooks) deste roadmap ainda será necessária para garantir a robustez a longo prazo.
    * O teste funcional completo do fluxo de login e dashboard é mandatório.