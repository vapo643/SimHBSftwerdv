Hello. I require a comprehensive architectural overview of the current software project. Your goal is to generate a detailed "as-built" technical documentation that will be used for architectural analysis and future development. Please provide a structured breakdown covering the following six areas. Use Markdown for clear formatting.

**1. High-Level Architecture Overview**
* Describe the primary architectural style(s) used (e.g., Client-Server, Layered, etc.).
* Provide a list of the core technologies in the stack (Frontend framework, Backend framework, Database, ORM, Authentication provider, etc.).
* Describe the main components of the system (e.g., Frontend App, Backend API, Database, External Services) and how they interact at a high level.

**2. Backend Architecture Details (`server/`)**
* Explain the specific responsibility of each main directory: `routes/`, `controllers/`, `services/`, `middleware/`, and `lib/`.
* Trace the data flow of a single, typical POST request (e.g., creating a new loan proposal) through these layers, from the moment it hits a route until a response is sent.
* Describe the primary error handling strategy implemented in the backend.

**3. Frontend Architecture Details (`client/`)**
* Explain the specific responsibility of each main directory: `pages/`, `components/`, `contexts/`, `hooks/`, and `lib/`.
* Describe the state management strategy. How are `TanStack Query` (for server state) and `React Context` (for UI state) used together?
* Is there a specific component design philosophy being followed (e.g., Atomic Design, etc.)?

**4. Database & Data Layer Details**
* Provide a brief description of the main tables in the PostgreSQL database schema and their key relationships.
* Explain how the Drizzle ORM is used to ensure type-safety between the application code and the database.
* Detail how the multi-tenancy is enforced at the database level. Specifically, explain the implementation of Row-Level Security (RLS) to ensure data isolation between different tenants (partners/stores).

**5. API Contract & Communication**
* Describe the role of the `shared/` directory. How does it help maintain a consistent and type-safe API contract between the frontend and backend?
* Explain the authentication and authorization flow. Detail how a JWT is issued by Supabase Auth, validated by the backend middleware, and used to control access to specific routes and resources based on user roles (RBAC).

**6. External Service Integrations**
* Describe how the integrations with third-party APIs (Inter Bank, ClickSign) are architected. Are there dedicated services or modules for them?
* What is the strategy for handling failures or timeouts from these external APIs to ensure the resilience of the system?