# MISSÃO: Criação do Protótipo Funcional "simpix"

**PERSONA:** Você é um Engenheiro de Software Sênior, especialista em desenvolver aplicações web robustas e escaláveis.

**CONTEXTO:** Estamos criando o protótipo funcional de um sistema de gestão de crédito chamado "simpix". O protótipo deve permitir o fluxo completo de uma proposta, desde a criação até o envio para pagamento, com dados sendo salvos em um banco de dados real.

**AÇÃO:** Crie um novo projeto Replit contendo um protótipo funcional completo do "simpix", seguindo estritamente a stack tecnológica e as funcionalidades detalhadas abaixo.

**DADOS (STACK TECNOLÓGICA):**
* **Linguagem:** TypeScript
* **Framework Frontend:** React
* **Framework Backend:** Express.js
* **Estilização:** Tailwind CSS
* **Validação de Formulários:** react-hook-form
* **Backend & Banco de Dados:** Supabase (utilizando Autenticação, Banco de Dados PostgreSQL e Storage)

**PASSOS (FUNCIONALIDADES OBRIGATÓRIAS):**

1.  **Autenticação (F-ADM-01):**
    * Crie uma página de login em `/login`.
    * Implemente a autenticação de usuários via email e senha utilizando o **Supabase Auth**.
    * Crie uma rota no backend Express.js para lidar com o login e crie um mecanismo no frontend React para proteger rotas da aplicação, redirecionando usuários não logados para a página `/login`.

2.  **Layout Principal (`DashboardLayout`):**
    * Crie um componente de layout reutilizável que inclua uma barra de navegação lateral (sidebar).
    * A sidebar deve conter os links de navegação para todas as telas principais do protótipo.

3.  **Tela T-06 - Dashboard de Propostas (F-VEN-01):**
    * Esta deve ser a página principal (`/dashboard`) para o usuário logado.
    * Deve conter um botão "Criar Nova Proposta".
    * Deve exibir uma tabela listando as propostas criadas, lendo os dados da tabela "propostas" do Supabase através de uma rota no backend Express.js. Colunas: ID, Cliente, Valor, Status.

4.  **Tela T-01 - Nova Proposta de Crédito (F-VEN-02, 04, 06):**
    * Crie a página em `/propostas/nova`.
    * Implemente um formulário com abas ("Dados do Cliente", "Condições do Empréstimo", "Anexo de Documentos").
    * Ao submeter, o formulário deve enviar os dados para uma rota no backend Express.js que irá salvá-los na tabela "propostas" do Supabase e fazer upload dos arquivos para o **Supabase Storage**.

5.  **Tela T-02 - Fila de Análise de Crédito (F-CRE-01):**
    * Crie a página em `/credito/fila`.
    * Deve exibir uma tabela de propostas lidas do Supabase (via backend), com funcionalidades de filtro por status e busca.
    * Cada linha deve ter um botão "Analisar".

6.  **Tela T-03 - Painel de Análise Manual (F-CRE-03):**
    * Crie a página dinâmica em `/credito/analise/[id]`.
    * A página deve carregar os dados de uma proposta específica do Supabase (via backend).
    * Deve conter um painel de decisão que permita a um usuário enviar uma requisição ao backend para **ATUALIZAR** o status da proposta no banco de dados.

7.  **Tela T-04 - Acompanhamento da Formalização:**
    * Crie a página em `/formalizacao/acompanhamento/[id]`.
    * Deve exibir o status das etapas de formalização (lendo o status atual da proposta do Supabase via backend).

8.  **Tela T-05 - Fila de Pagamento (F-FIN-01):**
    * Crie a página em `/financeiro/pagamentos`.
    * Deve exibir em uma tabela apenas as propostas do Supabase que estão com o status "Aprovado" ou "Pronto para Pagamento".

**FORMATO (Estrutura de Arquivos Sugerida):**
* Organize os componentes em `/src/components`.
* Organize as páginas do frontend em `/src/pages`.
* Crie uma pasta `/server` para todo o código do backend Express.js.
* Organize as funções de interação com o Supabase em `/server/lib/supabase`.

**EXEMPLO:** A página de login deve ser limpa, profissional e conter campos para email, senha e um botão de "Entrar".

Execute este plano.