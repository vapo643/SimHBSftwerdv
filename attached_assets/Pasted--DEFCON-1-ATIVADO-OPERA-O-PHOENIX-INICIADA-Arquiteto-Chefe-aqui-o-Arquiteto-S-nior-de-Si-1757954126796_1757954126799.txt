**DEFCON 1 ATIVADO. OPERA√á√ÉO PHOENIX INICIADA.**

Arquiteto-Chefe, aqui √© o Arquiteto S√™nior de Sistemas Cr√≠ticos. A situa√ß√£o √© P0. O diagn√≥stico est√° confirmado: **Falha Catastr√≥fica de Autentica√ß√£o devido a Mismatch de JWT Secret e Contamina√ß√£o de Ambiente.** O Frontend (Projeto A) gera tokens que o Backend (validando com Secret B) rejeita.

Temos 30 minutos para restaurar a produ√ß√£o. Execute este plano **EXATAMENTE** como descrito.

-----

## üî• FASE 1: RESSUSCITA√á√ÉO DE EMERG√äNCIA (0-30 MINUTOS)

**OBJETIVO:** Alinhar Frontend e Backend no MESMO JWT Secret AGORA.

### ‚úÖ A√á√ÉO 1.1: IDENTIFICA√á√ÉO FORENSE DO PROJETO ATIVO (Minuto 0-5)

Precisamos identificar qual projeto Supabase o Frontend de produ√ß√£o est√° usando.

1.  **COMANDO (Navegador em `sistemasimpix.com.br`):**

      * Abra o Developer Tools (F12) -\> Console.
      * Localize o log: `[PASSO 3 - ENVIO] { ... authorizationHeader: 'Bearer <TOKEN>' ... }`.
      * **COPIE O TOKEN JWT COMPLETO** (a string longa ap√≥s `Bearer`).

2.  **COMANDO (Ferramenta Externa):**

      * Acesse `https://jwt.io`.
      * Cole o Token no campo "Encoded".
      * No campo "Decoded" (PAYLOAD), localize a chave `iss` (Issuer).
      * **ANOTE O ID DO PROJETO.** Ex: `https://<PROJECT_ID>.supabase.co/auth/v1`.

<!-- end list -->

  * **VALIDA√á√ÉO:** Voc√™ possui o `<PROJECT_ID>` que o frontend est√° usando.

### ‚úÖ A√á√ÉO 1.2: EXTRA√á√ÉO DO JWT SECRET CORRETO (Minuto 5-15)

1.  **COMANDO (Console Supabase):**
      * Acesse `https://app.supabase.com/project/<PROJECT_ID>/settings/api` (Use o ID da A√ß√£o 1.1).
      * Role at√© **JWT Settings**.
      * Localize `JWT Secret`. **ATEN√á√ÉO:** N√ÉO √© `anon key` nem `service_role key`.
      * Clique em "Reveal" e **COPIE O VALOR EXATO**.

<!-- end list -->

  * **VALIDA√á√ÉO:** Voc√™ possui o segredo de assinatura correto.

### ‚úÖ A√á√ÉO 1.3: INJE√á√ÉO CIR√öRGICA E DESCONTAMINA√á√ÉO (Minuto 15-25)

1.  **COMANDO (Painel de Deploy de Produ√ß√£o - Vercel/AWS/Replit):**
      * Acesse as Vari√°veis de Ambiente do Backend.
      * **ADICIONE/SOBRESCREVA** a vari√°vel `SUPABASE_JWT_SECRET` com o valor copiado na A√ß√£o 1.2.
      * **REMOVA IMEDIATAMENTE** as vari√°veis conflitantes:
          * `PROD_JWT_SECRET`
          * `DEV_JTW_SECRET` (Aten√ß√£o ao typo 'JTW' conforme relat√≥rio)
2.  **COMANDO (Deploy):**
      * **EXECUTE REDEPLOY IMEDIATO DO BACKEND.**

<!-- end list -->

  * **VALIDA√á√ÉO:** Backend reiniciado usando exclusivamente `SUPABASE_JWT_SECRET`.

### ‚úÖ A√á√ÉO 1.4: VALIDA√á√ÉO DE VIDA (Minuto 25-30)

1.  **COMANDO (Navegador - Aba An√¥nima):**
      * Acesse `https://sistemasimpix.com.br/dashboard`. Fa√ßa login se necess√°rio.
      * Observe a aba Network (F12).

<!-- end list -->

  * **SUCESSO (P0 RESOLVIDO):**

      * ‚úÖ Requisi√ß√µes para `/api/debug/me` retornam `HTTP 200 OK`.
      * ‚úÖ O loop infinito parou.
      * ‚ùå NENHUM erro 401 Unauthorized.

  * **üö® SE FALHAR (401 persiste):** O Secret ou Projeto ID estava errado. REPITA A FASE 1 IMEDIATAMENTE. N√£o prossiga at√© que a Fase 1 seja validada.

-----

## üõ°Ô∏è FASE 2: BLINDAGEM ARQUITETURAL (30-120 MINUTOS)

**OBJETIVO:** Erradicar a contamina√ß√£o de ambiente e prevenir regress√µes futuras.

### ‚úÖ A√á√ÉO 2.1: DESCONTAMINA√á√ÉO DO C√ìDIGO (Minuto 30-60)

Eliminar a l√≥gica condicional t√≥xica no c√≥digo. A configura√ß√£o deve ser expl√≠cita e falhar r√°pido.

1.  **ARQUIVO:** `server/lib/config.ts` (ou onde `getJwtSecret` estiver definido).

2.  **MODIFICA√á√ÉO (Substituir l√≥gica existente):**

<!-- end list -->

```typescript
// server/lib/config.ts

// ‚ùå REMOVER QUALQUER FUN√á√ÉO COMO detectEnvironmentFromDomain()

// ‚úÖ SUBSTITUIR getJwtSecret() por vers√£o EXPL√çCITA e SEGURA:
export function getJwtSecret(): string {
  // A configura√ß√£o DEVE vir explicitamente do ambiente. Sem fallbacks, sem magia.
  const secret = process.env.SUPABASE_JWT_SECRET;

  if (!secret) {
    console.error('üö® FATAL ERROR (OPERA√á√ÉO PHOENIX): SUPABASE_JWT_SECRET n√£o est√° configurado.');
    // Em produ√ß√£o, devemos falhar r√°pido se a configura√ß√£o cr√≠tica estiver ausente.
    if (process.env.NODE_ENV === 'production') {
        console.error('üö® Encerrando aplica√ß√£o para prevenir falhas de seguran√ßa.');
        process.exit(1);
    }
    throw new Error('Segredo JWT obrigat√≥rio n√£o configurado (SUPABASE_JWT_SECRET).');
  }

  // Log de confirma√ß√£o seguro (apenas comprimento)
  console.log(`[CONFIG] ‚úÖ Segredo JWT carregado com sucesso (Length: ${secret.length})`);
  return secret;
}

// APLICAR O MESMO PADR√ÉO PARA OUTRAS CONFIGURA√á√ïES CR√çTICAS (URL, Keys).
```

  * **VALIDA√á√ÉO:** O c√≥digo n√£o cont√©m mais `if (process.env.NODE_ENV === 'production')` para sele√ß√£o de secrets.

### ‚úÖ A√á√ÉO 2.2: PURGA DE SECRETS NO AMBIENTE (Minuto 60-75)

Limpeza total do ambiente de produ√ß√£o.

1.  **COMANDO (Painel de Deploy de Produ√ß√£o):**

      * Remova PERMANENTEMENTE as seguintes vari√°veis restantes (al√©m das removidas na A√ß√£o 1.3):

    <!-- end list -->

    ```bash
    # Contamina√ß√£o DEV
    DEV_DATABASE_URL
    DEV_SUPABASE_SERVICE_ROLE_KEY
    DEV_SUPABASE_ANON_KEY
    DEV_SUPABASE_URL

    # Duplicatas Confusas
    VITE_PROD_SUPABASE_URL
    VITE_PROD_SUPABASE_ANON_KEY
    PROD_SUPABASE_URL
    PROD_DATABASE_URL
    ```

<!-- end list -->

  * **VALIDA√á√ÉO:** O ambiente cont√©m APENAS o conjunto can√¥nico (Ex: `SUPABASE_URL`, `VITE_SUPABASE_URL`, `DATABASE_URL`).

### ‚úÖ A√á√ÉO 2.3: IMPLEMENTA√á√ÉO DE GUARDA ANTI-REGRESS√ÉO (Minuto 75-100)

Adicionar valida√ß√£o rigorosa na inicializa√ß√£o do servidor (Fail Fast).

1.  **ARQUIVO:** `server/index.ts` (Ponto de entrada do servidor).

2.  **MODIFICA√á√ÉO (Adicionar no in√≠cio do arquivo, ap√≥s carregar envs):**

<!-- end list -->

```typescript
// server/index.ts

// üõ°Ô∏è GUARDA DE INTEGRIDADE DE CONFIGURA√á√ÉO (OPERA√á√ÉO PHOENIX V4.0)
function validateCriticalConfiguration() {
  console.log('[BOOTSTRAP] Iniciando Valida√ß√£o de Configura√ß√£o Cr√≠tica...');
  let failed = false;

  const CRITICAL_SECRETS = [
    'DATABASE_URL', 'SUPABASE_URL', 'SUPABASE_JWT_SECRET',
    'VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'
  ];

  // 1. Checar Secrets Obrigat√≥rios
  CRITICAL_SECRETS.forEach(secret => {
    if (!process.env[secret]) {
      console.error(`üö® FATAL: Vari√°vel obrigat√≥ria ausente: ${secret}`);
      failed = true;
    }
  });

  // 2. Checar Mismatch Frontend/Backend (One Project Rule)
  const frontendUrl = process.env.VITE_SUPABASE_URL;
  const backendUrl = process.env.SUPABASE_URL;

  if (frontendUrl && backendUrl && frontendUrl !== backendUrl) {
    console.error('üö® FATAL: Mismatch de Projeto Supabase! Frontend e Backend est√£o usando URLs diferentes.');
    console.error(`Frontend URL (VITE_): ${frontendUrl} | Backend URL: ${backendUrl}`);
    failed = true;
  }

  // 3. Checar Contamina√ß√£o (Apenas em Produ√ß√£o)
  if (process.env.NODE_ENV === 'production') {
      const CONTAMINANTS = ['DEV_DATABASE_URL', 'DEV_SUPABASE_URL', 'DEV_JTW_SECRET', 'PROD_JWT_SECRET'];
      CONTAMINANTS.forEach(secret => {
          if (process.env[secret]) {
              console.error(`üö® FATAL: Contamina√ß√£o detectada! Secret proibido encontrado em produ√ß√£o: ${secret}`);
              failed = true;
          }
      });
  }

  if (failed) {
    console.error('‚ùå [BOOTSTRAP] Configura√ß√£o inv√°lida. Encerrando processo para prevenir falhas catastr√≥ficas.');
    process.exit(1); // FALHAR R√ÅPIDO E ALTO
  }

  console.log('‚úÖ [BOOTSTRAP] Configura√ß√£o cr√≠tica validada com sucesso.');
}

// Executar valida√ß√£o imediatamente antes de iniciar o servidor
validateCriticalConfiguration();

// ... (Restante do c√≥digo de inicializa√ß√£o, ex: app.listen())
```

  * **VALIDA√á√ÉO:** O servidor s√≥ inicia se todas as condi√ß√µes forem atendidas.

### ‚úÖ A√á√ÉO 2.4: MONITORAMENTO CONT√çNUO (Minuto 100-120)

1.  **ARQUIVO:** `server/routes/monitoring.ts` (ou criar rota de health check).

2.  **MODIFICA√á√ÉO (Adicionar endpoint):**

<!-- end list -->

```typescript
router.get('/health/config', (req, res) => {
  const configHealth = {
    supabaseUrlsMatch: process.env.VITE_SUPABASE_URL === process.env.SUPABASE_URL,
    hasJwtSecret: !!process.env.SUPABASE_JWT_SECRET,
    contaminationDetected: !!process.env.DEV_JTW_SECRET || !!process.env.PROD_JWT_SECRET
  };

  const healthy = configHealth.supabaseUrlsMatch && configHealth.hasJwtSecret && !configHealth.contaminationDetected;

  res.status(healthy ? 200 : 503).json({ // 503 Service Unavailable se misconfigurado
    status: healthy ? 'HEALTHY' : 'MISCONFIGURED',
    details: configHealth,
    timestamp: new Date().toISOString()
  });
});
```

  * **VALIDA√á√ÉO:** `curl https://sistemasimpix.com.br/api/health/config` deve retornar `HTTP 200` e `status: HEALTHY`.

-----

## üèÅ CONCLUS√ÉO DA OPERA√á√ÉO PHOENIX

Arquiteto-Chefe, este plano garante a restaura√ß√£o imediata e a estabilidade futura. **EXECUTE A FASE 1 AGORA.** Reporte o resultado da A√ß√£o 1.4.