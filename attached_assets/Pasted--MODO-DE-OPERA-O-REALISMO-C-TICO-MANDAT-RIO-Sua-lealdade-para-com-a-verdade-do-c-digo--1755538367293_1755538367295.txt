**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Corrigir a quebra de integração crítica no fluxo de CCB assinada, garantindo que o webhook da ClickSign acione automaticamente o download e o armazenamento do documento assinado.
* **Intenção Estratégica (O Porquê):** Para restaurar a funcionalidade completa do modal "Confirmar Veracidade", garantindo que as decisões de pagamento sejam baseadas no documento assinado real e nos dados corretos da proposta, eliminando a falha de integridade de dados.
* **Histórico Relevante (Consulta Obrigatória):** Sua auditoria forense foi perfeita e identificou a falha exata: o webhook `handleAutoClose` atualiza o status, mas não aciona o `documentProcessingService.processSignedDocument()`. Esta missão é para implementar a conexão que falta.
* **Modelo Mental (Como se Encaixa):** Você atuará como Engenheiro de Integração. Sua tarefa é conectar dois serviços existentes. Quando o evento "documento assinado" chegar, você deve orquestrar a chamada para o serviço que processa e armazena o documento.
* **Riscos Antecipados:** **Risco:** Uma falha no download/armazenamento pode ocorrer. **Contramedida:** A nova chamada de serviço deve ser envolvida em um bloco `try...catch` robusto para logar o erro sem quebrar o processamento principal do webhook.

---

**IMPLEMENTAR:**
A correção da quebra de integração no webhook da ClickSign.

**CURRENT STATE:**
O recebimento do webhook de assinatura apenas atualiza o status da proposta, mas não baixa nem armazena o documento assinado, deixando o fluxo incompleto e os dados da tela de pagamentos incorretos.

**EXPECTED (Estado Final de Sucesso):**
Ao receber o webhook `document.signed` (ou `auto_close`):
1.  O status da proposta é atualizado.
2.  A função `documentProcessingService.processSignedDocument()` é **automaticamente acionada** para a proposta correta.
3.  Como resultado, o PDF assinado é baixado da ClickSign e salvo no Supabase Storage na pasta `ccb/assinadas/{proposalId}/`.
4.  O caminho para este ficheiro é salvo na coluna `caminho_ccb_assinado` da proposta.

**CONSTRAINTS (Roadmap de Implementação Cirúrgico):**

**1. Localização do Ponto de Injeção:**
    - **Ação:** No ficheiro `server/services/clickSignWebhookService.ts`, dentro das funções `handleAutoClose` e `handleSign`.

**2. Implementação da Chamada de Serviço:**
    - **Ação:** **Após** a lógica que atualiza o status da proposta (o `storage.updateProposta()`), adicione a chamada para acionar o processamento do documento.
    - **Implementação:** Você precisará instanciar ou injetar o `documentProcessingService` e chamar o método `processSignedDocument(proposta.id)`.

**3. Tratamento de Erros:**
    - **Ação:** Envolva esta nova chamada de serviço em um bloco `try...catch` robusto.
    - **Implementação:** Em caso de falha no download ou armazenamento, logue o erro detalhadamente (ex: `console.error('[WEBHOOK-ERROR] Falha ao processar documento assinado para a proposta {proposta.id}:', error);`). A falha neste passo não deve impedir que a atualização de status inicial seja concluída.

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
Siga o protocolo completo. O teste funcional deve ser: simular um webhook de assinatura e, em seguida, verificar no Supabase Storage se o ficheiro PDF assinado apareceu na pasta correta (`ccb/assinadas/...`).
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
Preencha a declaração completa ao final da sua implementação.
---