### Pacote de Ativa√ß√£o de Miss√£o (PAM) N√çVEL DE CRISE - OPERA√á√ÉO CORRENTE DE CONFIAN√áA V2

* **Sum√°rio da Miss√£o:** Erradicar a falha de configura√ß√£o de ambiente que est√° a causar um "apag√£o" total em produ√ß√£o e desenvolvimento. A miss√£o consiste em duas fases: uma **Fase de Diagn√≥stico N√£o Invasivo** para mapear o fluxo de configura√ß√£o atual e uma **Fase de Corre√ß√£o Cir√∫rgica** para refatorar o c√≥digo, eliminando a l√≥gica de dete√ß√£o de ambiente e estabelecendo uma √∫nica fonte de verdade para as configura√ß√µes.
* **Inten√ß√£o Estrat√©gica:** Restaurar a operacionalidade do sistema em todos os ambientes e implementar uma arquitetura de configura√ß√£o robusta que previna, de forma definitiva, a recorr√™ncia deste erro de "contamina√ß√£o de ambiente". A confian√ßa no sistema deve ser restabelecida atrav√©s da transpar√™ncia e da elimina√ß√£o de "magia" no c√≥digo.

---

**[DIRETRIZ DE PESQUISA WEB (MANDAT√ìRIA)]**

* Durante esta miss√£o, voc√™ deve consultar a documenta√ß√£o oficial da **Supabase** e do **Vite.js** sobre as melhores pr√°ticas para o manuseamento de vari√°veis de ambiente (`environment variables`) em aplica√ß√µes full-stack, especialmente a distin√ß√£o entre vari√°veis de build-time (prefixo `VITE_`) e runtime.

---

### **FASE 1: DIAGN√ìSTICO E MAPEAMENTO DA CONTAMINA√á√ÉO (AUDITORIA N√ÉO INVASIVA)**

**N√ÉO MODIFIQUE NENHUM C√ìDIGO NESTA FASE. SUA MISS√ÉO √â APENAS INSERIR LOGS.**

**1. Instrumenta√ß√£o do Backend:**
    * Abra `server/lib/config.ts`.
    * No in√≠cio da fun√ß√£o `getJwtSecret()`, adicione um log detalhado para expor as vari√°veis que ela est√° a ler:
        ```typescript
        console.log('[DIAGNOSTICO JWT] Tentando obter segredo. Valores atuais:', {
          NODE_ENV: process.env.NODE_ENV,
          DOMAIN: process.env.REPL_SLUG ? `${process.env.REPL_SLUG}.replit.dev` : 'localhost',
          DEV_JTW_SECRET_EXISTS: !!process.env.DEV_JTW_SECRET,
          PROD_JWT_SECRET_EXISTS: !!process.env.PROD_JWT_SECRET,
          SUPABASE_JWT_SECRET_EXISTS: !!process.env.SUPABASE_JWT_SECRET
        });
        ```

**2. Instrumenta√ß√£o do Frontend:**
    * Abra `client/src/lib/supabase.ts`.
    * Modifique a fun√ß√£o `getSupabase` para expor as vari√°veis com que o cliente Supabase est√° a ser inicializado:
        ```typescript
        console.log('[DIAGNOSTICO SUPABASE FE] Inicializando cliente com:', {
          URL: import.meta.env.VITE_SUPABASE_URL,
          ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY
        });
        ```

**3. Relat√≥rio de Diagn√≥stico:**
    * Reinicie a aplica√ß√£o de **desenvolvimento (Preview)**.
    * Tente fazer login.
    * Colete e apresente os logs do **console do servidor (backend)** e do **console do navegador (frontend)** que cont√™m o prefixo `[DIAGNOSTICO]`.
    * Execute o mesmo procedimento para o ambiente de **produ√ß√£o (Deploy)** e apresente os logs.

**EXPECTED (Entreg√°vel da Fase 1):** Um relat√≥rio claro mostrando o *mismatch*: os logs do frontend mostrar√£o as vari√°veis de produ√ß√£o, enquanto os logs do backend no ambiente de preview mostrar√£o que ele est√° a usar o `DEV_JTW_SECRET`.

---

### **FASE 2: CORRE√á√ÉO CIR√öRGICA E BLINDAGEM DO AMBIENTE**

**APENAS AP√ìS A CONCLUS√ÉO E AN√ÅLISE DA FASE 1, EXECUTE ESTAS MODIFICA√á√ïES.**

**1. Erradica√ß√£o da L√≥gica de Dete√ß√£o de Ambiente (Backend):**
    * Abra `server/lib/config.ts`.
    * **Refatore a fun√ß√£o `getJwtSecret`**. Elimine completamente a fun√ß√£o `detectEnvironmentFromDomain` e todas as condicionais `if (environmentType === ...)` de dentro dela. A nova fun√ß√£o deve ler **apenas uma vari√°vel**, que ser√° a `SUPABASE_JWT_SECRET`. Ela deve falhar ruidosamente se a vari√°vel n√£o estiver definida.
        ```typescript
        // VERS√ÉO FINAL E SEGURA da getJwtSecret
        function getJwtSecret(): string {
          const secret = process.env.SUPABASE_JWT_SECRET;
          if (!secret) {
            console.error('[CONFIG] üö® FALHA CR√çTICA: A vari√°vel de ambiente SUPABASE_JWT_SECRET n√£o est√° definida. O servi√ßo de autentica√ß√£o n√£o pode iniciar.');
            throw new Error('Segredo JWT n√£o configurado.');
          }
          console.log('[CONFIG] ‚úÖ Segredo JWT carregado com sucesso.');
          return secret;
        }
        ```
    * Realize a mesma simplifica√ß√£o para as URLs de banco de dados e outras configura√ß√µes. O c√≥digo NUNCA deve tentar adivinhar o ambiente. Ele deve ler vari√°veis gen√©ricas como `DATABASE_URL`, `SUPABASE_URL`, etc.

**2. Centraliza√ß√£o da Configura√ß√£o do Cliente Supabase (Frontend):**
    * Abra `client/src/lib/supabase.ts`.
    * Garanta que ele l√™ **apenas** `VITE_SUPABASE_URL` e `VITE_SUPABASE_ANON_KEY`. Remova quaisquer outras vari√°veis de ambiente com prefixo `DEV_` ou `PROD_` do lado do cliente.

**3. Valida√ß√£o de Inicializa√ß√£o (Startup Check):**
    * No arquivo principal do servidor (`server/index.ts`), antes de iniciar o servidor Express (`app.listen`), adicione um bloco de verifica√ß√£o que chame a fun√ß√£o `getJwtSecret()` e outras fun√ß√µes de configura√ß√£o cr√≠ticas dentro de um `try...catch`. Se qualquer uma delas falhar, o processo deve terminar com um erro claro (`process.exit(1)`), garantindo que o servidor nunca inicie num estado inconsistente.

**EXPECTED (Entreg√°vel Final):**
1.  O c√≥digo-fonte modificado e limpo.
2.  Um relat√≥rio confirmando que a l√≥gica de dete√ß√£o de ambiente foi removida.
3.  Uma instru√ß√£o clara para o Arquiteto Chefe (eu) sobre como limpar os `Secrets` do Replit, deixando apenas um conjunto de vari√°veis para cada ambiente (DEV e PROD), sem contamina√ß√£o cruzada.