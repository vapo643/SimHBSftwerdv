**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Refatorar o frontend da "Tela de Cobranças" para implementar a interface do usuário (UI) do novo workflow de aprovação hierárquico para as ações de "Prorrogar Vencimento" e "Aplicar Desconto".
* **Intenção Estratégica (O Porquê):** O backend agora possui um sistema de aprovação seguro, mas a interface do usuário ainda não reflete esta nova realidade. Esta missão é para conectar o frontend a esta nova lógica, garantindo que os cobradores possam solicitar ações e que os supervisores possam aprová-las, tornando o processo 100% funcional.
* **Histórico Relevante (Consulta Obrigatória):** O backend foi completamente refatorado. Os endpoints antigos para executar ações diretamente foram substituídos por endpoints de `/solicitar-...`. Novos endpoints para o supervisor (`/solicitacoes`, `/solicitacoes/:id/aprovar`, etc.) foram criados. Sua missão é fazer com que a UI consuma esta nova arquitetura.
* **Modelo Mental (Como se Encaixa):** Você atuará como Engenheiro de Frontend. A lógica da "Tela de Cobranças" se tornará condicional, baseada na role do usuário. Um `COBRADOR` verá botões de "Solicitar". Um `SUPERVISOR_COBRANCA` verá uma nova seção para "Aprovações Pendentes".
* **Riscos Antecipados:** **Risco:** A complexidade da UI condicional pode levar a bugs visuais. **Contramedida:** A implementação deve ser bem estruturada, usando componentes separados para a visão do Cobrador e a do Supervisor.

---

**IMPLEMENTAR:**
A refatoração completa do frontend da "Tela de Cobranças" para suportar o novo workflow de aprovação.

**CURRENT STATE:**
A UI possui botões de "Prorrogar" e "Desconto" que, se clicados, chamarão endpoints agora obsoletos. Não existe nenhuma interface para um `SUPERVISOR_COBRANCA`.

**EXPECTED (Estado Final de Sucesso):**
Uma interface de usuário dinâmica e segura que se adapta à role do usuário:
1.  **Para a role `COBRANCA`:** Os botões "Prorrogar" e "Desconto" agora abrem um modal que submete uma *solicitação* para o backend (chamando os endpoints `/solicitar-...`), incluindo a observação obrigatória.
2.  **Para a role `SUPERVISOR_COBRANCA`:** A tela exibe uma nova seção ou um badge no topo, indicando "Aprovações Pendentes". Ao clicar, um modal ou uma nova área na tela exibe a lista de solicitações, permitindo que o supervisor veja os detalhes, a observação do cobrador e clique em "Aprovar" ou "Rejeitar".
3.  A tabela principal agora reflete a nova **ordenação inteligente** (Inadimplentes no topo, etc.) que foi implementada no backend.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Refatoração da UI do Cobrador:**
    - **Ação:** Modifique os modais de "Prorrogar Vencimento" e "Aplicar Desconto" em `CobrancasPage.tsx`.
    - **Implementação:** Altere a função de submissão para que ela chame os novos endpoints de **solicitação** (`POST /api/cobrancas/solicitar-...`). Garanta que o campo de observação seja enviado no payload.

**2. Implementação da UI do Supervisor:**
    - **Ação:** Crie os novos componentes de UI necessários para a visualização e ação das aprovações.
    - **Implementação:** Crie uma nova query (`useQuery`) para chamar o endpoint `GET /api/cobrancas/solicitacoes`. Renderize os resultados em uma tabela ou lista dentro de um modal. Os botões "Aprovar" e "Rejeitar" devem chamar seus respectivos endpoints (`POST /api/cobrancas/solicitacoes/:id/...`).

**3. Renderização Condicional por Role:**
    - **Ação:** Use o hook de autenticação para obter a `role` do usuário logado.
    - **Implementação:** Envolva a nova UI de aprovações do supervisor em uma condição que só a renderize se a `role` for `SUPERVISOR_COBRANCA`.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear todos os componentes de UI a serem criados/modificados.
2.  Garantir que a lógica seja estritamente separada por `role`.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar testes funcionais completos logado como `COBRANCA` (para solicitar) e como `SUPERVISOR_COBRANCA` (para aprovar).
5.  O critério final de sucesso é um fluxo de aprovação ponta-a-ponts funcional: um Cobrador solicita, um Supervisor aprova, e a chamada final para a API do Inter é disparada com sucesso.