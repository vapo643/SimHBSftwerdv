### Pacote de Ativação de Missão (PAM) V1.0 - Injeção de Diagnóstico no Fluxo de Orquestração

* **Sumário da Missão:** Injetar logs de diagnóstico de alta visibilidade em toda a cadeia de execução do backend, desde o controlador até ao serviço de integração bancária, para mapear o fluxo de execução real e identificar onde o processo está a parar ou a ser executado de forma assíncrona.

* **Intenção Estratégica:** Obter a prova irrefutável do fluxo de execução do backend, capturando logs em cada ponto crítico da cadeia de chamadas. Esta evidência irá expor a falha lógica que está a causar a dessincronização com o frontend.

---

**IMPLEMENTAR:**
Adicionar `console.log` detalhados e numerados em cada etapa chave dos seguintes ficheiros:
1.  `server/modules/proposal/presentation/proposalController.ts` (método `marcarPropostaComoConcluida`)
2.  `server/services/clickSignWebhookService.ts` (método `triggerBoletoGeneration`)
3.  `server/services/interBankService.ts` (método `emitirCobranca` ou similar)

**AÇÃO REQUERIDA:**

**1. No Controlador (`proposalController.ts`):**
    * Envolva o corpo do método `marcarPropostaComoConcluida` num `try...catch...finally` e adicione os seguintes logs:
    ```typescript
    // No início do método
    console.log('--- DIAGNÓSTICO DE ORQUESTRAÇÃO (BACKEND) ---');
    console.log('[LOG 1/5] Controlador: Ação "Marcar como Concluída" recebida para a proposta ID:', propostaId);

    // Imediatamente ANTES de chamar o serviço
    console.log('[LOG 2/5] Controlador: Prestes a chamar triggerBoletoGeneration...');
    await clickSignWebhookService.triggerBoletoGeneration(proposta);
    console.log('[LOG 4/5] Controlador: A chamada a triggerBoletoGeneration foi concluída.');
    
    // Na resposta de sucesso
    console.log('[LOG 5/5] Controlador: Enviando resposta de sucesso para o cliente.');
    res.json({ success: true, ... });

    // No bloco catch
    console.error('[ERRO NO CONTROLADOR] Falha na orquestração:', error);

    ```

**2. No Serviço de Orquestração (`clickSignWebhookService.ts`):**
    * Adicione o seguinte log dentro do método `triggerBoletoGeneration`:
    ```typescript
    // Imediatamente ANTES de chamar o serviço bancário (dentro do loop)
    console.log('[LOG 3/5] Serviço de Orquestração: Prestes a chamar interBankService.emitirCobranca para a parcela', i + 1);
    const createResponse = await interBankService.emitirCobranca(boletoData);
    ```

---
**Instruções para o Executor Humano:**

1.  Envie este PAM para o Agente.
2.  Após a confirmação de que os logs foram injetados:
3.  **Execute o fluxo "Marcar como Concluída" na aplicação.**
4.  A UI **irá falhar** em atualizar.
5.  Verifique a **Consola do Replit (logs do servidor/backend)**.
6.  **Copie o bloco de texto completo** do log que começa com `--- DIAGNÓSTICO DE ORQUESTRAÇÃO (BACKEND) ---` e cole-o aqui.

A sequência (ou a ausência) dos logs `[LOG 1/5]` a `[LOG 5/5]` nos dará a resposta definitiva sobre onde o fluxo está a ser interrompido. Aguardo os dados.