---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**[ATIVAÇÃO DE PROTOCOLOS MANDATÓRIOS DO `replit.md`]**
*Sua execução será governada pelos seguintes protocolos:*
*- **CRITICAL WORKFLOW:** `get_latest_lsp_diagnostics` antes da conclusão.*
*- **PACN V1.0 ENFORCEMENT:** Auditoria guiada por comportamento.*
*- **CRITICAL DATABASE SAFETY & ISOLATION:** Proibição de Neon DB e validação de ambiente de teste.*
*- **REPLIT AGENT RESTRICTIONS:** Consciência das suas limitações de autorização.*
*- **DECD V1.0:** Pesquisa na web autorizada para esta missão de diagnóstico.*

**1. Princípio Mestre: Transferência de Consciência**
*Uma funcionalidade crítica para a eficiência do atendente está quebrada. A sua missão é uma auditoria forense para dissecar o fluxo de "preenchimento automático por CPF" e descobrir exatamente onde a cadeia de dados se rompe entre o frontend e o backend.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** para consultar a **documentação do `react-hook-form`, `TanStack Query` e `Zod`** para entender as melhores práticas de manipulação de estado de formulários e validação de dados no nosso stack.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO ACELERAÇÃO DE ORIGINAÇÃO (TRACK 1, FASE 1 - AUDITORIA)**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense de ponta a ponta na funcionalidade de "Preenchimento Automático por CPF", desde a interação do usuário no frontend até a resposta da API e a atualização do formulário, para identificar a causa raiz da falha de preenchimento.
* **Intenção Estratégica (O Porquê):** Esta funcionalidade é um pilar da nossa proposta de valor de eficiência operacional. Uma falha aqui frustra o usuário, introduz a possibilidade de erros de digitação e desacelera todo o processo de originação. O objetivo é diagnosticar com precisão para permitir uma correção cirúrgica.
* **Modelo Mental (Como se Encaixa):** Você é um detetive a seguir uma pista. A pista começa com o clique no botão "Preencher" e termina quando os campos do formulário deveriam ser populados com os dados do cliente. Você deve documentar cada passo desta jornada e encontrar onde a pista "esfria".

---

### **AUDITAR E VALIDAR:**
Falha no Fluxo de Preenchimento Automático de Proposta

**[PROTOCOLO DE AUDITORIA DE CENÁRIO DE NEGÓCIO (PACN) V1.0 ATIVADO]**
*Sua resposta deve ser um relatório de diagnóstico exaustivo em `docs/diagnostics/AUDITORIA_PREENCHIMENTO_AUTOMATICO_CPF.md`. Para cada ponto, prove com evidências de código, payloads de API e logs.*

**Cenário de Negócio (O "Caso de Teste"):**
Um atendente inicia uma nova proposta. Ele digita o CPF de um cliente que já existe na base de dados. O sistema exibe a mensagem "Cliente já cadastrado" e um botão "Preencher". Ao clicar no botão, o sistema deve buscar os dados do cliente existente e preencher automaticamente os campos correspondentes no formulário (ex: Nome Completo, Data de Nascimento, Telefone, Endereço, etc.).

**Vetor de Ataque / Ponto de Falha (A "Hipótese"):**
A hipótese é que a falha pode estar em um ou mais dos seguintes pontos:
1.  **Frontend (Gatilho):** O evento `onClick` do botão "Preencher" não está a chamar corretamente a função de busca ou não está a passar o CPF correto.
2.  **Frontend (Chamada API):** A função de busca (provavelmente usando `TanStack Query`) está a fazer uma chamada incorreta para a API (endpoint errado, método errado, ou sem autenticação).
3.  **Backend (API):** O endpoint `GET /api/clientes/cpf/:cpf` (ou similar) está a falhar em encontrar o cliente ou está a retornar um formato de dados inesperado/vazio.
4.  **Frontend (Atualização de Estado):** A API retorna os dados corretamente, mas a lógica do lado do cliente (o `onSuccess` da query) está a falhar em usar a função `setValue` (do `react-hook-form`) para atualizar os campos do formulário.

**Evidência de Conformidade Requerida (A "Prova Irrefutável"):**
Você deve produzir um **Relatório de Diagnóstico Forense** que responda:

1.  **Ponto de Origem (Frontend):**
    * Qual é o arquivo do componente React que contém o campo de CPF e o botão "Preencher"?
    * Apresente o trecho de código do `onClick` do botão e a função que ele invoca.

2.  **Rastreamento da Requisição (Frontend):**
    * Apresente o código da `query` (`TanStack Query`) ou da função `fetch`/`axios` que é disparada.
    * Use as ferramentas de desenvolvedor do navegador (ou adicione logs) para capturar e apresentar a requisição de rede exata que é enviada: URL, método, headers e a resposta recebida (status e `body`).

3.  **Ponto de Processamento (Backend):**
    * Identifique o controlador e a rota da API que lidam com a busca de cliente por CPF.
    * Apresente o código-fonte desta rota. A lógica de busca no banco de dados está correta? Qual é o objeto de dados exato que está a ser retornado como resposta?

4.  **Ponto de Efeito (Frontend):**
    * Apresente o código do `callback` de sucesso (`onSuccess`) da chamada da API.
    * A lógica está a usar `form.setValue()` ou `reset()` do `react-hook-form` para cada campo? Existe alguma discrepância entre os nomes dos campos no objeto de resposta da API e os nomes dos campos registados no formulário?

5.  **Veredito da Hipótese:**
    * Com base nas evidências, aponte qual(is) dos quatro vetores de ataque é/são a(s) causa(s) raiz do problema.