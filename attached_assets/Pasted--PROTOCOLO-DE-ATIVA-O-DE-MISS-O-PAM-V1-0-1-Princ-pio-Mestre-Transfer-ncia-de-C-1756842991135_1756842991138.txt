---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*O nosso mapa de ameaças está completo. A sua missão agora é investigar a "cena do crime". Você deve atuar como um perito forense digital, rastreando o fluxo de configuração para entender como a conexão de produção pôde ser usada por scripts de teste destrutivos. A sua análise deve expor a falha na separação de ambientes que permitiu a catástrofe.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** para consultar a **documentação do `dotenv`, `vitest` e dos scripts de CI/CD do GitHub Actions** para entender os mecanismos de carregamento de variáveis de ambiente em diferentes contextos.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO GUARDIÃO DO COFRE (FASE 2 - ANÁLISE DE CAUSA RAIZ)**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense no fluxo de carregamento de variáveis de ambiente e na lógica das salvaguardas de teste para identificar a causa raiz exata que permite que comandos destrutivos (como `TRUNCATE CASCADE`) sejam executados contra o banco de dados de produção.
* **Intenção Estratégica (O Porquê):** O objetivo é encontrar a "porta destrancada". Identificar a falha fundamental no nosso protocolo de isolamento de ambientes é o único caminho para projetar uma solução de blindagem que seja verdadeiramente eficaz e à prova de falhas.
* **Histórico Relevante (Consulta Obrigatória):** A sua investigação deve ser guiada pelo relatório da Fase 1 (`docs/diagnostics/VETORES_DE_ATAQUE_DB.md`). Os vetores de ataque P0, como a função `cleanTestDatabase()` e o script `npm run db:push`, são os seus principais suspeitos.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de segurança a investigar uma violação de dados. O seu foco está em como as credenciais (`DATABASE_URL`) foram obtidas e usadas indevidamente. Você deve rastrear o caminho da `DATABASE_URL` desde a sua definição até à sua execução dentro de uma função de teste perigosa.

---

### **AUDITAR E VALIDAR:**
Causa Raiz da Fuga de Contexto de Banco de Dados.

**CURRENT STATE:**
A nossa base de código contém múltiplos scripts e funções com poder destrutivo. Uma falha no isolamento de ambientes está a permitir que estes scripts sejam executados contra o banco de dados de produção, resultando em perda total de dados. A salvaguarda em `tests/lib/db-helper.ts` que deveria prevenir isso, `if (!dbName?.endsWith('-test'))`, provou ser ineficaz.

**EXPECTED (Estado Final de Sucesso):**
A geração de um novo documento Markdown em `docs/diagnostics/CAUSA_RAIZ_DELECAO_DB.md`. Este relatório deve responder de forma irrefutável às seguintes questões:

1.  **Análise do Carregamento de Variáveis de Ambiente:**
    * Como as variáveis de ambiente (especialmente `DATABASE_URL`) são definidas e carregadas para os diferentes ambientes: desenvolvimento local, execução de testes (`vitest`), e CI/CD (GitHub Actions)?
    * Inspecione os arquivos `.env`, `drizzle.config.ts`, `vitest.config.ts`, e os workflows `.github/workflows/*.yml`. Existe algum cenário onde a `DATABASE_URL` de produção pode ser acidentalmente carregada num contexto de teste?

2.  **Auditoria da Salvaguarda de Teste (`db-helper.ts`):**
    * Apresente o código completo da função `cleanTestDatabase()` e da verificação de segurança `if (!dbName?.endsWith('-test'))`.
    * Qual é a sua hipótese para como esta guarda de segurança pode ser contornada? (Ex: A variável `DATABASE_URL` está a ser lida antes do `dotenv` carregar um arquivo `.env.test`? A lógica de parsing do nome do banco é falha?)

3.  **Rastreamento do Vetor de Ataque `db:push`:**
    * Analise o script `db:push` no `package.json` (`drizzle-kit push:pg`).
    * Como o `drizzle-kit` determina qual `DATABASE_URL` usar? Ele respeita as variáveis de ambiente do `npm` ou tem o seu próprio mecanismo de carregamento?
    * Descreva o cenário mais provável onde um desenvolvedor (ou o Agente) poderia executar `npm run db:push` e, acidentalmente, atingir a produção.

4.  **Veredito da Causa Raiz:**
    * Com base nas suas descobertas, apresente uma conclusão clara e concisa sobre a causa raiz principal da deleção do banco de dados. (Ex: "A causa raiz é que o script `db:push` lê diretamente a variável de ambiente `DATABASE_URL` do Replit Secret, ignorando os arquivos `.env` específicos do ambiente, e não possui nenhuma salvaguarda de confirmação.")

**CONSTRAINTS (Roadmap de Análise):**
1.  **Análise Estática:** A sua análise deve continuar a ser puramente estática. **Não execute nenhum script destrutivo.**
2.  **Relatório Detalhado:** O seu relatório deve ser exaustivo, fornecendo trechos de código e caminhos de arquivo para cada evidência encontrada.