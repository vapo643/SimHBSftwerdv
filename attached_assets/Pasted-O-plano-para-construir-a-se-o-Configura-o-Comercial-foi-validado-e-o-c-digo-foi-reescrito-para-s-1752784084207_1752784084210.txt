O plano para construir a seção "Configuração Comercial" foi validado e o código foi reescrito para seguir os padrões do nosso projeto.

Sua tarefa agora é executar o seguinte plano de 2 etapas:

**1. Crie o Componente de Configuração Comercial:**
Crie um novo arquivo no caminho `/client/src/components/parceiros/ConfiguracaoComercial.tsx` e cole exatamente o seguinte código dentro dele:
```typescript
import React from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

const configSchema = z.object({
  tabelaComercial: z.string().nonempty("A seleção da tabela é obrigatória."),
  comissao: z.number().positive("A comissão deve ser um número positivo."),
  taxaJurosCustomizada: z.number().optional(),
  prazosCustomizados: z.string().optional(),
}).refine(data => {
  if (data.tabelaComercial === 'custom') {
    return data.taxaJurosCustomizada && data.prazosCustomizados;
  }
  return true;
}, {
  message: "Juros e Prazos são obrigatórios para tabelas customizadas.",
  path: ['taxaJurosCustomizada'],
});

type ConfigFormData = z.infer<typeof configSchema>;

const ConfiguracaoComercialForm: React.FC = () => {
  const { register, handleSubmit, formState: { errors }, control, watch } = useForm<ConfigFormData>({
    resolver: zodResolver(configSchema),
  });

  const selectedTable = watch("tabelaComercial");

  const onSubmit = (data: ConfigFormData) => {
    console.log("Configuração Salva:", data);
  };

  const mockTabelas = ["Tabela Padrão 2024", "Tabela Prime"];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Configuração Comercial</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="tabelaComercial">Tabela Comercial Aplicável</Label>
            <Controller
              name="tabelaComercial"
              control={control}
              render={({ field }) => (
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <SelectTrigger id="tabelaComercial">
                    <SelectValue placeholder="Selecione uma tabela..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="custom">-- Criar Tabela Personalizada --</SelectItem>
                    {mockTabelas.map(t => <SelectItem key={t} value={t}>{t}</SelectItem>)}
                  </SelectContent>
                </Select>
              )}
            />
             {errors.tabelaComercial && <p className="text-red-500 text-sm mt-1">{errors.tabelaComercial.message}</p>}
          </div>

          <div>
            <Label htmlFor="comissao">Comissão do Parceiro (%)</Label>
            <Input id="comissao" type="number" {...register("comissao", { valueAsNumber: true })} />
            {errors.comissao && <p className="text-red-500 text-sm mt-1">{errors.comissao.message}</p>}
          </div>

          {selectedTable === 'custom' && (
            <div className="p-4 border rounded-md space-y-4 bg-secondary">
              <h3 className="font-semibold">Tabela Personalizada</h3>
              <div>
                <Label htmlFor="taxaJurosCustomizada">Taxa de Juros (%)</Label>
                <Input id="taxaJurosCustomizada" type="number" {...register("taxaJurosCustomizada", { valueAsNumber: true })} />
                {errors.taxaJurosCustomizada && <p className="text-red-500 text-sm mt-1">{errors.taxaJurosCustomizada.message}</p>}
              </div>
              <div>
                <Label htmlFor="prazosCustomizados">Prazos Permitidos (meses, separados por vírgula)</Label>
                <Input id="prazosCustomizados" {...register("prazosCustomizados")} placeholder="Ex: 12,24,36" />
                {errors.prazosCustomizados && <p className="text-red-500 text-sm mt-1">{errors.prazosCustomizados.message}</p>}
              </div>
            </div>
          )}
          <Button type="submit" className="w-full">Salvar Configuração Comercial</Button>
        </form>
      </CardContent>
    </Card>
  );
};

export default ConfiguracaoComercialForm;

2. Integre o Novo Componente:
Modifique o arquivo /client/src/pages/parceiros/detalhe.tsx. Importe o novo componente ConfiguracaoComercialForm e use-o para substituir o placeholder na seção "Configuração Comercial".

Execute este plano.







