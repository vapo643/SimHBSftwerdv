### **Pacote de Ativação de Missão (PAM) V1.0 - RECONSTRUÇÃO DA QUERY DE LISTAGEM**

* **Sumário da Missão:** Refatorar o método `findByCriteriaLightweight` no `ProposalRepository` para incluir todos os `JOINs` e `SELECTs` necessários, garantindo que o `mapRowToProposalDTO` receba os dados completos e que as listas de propostas no frontend sejam renderizadas com 100% de integridade dos dados.

* **Intenção Estratégica:** Eliminar a causa raiz da perda de dados nas telas de Dashboard e Fila de Análise, restaurando a funcionalidade e a confiança do usuário nessas interfaces críticas.

* **Contexto Técnico:** A auditoria revelou que o método `findByCriteriaLightweight` em `server/modules/proposal/infrastructure/ProposalRepository.ts` é o ponto de falha. A sua query Drizzle ORM atual não junta (`join`) as tabelas `clientes`, `produtos`, e outras tabelas relacionadas, resultando em campos nulos que são passados para o mapeador. É mandatório reconstruir esta query para espelhar a completude do método `findById`, que já se provou funcional.

---

**IMPLEMENTAR:**
Refatoração Completa da Query e Mapeamento no `findByCriteriaLightweight`

**CURRENT STATE:**
O método `findByCriteriaLightweight` executa uma query na tabela `propostas` mas falha em incluir os `JOINs` com as tabelas `clientes`, `produtos`, `tabelas_comerciais`, `lojas`, e `parceiros`. Consequentemente, campos como `cliente_nome`, `cliente_cpf`, `valor`, etc., chegam como `null` ao mapeador.

**EXPECTED (Estado Final de Sucesso):**
1.  O método `findByCriteriaLightweight` em `ProposalRepository.ts` é refatorado para ser tão completo quanto o método `findById`.
2.  A query Drizzle dentro do método deve incluir `leftJoin` para todas as tabelas relacionadas necessárias (`clientes`, `produtos`, etc.).
3.  A cláusula `select` da query deve ser expandida para incluir explicitamente todos os campos das tabelas juntadas que são necessários para o `ProposalDTO`.
4.  O método deve continuar a utilizar o mapeador `mapRowToProposalDTO` no seu retorno.
5.  Como resultado direto, ao aceder ao Dashboard ou à Fila de Análise, todas as propostas listadas devem exibir corretamente a `data de criação`, `CPF do cliente`, `valor solicitado` e todos os outros campos previamente ausentes.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Navegue** para o ficheiro `server/modules/proposal/infrastructure/ProposalRepository.ts`.
2.  **Localize** o método `findByCriteriaLightweight`.
3.  **Reconstrua a Query:** Substitua a query Drizzle existente por uma nova que inclua os seguintes `leftJoin`:
    * `leftJoin(clientes, eq(propostas.clienteId, clientes.id))`
    * `leftJoin(produtos, eq(propostas.produtoId, produtos.id))`
    * `leftJoin(tabelasComerciais, eq(propostas.tabelaComercialId, tabelasComerciais.id))`
    * `leftJoin(lojas, eq(propostas.lojaId, lojas.id))`
    * `leftJoin(parceiros, eq(lojas.parceiroId, parceiros.id))`
4.  **Expanda o `select`:** Modifique a cláusula `select` para incluir todos os campos das tabelas juntadas. Utilize aliasing para evitar conflitos de nomes, se necessário. O `select` deve conter, no mínimo:
    * Da tabela `propostas`: todos os campos (`...getTableColumns(propostas)`).
    * Da tabela `clientes`: `cliente_nome: clientes.nome`, `cliente_cpf: clientes.cpf`.
    * Da tabela `produtos`: `nome_produto: produtos.nome`.
    * E assim por diante para `lojas` e `parceiros`.
5.  **Garanta a Aplicação do Mapeador:** Verifique se o resultado final da query é processado pelo `results.map(this.mapRowToProposalDTO)`.
6.  **Validação de Tipos:** Após a refatoração, execute `get_latest_lsp_diagnostics` para garantir que não há erros de tipo.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS:** **BAIXO** - O principal risco é um erro de performance se os `JOINs` forem implementados incorretamente. No entanto, como estamos a replicar a lógica de um método (`findById`) que já funciona e a base de dados tem poucos dados, o risco é mínimo.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que a lógica de `JOIN` presente no método `findById` é a correta e deve ser a "fonte da verdade" para a listagem também. Assume-se que o mapeador `mapRowToProposalDTO` já está correto e completo.
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deve realizar uma validação visual rigorosa no Dashboard e na Fila de Análise para confirmar que **todos** os campos estão agora visíveis e corretos.