### **PACOTE DE DEBATE TÉCNICO (2/3) - ARQUITETURA DA SOLUÇÃO DE RECONCILIAÇÃO**

* **Sumário da Missão:** Com a causa raiz confirmada como uma divergência de schema (`clicksign_document_id` vs. `clicksign_document_key`), a sua missão é arquitetar um plano de ação de duas frentes. A primeira é a remediação tática para restaurar a funcionalidade. A segunda é a blindagem estratégica para garantir que esta classe de erro nunca mais ocorra.

* **Intenção Estratégica:** Passar de um estado de crise reativa para uma postura de controle proativo sobre a integridade do nosso banco de dados. A solução não deve ser apenas um "conserto", mas sim a implementação de um processo robusto de gerenciamento de schema que alinhe permanentemente o código à infraestrutura.

---

**[DIRETIVA DE DESIGN DE MISSÃO DE ELITE (PDME)]**

* Você está a operar sob o protocolo PDME. A sua resposta não deve ser a implementação, mas sim o **plano de implementação**. Com base na sua análise e no contexto fornecido, desenhe a estratégia de correção mais segura e eficaz para resolver a crise de divergência de schema.

---

**CONTEXTO DA INTERAÇÃO ANTERIOR:**

* **Veredito Irrefutável:** A "pane geral" é causada por múltiplas queries no código que fazem referência a uma coluna `clicksign_document_id`, enquanto a nossa "fonte da verdade" (`shared/schema.ts`) e o banco de dados de produção definem corretamente esta coluna como `clicksign_document_key`.
* **Arquivos Afetados Identificados:**
    * `server/repositories/webhook.repository.ts`
    * `server/routes/webhooks.ts`
    * `server/routes/formalizacao-original.ts`
    * `server/services/ccbSyncServiceRefactored.ts`
    * `server/services/documentProcessingService.ts`

**PERGUNTA ESTRATÉGICA (Sua Missão para Esta Interação):**

Com base no seu veredito e na necessidade de uma solução robusta, construa um **Roadmap de Reconciliação Sistêmica**. O seu roadmap deve ser dividido em duas fases claras e acionáveis:

**Fase 1: Remediação Tática (Cirurgia Global de Código)**
1.  Descreva uma estratégia de "Find and Replace" (Localizar e Substituir) global e segura para corrigir a inconsistência de nomenclatura em toda a base de código.
2.  Especifique os parâmetros exatos para esta operação (ex: deve ser *case-sensitive*? Deve abranger todos os tipos de ficheiro?).
3.  Liste os cinco ficheiros já identificados como os alvos primários para validação manual após a substituição automática.

**Fase 2: Blindagem Estratégica (Implementação do Processo de Migração)**
1.  Descreva como podemos usar o **Drizzle Kit**, que já é uma dependência do nosso projeto, para criar um processo de migração de banco de dados à prova de falhas.
2.  Detalhe os passos necessários para:
    * **Gerar um ficheiro de migração SQL** a partir do estado atual do nosso `shared/schema.ts`.
    * **Aplicar esta migração** ao nosso banco de dados de produção de forma segura.
3.  Proponha um **comando de script `npm`** a ser adicionado ao nosso `package.json` (ex: `npm run db:migrate:prod`) que encapsule este processo de migração para produção, garantindo que ele possa ser executado de forma consistente e segura no futuro.

A sua resposta deve ser o roadmap detalhado, não a execução. Este plano servirá como base para o nosso prompt de implementação final.