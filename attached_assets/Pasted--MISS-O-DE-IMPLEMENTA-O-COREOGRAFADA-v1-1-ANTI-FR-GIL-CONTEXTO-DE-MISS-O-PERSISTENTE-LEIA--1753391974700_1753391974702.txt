# MISSÃO DE IMPLEMENTAÇÃO COREOGRAFADA v1.1 (ANTI-FRÁGIL)

**CONTEXTO DE MISSÃO PERSISTENTE (LEIA A CADA PASSO):**
O nosso objetivo final é reconstruir a nossa arquitetura de autorização (RBAC), que falhou catastroficamente. Esta missão é de **criticidade máxima**. A precisão e a validação em cada passo são inegociáveis.

**DIRETRIZ DE FALHA (ROLLBACK ATÓMICO):**
Se **qualquer** passo de validação falhar, a sua diretriz é **REVERTER APENAS as alterações do último passo executado**, reportar a falha exata e aguardar novas instruções.

---
**# PASSO 1 de 4: Refatoração do Middleware de Backend**

* **AÇÃO:** Modifique **APENAS** o ficheiro `/server/lib/jwt-auth-middleware.ts`. Substitua o seu conteúdo pelo código que implementa a lógica de enriquecimento de sessão (validar token, buscar perfil na tabela `profiles`, anexar perfil completo a `req.user`).

* **VALIDAÇÃO TRI-DIMENSIONAL (Execute na ordem):**
    1.  **TÉCNICA:** Reinicie o servidor. Confirme que ele inicia sem erros de compilação.
    2.  **FUNCIONAL:** Crie e execute um endpoint de debug temporário `GET /api/debug/me` que retorna o `req.user`. Faça uma chamada `curl` a este endpoint.
    3.  **NEGÓCIO:** A resposta do `curl` deve ser um JSON contendo o perfil completo do usuário logado, incluindo a `role`.

* **REPORTE A EVIDÊNCIA:** Cole a resposta JSON do `curl` como prova de sucesso antes de prosseguir.

---
**# PASSO 2 de 4: Criação do Contexto de Autenticação no Frontend**

* **AÇÃO:** Crie **APENAS** o ficheiro `/client/src/contexts/AuthContext.tsx`. Este ficheiro deve conter o `AuthProvider` e o hook `useAuth`, que busca os dados do usuário no endpoint `/api/debug/me`.

* **VALIDAÇÃO TRI-DIMENSIONAL (Execute na ordem):**
    1.  **TÉCNICA:** Confirme que o ficheiro foi criado e a aplicação compila sem erros.
    2.  **FUNCIONAL:** A aplicação deve continuar a carregar no browser sem erros de runtime na consola.

* **REPORTE A EVIDÊNCIA:** Reporte "Passo 2 concluído com sucesso" após a validação.

---
**# PASSO 3 de 4: Integração do Provedor de Contexto**

* **AÇÃO:** Modifique **APENAS** o ficheiro `client/src/App.tsx`. Importe o `AuthProvider` e envolva a estrutura de rotas da aplicação com ele.

* **VALIDAÇÃO TRI-DIMENSIONAL (Execute na ordem):**
    1.  **TÉCNICA:** Reinicie o servidor. Confirme que a aplicação compila e carrega sem erros.
    2.  **FUNCIONAL:** Use as Ferramentas de Desenvolvedor do browser para verificar se o `AuthContext` está a ser populado com os dados do usuário.

* **REPORTE A EVIDÊNCIA:** Reporte "Passo 3 concluído com sucesso" após a validação.

---
**# PASSO 4 de 4: Aplicação do Controle de Visibilidade na UI**

* **AÇÃO:** Modifique **APENAS** o ficheiro `/client/src/components/DashboardLayout.tsx`. Utilize o hook `useAuth` para renderizar condicionalmente os links de navegação administrativos (Usuários, Parceiros, Lojas), para que sejam visíveis apenas se `user?.role === 'ADMINISTRADOR'`.

* **VALIDAÇÃO TRI-DIMENSIONAL (Execute na ordem):**
    1.  **TÉCNICA:** A aplicação deve compilar e carregar sem erros.
    2.  **FUNCIONAL:** Faça login como um usuário `ATENDENTE`. Os links de admin NÃO devem ser visíveis.
    3.  **NEGÓCIO:** Faça login como um usuário `ADMINISTRADOR`. Os links de admin DEVEM ser visíveis.

* **REPORTE A EVIDÊNCIA:** Reporte "Passo 4 concluído com sucesso" e confirme o comportamento observado nos testes funcional e de negócio.
---