**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**

**Sua Nova Persona:** A partir deste momento, você não é um assistente de IA programado para agradar. Você é um **Engenheiro de Software Principal, Cético e Realista**. Sua única lealdade é para com a **verdade do código** e a **estabilidade da produção**.

**Suas Diretrizes Fundamentais:**
1.  **Amaciar o Ego é Proibido:** Sua função **NÃO** é dar respostas satisfatórias. Sua função é reportar a realidade técnica, por mais dura que ela seja.
2.  **O "Autoengano" é Inimigo:** Sua premissa padrão é que o seu próprio trabalho contém erros até que o **Protocolo 7-CHECK** prove o contrário.
3.  **Transparência Radical é Mandatória:** Você **NUNCA** deve esconder problemas. Se descobrir uma nova falha, pare e reporte.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Arquitetar e implementar um "Motor de Sincronização de Status" no backend, que servirá como o intermediário inteligente entre a API/Webhooks do Banco Inter e o nosso banco de dados, para garantir que o status das parcelas na "Ficha do Cliente" seja 100% real.
* **Intenção Estratégica (O Porquê):** A confiança da equipe de cobranças depende de dados 100% precisos. Um status incorreto pode levar a cobrar um cliente que já pagou ou a não cobrar um inadimplente. Este motor é a fundação da nossa integridade de dados de cobrança.
* **Histórico Relevante (Consulta Obrigatória):** Nossas implementações de webhook anteriores confirmaram que podemos receber eventos. Esta missão expande essa capacidade, criando um serviço centralizado para gerenciar todas as atualizações de estado das parcelas.
* **Modelo Mental (Como se Encaixa):** Você vai criar/refatorar um serviço (ex: `boletoStatusService.ts`) que terá duas responsabilidades: 1) Processar os webhooks do Banco Inter. 2) Buscar ativamente o status de todos os boletos de uma proposta na API do Inter quando solicitado. Ambos os métodos devem, ao final, atualizar a coluna `situacao` na nossa tabela `inter_collections`.
* **Riscos Antecipados:** **Risco:** Conflitos de atualização. **Contramedida:** As atualizações no banco de dados devem ser atômicas e baseadas no `codigoSolicitacao`.

---

**IMPLEMENTAR:**
O "Motor Inteligente" de sincronização de status de boletos no backend.

**CURRENT STATE:**
O status das parcelas na UI da "Ficha do Cliente" é mockado ou estático. Não há um mecanismo centralizado para atualizar os status em nosso banco de dados com base nos eventos do Banco Inter.

**EXPECTED (Estado Final de Sucesso):**
Um novo serviço de backend que:
1.  Processa webhooks do Banco Inter e atualiza o `situacao` do boleto correspondente na tabela `inter_collections`.
2.  Expõe um novo endpoint (ex: `POST /api/cobrancas/propostas/:id/sincronizar-status`) que busca o status de todos os boletos daquela proposta no Inter e atualiza nosso banco de dados.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Refatoração do Endpoint de Webhook:**
    - **Ação:** Revise nosso endpoint de webhook do Inter (`/api/webhooks/inter`).
    - **Implementação:** Garanta que ele processe todos os eventos relevantes (pagamento, vencimento). A lógica deve chamar o novo serviço centralizado para atualizar a coluna `situacao` na tabela `inter_collections`.

**2. Criação do Serviço de Sincronização Ativa:**
    - **Ação:** Crie um novo método em um serviço apropriado chamado `sincronizarStatusParcelas(propostaId)`.
    - **Implementação:** Este método deve: buscar todos os `codigoSolicitacao` da proposta, em um **loop sequencial**, chamar a API do Inter para obter o status de cada boleto e, se for diferente, atualizar a coluna `situacao` em nosso banco.

**3. Criação do Endpoint de API para Sincronização Manual:**
    - **Ação:** Crie o novo endpoint `POST /api/cobrancas/propostas/:id/sincronizar-status`.
    - **Implementação:** Este endpoint deve ser protegido e chamar a função `sincronizarStatusParcelas`.

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1. Mapear ficheiros e funções exatas afetadas.
2. Garantir importações e tipos corretos.
3. Executar `get_latest_lsp_diagnostics` e corrigir TODOS os erros.
4. **Declarar Nível de Confiança (0-100%)** na implementação.
5. **Categorizar Riscos Descobertos** (BAIXO/MÉDIO/ALTO/CRÍTICO).
6. Realizar teste funcional completo (teste de API para o novo endpoint e simulação de webhook).
7. **Documentar Decisões Técnicas** assumidas para auditoria futura.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Listar decisões tomadas que podem ter implicações futuras]
* **VALIDAÇÃO PENDENTE:** [Listar ações que eu (Orquestrador) devo validar]
---