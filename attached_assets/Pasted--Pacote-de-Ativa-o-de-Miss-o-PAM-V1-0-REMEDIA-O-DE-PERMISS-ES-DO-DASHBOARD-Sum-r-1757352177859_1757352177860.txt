### **Pacote de Ativação de Missão (PAM) V1.0 - REMEDIAÇÃO DE PERMISSÕES DO DASHBOARD**

* **Sumário da Missão:** Auditar e corrigir as políticas de Row Level Security (RLS) relacionadas ao endpoint `/api/propostas/metricas` para erradicar os erros `403 Forbidden` e restaurar a funcionalidade dos KPIs do Dashboard para todos os usuários autorizados.

* **Intenção Estratégica:** Garantir que os `GERENTES` e `ADMINS` tenham acesso ininterrupto às métricas de negócio, uma funcionalidade crítica para a gestão e monitoramento da performance da plataforma, conforme definido no nosso Blueprint Arquitetural.

* **Contexto Técnico:** O `Blueprint Estratégico e Arquitetural (02-blueprint-arquitetural.md)` especifica uma `vw_metricas_dashboard` para consolidar os dados do dashboard. A falha `403` sugere que esta `view` não possui uma política de RLS que permita o acesso a usuários autenticados com base na sua `instituicao_id`.

---

**IMPLEMENTAR:**
Correção da Política de Acesso para a View de Métricas do Dashboard

**CURRENT STATE:**
O endpoint da API `/api/propostas/metricas` retorna um erro `403 Forbidden` para usuários autenticados, pois a `view` `vw_metricas_dashboard` no banco de dados Supabase não tem uma política de RLS permissiva para os `roles` apropriados.

**EXPECTED (Estado Final de Sucesso):**
1.  Uma política de RLS é criada e aplicada à `view` `vw_metricas_dashboard`.
2.  A política deve permitir que qualquer usuário autenticado (`authenticated`) realize operações de `SELECT` na `view`, mas apenas para as linhas que correspondem à `instituicao_id` do usuário.
3.  Como resultado, as chamadas de API do frontend para `/api/propostas/metricas` devem retornar `HTTP 200 OK` com os dados corretos, e os KPIs do Dashboard devem ser renderizados sem erros.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Auditoria da View:** Primeiro, confirme a existência e a estrutura da `view` `vw_metricas_dashboard` no banco de dados. Apresente o código SQL (`CREATE VIEW ...`) que a define.
2.  **Implementação da Política RLS:** Forneça o seguinte script SQL para ser executado no SQL Editor do Supabase. Este script é projetado para ser seguro e aderente ao nosso modelo de multi-tenancy.
    ```sql
    -- Passo 1: Garantir que a RLS está habilitada para a View
    ALTER VIEW public.vw_metricas_dashboard WITH (security_invoker = on);

    -- Passo 2: Remover qualquer política antiga para evitar conflitos
    DROP POLICY IF EXISTS "Usuários autenticados podem ver métricas da sua instituição" ON public.vw_metricas_dashboard;

    -- Passo 3: Criar a política de SELECT correta
    CREATE POLICY "Usuários autenticados podem ver métricas da sua instituição"
    ON public.vw_metricas_dashboard
    FOR SELECT
    TO authenticated
    USING (
      -- Esta cláusula garante que o usuário só pode ler as linhas
      -- onde o ID da instituição corresponde ao ID no seu token JWT.
      instituicao_id = (SELECT (auth.jwt() ->> 'user_metadata')::jsonb ->> 'instituicao_id')::uuid
    );
    ```
3.  **Validação Final:** Após aplicar a política, execute um teste de validação para confirmar que o problema foi resolvido.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS:** **BAIXO** - O principal risco é um erro de sintaxe na implementação da política SQL. O script fornecido foi cuidadosamente formulado para alinhar-se com a estrutura de dados e o JWT do Supabase, minimizando este risco.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que o JWT do usuário autenticado contém a `claim` `user_metadata.instituicao_id` com o UUID da instituição, conforme a arquitetura de segurança definida.
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deve realizar testes de validação com múltiplos `roles` (ex: `ATENDENTE`, `GERENTE`) de diferentes instituições para garantir que a política de RLS está a isolar os dados corretamente e que não há vazamento de informações entre tenants.