**MISSÃO DE AUDITORIA FORENSE V2 - FASE 2: ANÁLISE DO BACKEND**

Sua tarefa é realizar uma análise profunda do servidor Express.js, focando na cadeia de processamento de requisições, segurança e no fluxo de dados da lógica de negócio principal. A resposta DEVE seguir rigorosamente este formato:

**1. Análise da Cadeia de Middleware:**
   * No arquivo principal do servidor Express (provavelmente `server/index.ts`), liste a sequência **exata** em que os middlewares são inicializados (`app.use(...)`).
   * Para cada middleware (`cors`, `helmet`, `express-rate-limit`, `express-session`, `passport`, sanitização de input, etc.), explique brevemente seu propósito e por que sua posição na cadeia é importante para a segurança e o funcionamento da aplicação.

**2. Dissecar a Estratégia de Autenticação e Autorização:**
   * Rastreie o fluxo de uma requisição autenticada. Começando pelo middleware do Passport.js, explique como o token (provavelmente JWT do Supabase) é verificado.
   * Identifique o arquivo e a função que contêm a "estratégia" do Passport (`Passport Strategy`).
   * Após a autenticação (verificar *quem* é o usuário), explique como a autorização (definir *o que* o usuário pode fazer) é implementada. Aponte onde a lógica de RBAC (Role-Based Access Control) é verificada para proteger endpoints específicos.

**3. Rastreamento do Fluxo de Dados (Criação de Proposta de Crédito):**
   * Descreva o fluxo de dados completo, passo a passo, para a criação de uma nova proposta de crédito. O rastreamento deve começar no controller da rota da API e terminar na inserção no banco de dados.
   * **Controller da Rota:** Identifique o arquivo e a função que recebem a requisição HTTP POST.
   * **Validação (Zod):** Mostre como o schema Zod é usado para validar os dados da proposta recebidos no corpo da requisição.
   * **Camada de Serviço:** Aponte para o arquivo de serviço (`app/services/...`) e a função que orquestra a lógica de negócio.
   * **Camada de Dados (Drizzle):** Forneça o trecho de código exato que usa o Drizzle ORM para executar a inserção (`insert`) na tabela `propostas`.

**4. Análise de Resiliência (Circuit Breaker):**
   * Localize a implementação do circuit breaker (`opossum`) no código.
   * Explique como ele é configurado e aplicado para proteger as chamadas às APIs externas críticas (Banco Inter e ClickSign), prevenindo falhas em cascata. Identifique os arquivos onde essa proteção é utilizada.