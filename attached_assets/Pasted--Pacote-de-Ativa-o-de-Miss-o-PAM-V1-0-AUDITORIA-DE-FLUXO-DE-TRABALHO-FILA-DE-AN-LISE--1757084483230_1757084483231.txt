### **Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA DE FLUXO DE TRABALHO (FILA DE ANÁLISE)**

* **Sumário da Missão (O Quê):** Realizar um rastreamento de ponta a ponta do fluxo de trabalho "Fila de Análise", desde a renderização dos dados na tabela até o momento em que os dados deveriam aparecer na tela de análise, para identificar a(s) quebra(s) na cadeia de dados. O output final deve ser um arquivo Markdown (`FLUXO_FILA_ANALISE.md`).
* **Intenção Estratégica (O Porquê):** O utilizador reportou que os campos na "Fila de Análise" não estão a espelhar os dados corretos do banco de dados. Este é um sintoma da falha estrutural. Rastrear este fluxo específico irá fornecer a evidência tática de como o desalinhamento arquitetural está a impactar a funcionalidade do sistema no nível do utilizador.

---

**AUDITAR:** Fluxo de Dados da Fila de Análise

**PROTOCOLO DE EXECUÇÃO:** Ative o **PEAF V1.5** e siga o protocolo **PACN V1.0**.

#### **Cenário de Negócio (O "Caso de Teste"):**
Um `ATENDENTE` ou `ANALISTA` acede à página da "Fila de Análise" (Dashboard ou página dedicada). O sistema deve exibir uma tabela/lista de propostas com o status `EM_ANALISE`. As colunas desta tabela (ex: Nome do Cliente, Valor, Data) devem refletir com 100% de precisão os dados armazenados no banco de dados para cada proposta listada.

#### **Vetor de Ataque / Ponto de Falha (A "Hipótese"):**
A hipótese primária é que a `query` do backend que busca os dados para a fila de análise está incompleta. Provavelmente, ela não está a fazer o `JOIN` correto com a tabela de `clientes` ou outras tabelas necessárias, retornando um objeto de dados parcial que causa a renderização incorreta ou nula no frontend.

#### **Evidência de Conformidade Requerida (A "Prova Irrefutável"):**

Gere um arquivo `FLUXO_FILA_ANALISE.md` com a seguinte estrutura:

# Relatório de Auditoria do Fluxo da Fila de Análise

## 1. Camada de Apresentação (Frontend)

* **Arquivo-Alvo:** Localize o componente React responsável por renderizar a tabela/lista da "Fila de Análise".
* **Evidência 1.1:** Apresente a `query` do TanStack Query (`useQuery`) usada por este componente para buscar os dados.
* **Evidência 1.2:** Apresente o trecho de código JSX que renderiza as colunas da tabela. Mostre como ele tenta aceder aos dados (ex: `proposta.nomeCliente`, `proposta.valorProposta`).

## 2. Camada de Aplicação (Backend API)

* **Arquivo-Alvo:** Identifique o endpoint da API que responde à query da evidência 1.1.
* **Evidência 2.1:** Apresente o código completo do `Controller` e do `Use Case` (ou serviço) que manipula esta requisição.

## 3. Camada de Persistência (Backend Database)

* **Arquivo-Alvo:** O `Repository` invocado pelo serviço da evidência 2.1.
* **Evidência 3.1 (PONTO CRÍTICO):** Apresente a `query` Drizzle ORM (ou SQL) completa que é executada para buscar a lista de propostas.
* **Análise da Query:** A query está a realizar os `JOINs` necessários com as tabelas `clientes` e outras tabelas relevantes para popular todos os campos que o frontend (Evidência 1.2) espera? Se não, esta é a causa raiz.

## 4. Análise Comparativa (Contrato de Dados)

* **Evidência 4.1:** Apresente lado a lado a estrutura de dados que o frontend **espera** (baseado no JSX da Evidência 1.2) e a estrutura de dados que o backend **retorna** (baseado na query da Evidência 3.1).
* **Tabela de Discrepâncias:**

| Campo Esperado no Frontend | Campo Retornado pelo Backend | Status |
| :--- | :--- | :---: |
| `nomeCliente` | `null` ou `undefined` | ❌ FALHA |
| `valorProposta` | `valor` | ⚠️ INCONSISTENTE |
| ... | ... | ... |

## 5. Veredito da Auditoria

* **Causa Raiz Identificada:** [Descreva sucintamente a causa da falha no espelhamento de dados. Ex: "A query do repositório `findAllEmAnalise` não realiza o JOIN com a tabela `clientes`, resultando na ausência dos dados do cliente na resposta da API."]