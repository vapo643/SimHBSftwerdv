### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria de Integridade Transacional)

* **Sumário da Missão (O Quê):** Realizar uma auditoria de integridade transacional no worker do job `pdf-processing`.
* **Intenção Estratégica (O Porquê):** Mitigar o risco CRÍTICO de inconsistência de dados identificado na pré-auditoria. Se a geração ou o upload do PDF falhar, devemos garantir que o sistema não fique em um estado semi-corrompido (ex: o status da proposta é atualizado, mas o arquivo PDF não existe no Storage).
* **Histórico Relevante (Consulta Obrigatória):** A FASE 0 (Pré-Auditoria) identificou o job `pdf-processing` como sendo de risco CRÍTICO devido à suspeita da ausência de um `transaction wrapping` para suas operações de escrita.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de análise de código de baixo nível. O Agente deve agir como um DBA/Arquiteto de Backend, procurando por padrões de transação (`db.transaction(...)`) que garantam a atomicidade das operações "tudo ou nada".

---

**IMPLEMENTAR:**
Relatório de Auditoria de Integridade Transacional - `pdf-processing` worker

**CURRENT STATE:**
A pré-auditoria sugere que o worker `pdf-processing` modifica múltiplos recursos (Supabase Storage e banco de dados PostgreSQL) e pode não ter um rollback transacional, representando um risco crítico de corrupção de dados.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria detalhado em formato Markdown, respondendo a duas perguntas críticas:

**1. Análise do Fluxo de Operações de Escrita:**
    * **Pergunta:** Mapeie, passo a passo, todas as operações de **escrita** que o worker `pdf-processing` (localizado em `server/worker.ts`) executa. A lista deve incluir:
        * (a) A geração e o salvamento do arquivo PDF no Supabase Storage.
        * (b) A atualização dos campos na tabela `propostas` no PostgreSQL (ex: `caminho_ccb_assinado`, `status`).
    * **Sua Análise Deve Incluir:** Os `snippets` de código de cada operação de escrita.

**2. Análise de Atomicidade (A Questão Central):**
    * **Pergunta:** A sequência de operações de escrita (no Storage e no Banco de Dados) é **atômica**?
    * **Sua Análise Deve Incluir:**
        * Verifique se as operações estão envoltas em um bloco de transação do Drizzle (`db.transaction(async (tx) => { ... })`).
        * Uma conclusão clara: **Sim** ou **Não**.
        * Se **Não**, explique o cenário de falha exato. (Ex: "Se o upload para o Supabase Storage falhar após a atualização do banco de dados, o registro da proposta apontará para um arquivo inexistente, e a transação não será revertida.").
        * Apresente o `snippet` de código que mostra o bloco `try/catch` e a lógica transacional, **ou confirme a sua ausência**.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100% de confiança na COMPLETUDE da auditoria]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a função `db.transaction()` do Drizzle é a única forma de garantir atomicidade."]
* **VALIDAÇÃO PENDENTE:** [Os achados desta auditoria irão informar a missão de correção, se necessária.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os arquivos e funções exatas a serem analisados (`server/worker.ts`).
2.  Garantir que a análise cobre os dois pontos (Fluxo e Atomicidade).
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)** na completude da auditoria.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do relatório gerado para precisão e lógica).
7.  **Documentar Decisões Técnicas** e a conclusão sobre a atomicidade.