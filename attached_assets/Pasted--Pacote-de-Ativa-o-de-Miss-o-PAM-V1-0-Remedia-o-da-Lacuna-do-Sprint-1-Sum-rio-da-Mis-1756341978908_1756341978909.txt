### Pacote de Ativação de Missão (PAM) V1.0 - Remediação da Lacuna do Sprint 1

* **Sumário da Missão (O Quê):** Refatorar o serviço de criptografia existente, movendo-o de uma implementação específica (`clickSignSecurityService.ts`) para um serviço centralizado e reutilizável, conforme a User Story S1-006.
* **Intenção Estratégica (O Porquê):** Eliminar a dívida técnica identificada na auditoria do Sprint 1, garantindo que a funcionalidade de criptografia (AES-256-GCM) seja abstrata, centralizada e facilmente consumível por qualquer outro módulo do sistema, alcançando 100% de conformidade com os requisitos de segurança do sprint.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de software sênior realizando uma refatoração para melhorar a arquitetura. A lógica de negócio não deve ser alterada, apenas a sua localização e a forma como é acessada, seguindo o princípio DRY (Don't Repeat Yourself).

---

**IMPLEMENTAR (Plano de Refatoração):**
Execute a seguinte sequência de ações para remediar a lacuna identificada.

**CURRENT STATE:**
A lógica de criptografia (`encryptSensitiveData` e `decryptSensitiveData`) está implementada de forma acoplada dentro do ficheiro `server/services/clickSignSecurityService.ts`.

**EXPECTED (Estado Final de Sucesso):**
1. Um novo ficheiro, `server/services/cryptoService.ts`, existe e contém a lógica de criptografia genérica.
2. O ficheiro `server/services/clickSignSecurityService.ts` foi refatorado para importar e utilizar o novo `cryptoService.ts`, sem conter mais a implementação direta da criptografia.
3. A funcionalidade do sistema permanece inalterada.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Criar o Serviço Centralizado de Criptografia**
1.1. Crie um novo ficheiro em `server/services/cryptoService.ts`.
1.2. Mova os métodos `encryptSensitiveData` e `decryptSensitiveData`, juntamente com as suas dependências (`crypto`), do ficheiro `server/services/clickSignSecurityService.ts` para o novo `server/services/cryptoService.ts`.
1.3. Transforme a lógica em uma classe ou objeto exportável (ex: `CryptoService`) que possa ser instanciado ou chamado estaticamente. O serviço deve receber a chave de encriptação através do seu construtor ou de um método de inicialização para não a manter *hardcoded*.

**Passo 2: Refatorar o Consumidor Existente**
2.1. No ficheiro `server/services/clickSignSecurityService.ts`, remova a implementação dos métodos de criptografia que foram movidos.
2.2. Importe o novo `CryptoService`.
2.3. Atualize o `clickSignSecurityService.ts` para instanciar e/ou utilizar os métodos do `CryptoService` para realizar as operações de encriptação e desencriptação.

**Passo 3: Validação Final**
3.1. Apresente o conteúdo final dos dois ficheiros modificados: `server/services/cryptoService.ts` e `server/services/clickSignSecurityService.ts`.
3.2. Execute `get_latest_lsp_diagnostics` para garantir que a refatoração não introduziu nenhuns erros de tipo ou de importação.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 98%
* **RISCOS IDENTIFICADOS:** BAIXO. O principal risco é a gestão incorreta da chave de encriptação (`encryptionKey`) no novo serviço. O Agente deve garantir que a chave é passada como dependência e não fica exposta.
* **DECISÕES TÉCNICAS ASSUMIDAS:** A refatoração seguirá um padrão de Injeção de Dependência, onde o `CryptoService` receberá as configurações necessárias (como a chave) em vez de acessá-las globalmente.
* **VALIDAÇÃO PENDENTE:** Confirmação de que a integração com o ClickSign continua a funcionar corretamente após a refatoração, o que deverá ser validado por testes de integração no próximo sprint.