**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Corrigir a query de dados da "Tela de Cobranças" e formalizar os "status órfãos" no schema do banco de dados para garantir a integridade e a precisão dos dados em todo o sistema.
* **Intenção Estratégica (O Porquê):** Seu próprio relatório de auditoria provou que nossa "Tela de Cobranças" está fundamentalmente quebrada, exibindo dados incorretos. Esta missão é para implementar as correções críticas que você mesmo recomendou, restaurando a confiança na nossa ferramenta de cobranças.
* **Histórico Relevante (Consulta Obrigatória):** Use o seu relatório `AUDITORIA_COMPLETA_SISTEMA_STATUS_PROPOSTAS.md` como a única fonte da verdade para esta missão. Sua tarefa é implementar as recomendações de "PRIORIDADE ALTA" que você listou.
* **Modelo Mental (Como se Encaixa):** Esta é uma operação em duas frentes. Primeiro, você atuará como um DBA (Administrador de Banco de Dados), atualizando nosso schema para torná-lo consistente. Em seguida, você atuará como um Engenheiro de Backend, refatorando a query para usar este novo schema correto.
* **Riscos Antecipados:** **Risco:** Alterar um `enum` do banco de dados é uma operação de alto risco que pode quebrar a aplicação se não for feita corretamente. **Contramedida:** A implementação deve seguir uma ordem estrita: primeiro, criar e aplicar a migração do banco de dados (Drizzle) de forma isolada; segundo, refatorar o código da aplicação para usar o novo schema.

---

**IMPLEMENTAR:**
A correção da query da "Tela de Cobranças" e a formalização dos status órfãos no banco de dados.

**CURRENT STATE:**
A query `GET /api/cobrancas` está a buscar propostas com o status `aprovado` e a ignorar as com status `contratos_assinados`. Além disso, o código utiliza status (`pendenciado`, `em_formalizacao`, `assinado`) que não existem no `enum` oficial do banco de dados.

**EXPECTED (Estado Final de Sucesso):**
1.  O schema do banco de dados (o `pgEnum("status", ...)` em `shared/schema.ts`) é atualizado para incluir os status órfãos que você encontrou.
2.  A query da "Tela de Cobranças" é corrigida para buscar **APENAS** propostas com status `["contratos_assinados", "pronto_pagamento", "pago"]`, garantindo que apenas propostas com CCB já assinada apareçam na tela.
3.  O sistema fica 100% consistente entre o código e o banco de dados.

**CONSTRAINTS (Roadmap de Implementação):**

**FASE 1: Migração do Banco de Dados (Drizzle):**
    - **Ação:** Modifique o ficheiro `shared/schema.ts`.
    - **Implementação:** Adicione os status órfãos (`pendenciado`, `em_formalizacao`, `assinado`) à lista do `statusEnum`.
    - **Ação:** Crie e aplique a nova migração Drizzle para atualizar o `enum` no banco de dados Supabase.

**FASE 2: Correção da Query do Backend:**
    - **Ação:** Modifique o ficheiro `server/routes/cobrancas.ts`.
    - **Implementação:** Altere a cláusula `inArray` na query principal para usar a lista de status correta e recomendada em sua auditoria: `["contratos_assinados", "pronto_pagamento", "pago"]`.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear os arquivos envolvidos (`shared/schema.ts`, `server/routes/cobrancas.ts`).
2.  Garantir que a migração do banco de dados seja executada **ANTES** de testar a aplicação.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar um teste funcional completo na "Tela de Cobranças".
5.  O critério final de sucesso é uma tela que exibe **apenas e todas** as propostas com status `contratos_assinados` ou posterior, e que o sistema rode sem erros de `enum` inválido.