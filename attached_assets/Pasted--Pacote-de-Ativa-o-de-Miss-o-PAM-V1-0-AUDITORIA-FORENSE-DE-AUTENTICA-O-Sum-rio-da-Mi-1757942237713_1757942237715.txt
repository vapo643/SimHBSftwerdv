### Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA FORENSE DE AUTENTICAÇÃO

* **Sumário da Missão:** Realizar uma auditoria forense no nosso middleware de autenticação JWT e na configuração de ambiente do backend para identificar a causa raiz exata da falha de verificação de token que resulta em erros 401.

* **Intenção Estratégica:** A falha de autenticação é a vulnerabilidade mais crítica que pode afetar o sistema, causando uma negação de serviço total para todos os usuários. A identificação e correção desta falha é a prioridade absoluta para restaurar a operacionalidade da plataforma.

* **Modelo Mental (Como se Encaixa):** Um token JWT é gerado pela Supabase e enviado pelo cliente no cabeçalho `Authorization`. O nosso middleware (`server/lib/jwt-auth-middleware.ts`) intercepta esta requisição, extrai o token e deve usar o segredo para verificar criptograficamente a sua autenticidade. Suspeitamos que o middleware está a ler uma variável de ambiente incorreta (ex: `PROD_JWT_SECRET` ou `DEV_JTW_SECRET` com erro de digitação) em vez da `SUPABASE_JWT_SECRET` correta.

---

**IMPLEMENTAR:**
Auditoria Forense da Cadeia de Autenticação JWT do Backend.

**CURRENT STATE:**
O backend rejeita todos os tokens JWT com um erro 401, mesmo após a correção manual do segredo no ambiente de produção. O log do erro é: `{message: 'Token inválido ou expirado'}`.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria claro e conciso que responda inequivocamente às seguintes perguntas:
1.  Qual é o nome exato da variável de ambiente que o arquivo `server/lib/jwt-auth-middleware.ts` utiliza para obter o segredo de verificação JWT?
2.  Apresente o bloco de código exato dentro do middleware onde a função `jwt.verify` (ou similar) é chamada e confirme que a variável de segredo correta está a ser passada para ela.
3.  Execute uma busca global em todo o projeto por todas as variações de segredos JWT (`JWT_SECRET`, `JTW_SECRET`, com e sem prefixos `PROD_`/`DEV_`) e liste todos os arquivos que as utilizam.

**CONSTRAINTS (Roadmap de Auditoria Forense):**

**NÃO modifique nenhum código. A sua única função é ler, analisar e relatar.**

**1. Análise do Middleware de Autenticação:**
    * Abra o arquivo `server/lib/jwt-auth-middleware.ts`.
    * Apresente a função completa que lida com a verificação do token.
    * Identifique e destaque a linha exata onde o segredo JWT é lido de `process.env`.

**2. Análise da Configuração de Ambiente:**
    * Abra o arquivo `server/config/environment.ts`.
    * Apresente o código que carrega e exporta as variáveis de ambiente, especialmente as relacionadas com JWT.

**3. Busca por Conflitos em Todo o Projeto:**
    * Execute uma busca global (case-insensitive) em toda a base de código do `server/` por todas as ocorrências de:
        * `JWT_SECRET`
        * `JTW_SECRET`
    * Relate todos os arquivos e números de linha onde estas variáveis são utilizadas.

**4. Veredito Final da Auditoria:**
    * Com base nas evidências coletadas, forneça um veredito final sobre qual é a variável de ambiente exata que está a ser usada para a verificação do token e se ela corresponde à que foi atualizada.