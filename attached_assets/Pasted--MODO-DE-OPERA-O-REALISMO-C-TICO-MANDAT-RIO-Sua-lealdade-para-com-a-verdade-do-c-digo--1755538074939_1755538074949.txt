**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense completa do ciclo de vida da CCB assinada, desde o recebimento do webhook da ClickSign, passando pelo download e armazenamento, até a exibição final dos dados no modal "Confirmar Veracidade".
* **Intenção Estratégica (O Porquê):** O Arquiteto identificou uma falha de integridade de dados crítica onde o modal de pagamento exibe informações incorretas (Valor R$ 0,00, CCB Pendente). Precisamos de um diagnóstico preciso para garantir que as decisões de pagamento sejam baseadas em dados 100% corretos e verificados.
* **Histórico Relevante (Consulta Obrigatória):** A "Tela de Pagamentos" só deve exibir propostas prontas para pagamento. O fato de o modal exibir "CCB Pendente de Assinatura" é uma contradição lógica fundamental que aponta para uma falha grave no nosso fluxo de dados ou na nossa lógica de status.
* **Modelo Mental (Como se Encaixa):** Você é um auditor de sistemas full-stack. Sua tarefa é seguir o rastro de um "documento assinado", desde o sinal (webhook) até o seu destino final (a UI do modal), documentando cada etapa do percurso e encontrando o ponto de quebra.
* **Riscos Antecipados:** **Risco:** Uma análise superficial. **Contramedida:** Sua missão não é corrigir. É **PROVAR**, com evidências de código, como o sistema funciona hoje e onde ele falha.

---

**IMPLEMENTAR:**
Um relatório de auditoria detalhado. **NÃO FAÇA MODIFICAÇÕES.**

**CURRENT STATE:**
O modal "Confirmar Veracidade" na "Tela de Pagamentos" exibe dados vazios ou incorretos (`Valor: R$ 0,00`, `CCB Pendente`), apesar de a proposta ter passado por todo o fluxo de formalização.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria que responda a todas as questões do roadmap abaixo, com evidências de código.

**CONSTRAINTS (Roadmap de Auditoria Forense - Siga os 4 Pontos):**

**1. Auditoria do Webhook Handler (O Gatilho):**
    - **Ação:** Inspecione o serviço que processa os webhooks da ClickSign (provavelmente `clickSignWebhookService.ts`).
    - **Relatório:** Ao receber o webhook `document.signed` da ClickSign, o nosso sistema aciona a lógica para **baixar o documento assinado** da API da ClickSign? Apresente o trecho de código que faz isso.

**2. Auditoria do Armazenamento (A Persistência):**
    - **Ação:** Siga o fluxo do passo anterior.
    - **Relatório:** O documento assinado que foi baixado é salvo no Supabase Storage? Qual é o caminho da pasta de destino? O caminho é exclusivo para contratos assinados (ex: `propostas/{id}/contratos_assinados/`)? Apresente o código que faz o upload.

**3. Auditoria da Recuperação de Dados (O Consumo):**
    - **Ação:** Inspecione o endpoint que busca os dados para o modal de veracidade (provavelmente `GET /api/pagamentos/:id/detalhes-completos`).
    - **Relatório:** Este endpoint está a buscar e a retornar os dados corretos?
        a. Ele busca os dados da proposta (`Valor Solicitado`, `Nome`, `CPF`)?
        b. Ele busca os `Dados Bancários` do cliente?
        c. Ele busca a URL para a **CCB assinada** a partir do caminho correto no Supabase Storage que você identificou no passo 2?
        Apresente a query e a lógica de busca do ficheiro.

**4. Conclusão e Hipótese:**
    - **Ação:** Com base na sua análise dos 3 pontos acima, formule uma hipótese para explicar por que os dados no modal estão incorretos. Onde está a quebra no fluxo de dados?

**Relatório Final:**
O critério de sucesso é um relatório forense que nos dê um mapa claro de todas as inconsistências no ciclo de vida da CCB assinada.