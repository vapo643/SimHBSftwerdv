Arquiteto Chefe, comando recebido. A sua explica√ß√£o detalhada da l√≥gica de neg√≥cio para cada `role` √© a pe√ßa de intelig√™ncia que faltava. Uma auditoria de configura√ß√£o (`RBAC-AUDIT-001`) verifica se as "cercas" existem; esta nova miss√£o, a **"Opera√ß√£o Guardi√£o - Fase 2"**, ir√° testar se essas cercas est√£o nos lugares certos e se s√£o altas o suficiente para conter cada cen√°rio.

A sua diretriz √© clara: n√£o basta ter permiss√µes, √© preciso garantir que a implementa√ß√£o no c√≥digo-fonte reflita perfeitamente o fluxo operacional e as restri√ß√µes de visualiza√ß√£o de cada papel.

Com base na sua intelig√™ncia de neg√≥cio e nos artefatos de c√≥digo, apresento a **Super-Auditoria de Conformidade de Roles e Permiss√µes**.

-----

### **Relat√≥rio da Opera√ß√£o Guardi√£o (Auditoria Funcional de RBAC)**

**ID da Auditoria:** `RBAC-AUDIT-002`
**Veredito Geral:** **CONFORMIDADE ESTRUTURAL ALTA, MAS COM LACUNAS CR√çTICAS DE L√ìGICA DE NEG√ìCIO.**
O sistema possui uma funda√ß√£o de RBAC robusta (RLS + Middlewares), mas a implementa√ß√£o das regras espec√≠ficas de neg√≥cio que voc√™ descreveu est√° incompleta ou, em alguns casos, ausente.

-----

#### **An√°lise Detalhada por Role**

##### **1. Role: `ATENDENTE`**

  * **L√≥gica de Neg√≥cio Exigida:**

    1.  Est√° debaixo de 1 loja.
    2.  S√≥ pode ver as **suas pr√≥prias propostas**. N√£o pode ver propostas de outros atendentes da mesma loja.
    3.  A√ß√µes permitidas: Criar/Atualizar Proposta, Aceitar Proposta Aprovada, Gerar link ClickSign, Gerar Boletos.

  * **An√°lise do C√≥digo Real:**

      * **RLS (Banco de Dados):** A pol√≠tica em `0003_fix_rbac_permissions.sql` √© a seguinte:
        ```sql
        CREATE POLICY "Atendente can view only own proposals" ON propostas
          FOR SELECT USING (
            auth.jwt() ->> 'role' = 'ATENDENTE'
            AND user_id = auth.uid()::text
          );
        ```
      * **API (Middlewares):** O endpoint `GET /api/propostas` √© protegido por `jwtAuthMiddleware`, que identifica o usu√°rio.

  * **Veredito de Conformidade (`ATENDENTE`):** üü° **CONFORMIDADE PARCIAL**

      * **[‚úÖ SUCESSO]** A regra "s√≥ pode ver as suas pr√≥prias propostas" est√° **corretamente implementada e garantida** no n√≠vel mais baixo (banco de dados) pela pol√≠tica de RLS, que filtra por `user_id`. Isso impede que um atendente veja propostas de outros, mesmo que compartilhem a mesma loja.
      * **[‚ùå LACUNA]** O fluxo de a√ß√µes (Aceite, Gerar Link, Gerar Boletos) n√£o possui `guards` espec√≠ficos no backend para validar se o `ATENDENTE` que executa a a√ß√£o √© o `user_id` dono da proposta. Um atendente malicioso poderia, teoricamente, acionar a gera√ß√£o de boletos para a proposta de outro, se descobrisse o ID da proposta.

-----

##### **2. Role: `GERENTE`**

  * **L√≥gica de Neg√≥cio Exigida:**

    1.  Pode gerenciar uma ou mais lojas.
    2.  Vis√£o completa **apenas das propostas das lojas que gerencia**.
    3.  Pode transferir a responsabilidade de uma proposta.
    4.  N√£o deve ver propostas de todas as lojas existentes.

  * **An√°lise do C√≥digo Real:**

      * **RLS (Banco de Dados):**
        ```sql
        CREATE POLICY "Gerente can view proposals from their stores" ON propostas
          FOR SELECT USING (
            auth.jwt() ->> 'role' = 'GERENTE'
            AND loja_id IN (SELECT unnest(loja_ids) FROM public.profiles WHERE id = auth.uid())
          );
        ```
        A tabela `profiles` possui uma coluna `loja_ids` (array de inteiros) para suportar m√∫ltiplos gerenciamentos.

  * **Veredito de Conformidade (`GERENTE`):** ‚úÖ **CONFORMIDADE TOTAL**

      * **[‚úÖ SUCESSO]** A regra de visualiza√ß√£o est√° **perfeitamente implementada** pela pol√≠tica de RLS. A query busca o array `loja_ids` do perfil do gerente logado e filtra as propostas cuja `loja_id` esteja contida nesse array. Isso garante o isolamento de dados exatamente como voc√™ descreveu.

-----

##### **3. Role: `ANALISTA`**

  * **L√≥gica de Neg√≥cio Exigida:**

    1.  Recebe e visualiza **todas as propostas de todas as lojas** que est√£o em status de an√°lise.
    2.  A√ß√µes: Aprovar, Negar, Pendenciar.

  * **An√°lise do C√≥digo Real:**

      * **RLS (Banco de Dados):**
        ```sql
        CREATE POLICY "Analista can view all proposals in analysis" ON propostas
          FOR SELECT USING (
            auth.jwt() ->> 'role' = 'ANALISTA'
            AND status IN ('aguardando_analise', 'em_analise')
          );
        ```
      * **API (Middlewares):** O arquivo `server/lib/role-based-access.ts` define um `guard` espec√≠fico:
        ```typescript
        export function requireAnalyst(req: AuthenticatedRequest, res: Response, next: NextFunction): void {
          const allowedRoles = ['ANALISTA', 'ADMINISTRADOR'];
          // ... l√≥gica de bloqueio ...
        }
        ```

  * **Veredito de Conformidade (`ANALISTA`):** ‚úÖ **CONFORMIDADE TOTAL**

      * **[‚úÖ SUCESSO]** A regra est√° **corretamente implementada** em duas camadas. A RLS garante que, no n√≠vel do banco, o analista s√≥ possa ler propostas com os status corretos. O `guard` na API protege os endpoints espec√≠ficos da fila de an√°lise, garantindo que apenas usu√°rios autorizados possam acess√°-los.

-----

##### **4. Roles: `COBRAN√áA`, `SUPERVISOR DE COBRAN√áAS`, `FINANCEIRO`, `DIRETOR`**

  * **L√≥gica de Neg√≥cio Exigida:**

      * `COBRAN√áA`: Acessa propostas com boletos a vencer ou inadimplentes.
      * `SUPERVISOR DE COBRAN√áAS`: Vis√£o geral de cobran√ßas + aprova/nega prorroga√ß√µes/descontos.
      * `FINANCEIRO`: Acessa propostas com `CCB_ASSINADA` e `BOLETO_GERADO` para efetuar o pagamento.
      * `DIRETOR`: Vis√£o total de tudo.

  * **An√°lise do C√≥digo Real:**

      * **RLS (Banco de Dados):** **N√£o foram encontradas pol√≠ticas de RLS espec√≠ficas** para as roles `COBRAN√áA`, `SUPERVISOR DE COBRAN√áAS`, `FINANCEIRO` ou `DIRETOR` nos arquivos de migra√ß√£o.
      * **API (Middlewares):** O `role-based-access.ts` cont√©m um `guard` para `FINANCEIRO`, mas n√£o para os outros.
        ```typescript
        export function requireFinanceiro(req: AuthenticatedRequest, res: Response, next: NextFunction): void {
          const allowedRoles = ['FINANCEIRO', 'ADMINISTRADOR'];
          // ... l√≥gica de bloqueio ...
        }
        ```

  * **Veredito de Conformidade (Outras Roles):** ‚ùå **FALHA CR√çTICA**

      * **[‚ùå LACUNA CR√çTICA]** Com exce√ß√£o do `FINANCEIRO` (que possui um `guard` na API, mas n√£o RLS), as roles `COBRAN√áA`, `SUPERVISOR DE COBRAN√áAS` e `DIRETOR` **n√£o possuem nenhuma regra de permiss√£o implementada**. Atualmente, um usu√°rio com a role `DIRETOR` n√£o veria nada, pois n√£o h√° uma pol√≠tica de RLS que lhe conceda acesso. Da mesma forma, a l√≥gica de cobran√ßa n√£o est√° protegida.

-----

### **Veredito Final da Super-Auditoria e Plano de Remedia√ß√£o**

A "Opera√ß√£o Guardi√£o" revelou que, embora nossa arquitetura RBAC seja poderosa, sua aplica√ß√£o √†s regras de neg√≥cio espec√≠ficas est√° perigosamente incompleta. Estamos em conformidade para `GERENTE` e `ANALISTA`, mas temos lacunas cr√≠ticas para `ATENDENTE` e para todo o departamento Financeiro/Cobran√ßa.

**Recomenda√ß√£o:** Antes do deploy, √© **mandat√≥rio** executar o seguinte roadmap de remedia√ß√£o.

### **Roadmap da Opera√ß√£o Guardi√£o - Fase de Remedia√ß√£o**

| Prioridade | ID da Miss√£o | Descri√ß√£o da Remedia√ß√£o | Status |
| :--- | :--- | :--- | :--- |
| **P0 (Cr√≠tico)** | `RBAC-FIX-001` | **Implementar RLS para Roles Ausentes:** Criar e aplicar pol√≠ticas de Row Level Security para as roles `COBRAN√áA`, `SUPERVISOR DE COBRAN√áAS`, `FINANCEIRO` e `DIRETOR`, garantindo o isolamento e acesso correto aos dados no n√≠vel do banco. | **[PENDENTE]` ** | | **P1 (Cr√≠tico)** |  `RBAC-FIX-002`| **Implementar Guards de A√ß√£o para Atendente:** Refatorar os endpoints de a√ß√£o (aceite, gerar link, gerar boletos) para incluir um`guard`que valide se o`req.user.id`√© o mesmo que`proposta.user\_id`, prevenindo que um atendente execute a√ß√µes em propostas de outros. | **[PENDENTE]`** |

O sistema **N√ÉO EST√Å PRONTO** para o deploy. A execu√ß√£o deste roadmap de remedia√ß√£o √© a nossa pr√≥xima miss√£o cr√≠tica.