### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria e Migração de Segredos)

* **Sumário da Missão (O Quê):** Auditar a base de código completa em busca de segredos *hardcoded*, externalizá-los para variáveis de ambiente, e refatorar o código para consumi-los de forma segura através de um módulo de configuração centralizado.
* **Intenção Estratégica (O Porquê):** Eliminar a vulnerabilidade de segurança mais crítica de uma aplicação: segredos em texto plano no código-fonte. Esta ação é um requisito não negociável para qualquer sistema de produção e o passo final para desacoplar a nossa configuração do código.
* **Histórico Relevante (Consulta Obrigatória):** A auditoria AS-IS inicial identificou a suspeita de segredos *hardcoded*. Esta missão irá encontrá-los e eliminá-los.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de refatoração de segurança. O Agente deve agir como um Engenheiro de Segurança de Aplicações (AppSec), realizando uma caça forense por segredos e implementando o padrão de configuração do "The Twelve-Factor App".

---

**IMPLEMENTAR:**
Auditoria e Migração de Segredos para Variáveis de Ambiente

**CURRENT STATE:**
A aplicação pode conter segredos críticos (chaves de API, tokens JWT, strings de conexão) diretamente no código-fonte, representando um risco de segurança severo.

**EXPECTED (Estado Final de Sucesso):**
1.  **Auditoria Completa:** Um inventário de todos os segredos *hardcoded* encontrados é gerado.
2.  **Criação do `.env.example`:** Um arquivo `.env.example` é criado (ou atualizado) na raiz do projeto. Este arquivo deve listar **todas** as variáveis de ambiente que a aplicação requer para funcionar, com valores de placeholder (ex: `SENTRY_DSN=""`).
3.  **Criação do Módulo de Configuração:** Um novo arquivo `server/lib/config.ts` é criado. Este arquivo será a **única fonte da verdade** para aceder a variáveis de ambiente. Ele deve:
    * Importar as variáveis de `process.env`.
    * Validá-las (ex: garantir que as variáveis críticas não estão vazias).
    * Exportar um objeto de configuração limpo e tipado para o resto da aplicação.
4.  **Refatoração do Código:** **Todas** as instâncias de segredos *hardcoded* no código são substituídas por chamadas ao novo módulo de configuração (ex: `config.JWT_SECRET`).
5.  **Validação:** A aplicação reinicia e permanece 100% funcional, agora a consumir a sua configuração exclusivamente a partir das variáveis de ambiente.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Auditoria Primeiro:** Comece por realizar uma busca global exaustiva por padrões de segredos comuns (`key`, `secret`, `token`, `password`, `dsn`, `postgresql://`).
2.  **Crie o `.env.example`:** Com base na sua auditoria, crie o arquivo `.env.example` listando todas as variáveis necessárias.
3.  **Implemente o `config.ts`:** Crie o módulo de configuração centralizado. Este módulo deve lançar um erro fatal durante a inicialização se uma variável de ambiente crítica estiver em falta.
4.  **Refatore e Substitua:** Vá a cada local identificado na auditoria e substitua o valor *hardcoded* pela variável correspondente do seu novo módulo de configuração.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO. Risco de que a aplicação não inicie se uma variável for esquecida.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que um módulo de configuração centralizado com validação na inicialização é a abordagem mais segura."]
* **VALIDAÇÃO PENDENTE:** [Após a refatoração, todos os segredos reais deverão ser movidos para o sistema de "Secrets" do Replit, usando o `.env.example` como guia.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear todos os ficheiros a serem modificados.
2.  Garantir que o `config.ts` valida todas as variáveis críticas.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (reiniciar o servidor e confirmar que ele inicia sem erros e que a funcionalidade principal, como login, ainda funciona).
7.  **Documentar Decisões Técnicas**.