---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*A nossa investigação anterior revelou que o schema do banco de dados é excessivamente permissivo. Agora, a sua missão é descobrir por que a nossa lógica de aplicação falha em preencher os dados, mesmo quando eles existem. Você deve atuar como um detetive de fluxo de dados, rastreando a jornada de uma única proposta desde o seu nascimento até a sua formalização, identificando cada ponto de falha na persistência dos dados.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** para consultar a **documentação do Drizzle ORM** sobre como interceptar ou fazer o log de queries SQL geradas, e a **documentação do `supertest`** sobre como inspecionar payloads de requisição em testes, para auxiliar na sua investigação forense.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO RAIO-X (FASE 2 - AUDITORIA DE FLUXO DE DADOS)**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense de ponta a ponta no ciclo de vida dos dados da entidade `propostas`, rastreando o fluxo de dados desde a criação da proposta no frontend até a sua atualização final após a geração da CCB, para identificar por que as 80 colunas `nullable` não estão a ser preenchidas.
* **Intenção Estratégica (O Porquê):** A integridade dos dados é a espinha dorsal de um sistema financeiro. Esta auditoria irá expor as lacunas na nossa lógica de negócio e de persistência que estão a permitir a criação de dados inconsistentes. O resultado desta missão nos dará o conhecimento exato necessário para blindar o nosso sistema.
* **Histórico Relevante (Consulta Obrigatória):** A sua análise deve ser guiada pelo relatório `docs/diagnostics/ANALISE_SCHEMA_PROPOSTAS.md`. A "Lista de Colunas `Nullable` para Investigação" contida nesse documento é a sua lista de alvos principal.
* **Modelo Mental (Como se Encaixa):** Você é um auditor a seguir o rasto do dinheiro. Comece com um "pacote" de dados no frontend e siga-o através de cada camada da aplicação (API, serviços, repositórios), verificando se nenhuma informação é perdida no caminho até ao seu destino final no banco de dados.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (ALTO):** O fluxo de dados pode ser complexo e ramificado, envolvendo múltiplos serviços e atualizações assíncronas (workers), o que pode dificultar o rastreamento.
    * **Contramedida:** A sua abordagem deve ser faseada. Rastreie primeiro o fluxo síncrono (criação inicial via API) e depois investigue os fluxos assíncronos (atualizações via workers), documentando cada etapa separadamente.

---

### **AUDITAR E VALIDAR:**
Falha Sistémica na Persistência de Dados da Proposta

**[PROTOCOLO DE AUDITORIA DE CENÁRIO DE NEGÓCIO (PACN) V1.0 ATIVADO]**
*Sua resposta deve ser um relatório de diagnóstico exaustivo em `docs/diagnostics/RASTREAMENTO_FLUXO_DADOS_PROPOSTA.md`. Para cada etapa do fluxo, prove com evidências de código (trechos de código, payloads de API, logs de queries SQL) onde os dados são perdidos ou não são persistidos.*

**Cenário de Negócio (O "Caso de Teste"):**
O ciclo de vida completo de uma proposta. O sistema deve capturar todos os dados do cliente, do veículo, das condições financeiras e da CCB e persisti-los corretamente na tabela `propostas`.

**Vetor de Ataque / Ponto de Falha (A "Hipótese"):**
A hipótese é que existem múltiplas falhas no fluxo de dados:
1.  **Frontend:** O formulário de criação/edição da proposta não está a enviar todos os campos necessários no payload da API.
2.  **Backend (Controller/DTO):** A camada da API está a receber os dados, mas não os está a mapear corretamente para os serviços de negócio.
3.  **Backend (Service/Repository):** Os serviços de negócio estão a processar a lógica, mas estão a falhar em passar o objeto de dados completo para a camada de repositório para a operação de `UPDATE` ou `INSERT`.
4.  **Backend (ORM/Schema):** A lógica está correta, mas a definição do schema no Drizzle ou a sua utilização está a impedir que os campos sejam salvos.

**Evidência de Conformidade Requerida (A "Prova Irrefutável"):**
Você deve produzir um **Relatório de Rastreamento de Dados** que responda inequivocamente às seguintes questões, usando como caso de estudo a proposta criada mais recentemente no sistema que tenha o campo `ccbGerado` como `true`.

1.  **Ponto de Origem (Frontend):**
    * Identifique o(s) componente(s) React responsáveis pelo formulário de criação/edição da proposta.
    * Apresente o trecho de código da função `onSubmit` (ou equivalente) que envia a requisição para a API. Qual é o payload exato que está a ser enviado?

2.  **Ponto de Entrada (Backend API):**
    * Identifique o controlador e a rota que recebem os dados do frontend.
    * Adicione um log temporário para capturar e apresentar o `req.body` completo que chega a este endpoint. Os dados do frontend estão a chegar intactos?

3.  **Ponto de Lógica de Negócio (Serviços):**
    * Rastreie o `payload` da API através dos serviços que manipulam a criação/atualização da proposta.
    * Identifique a chamada principal ao repositório (ex: `propostaRepository.update(propostaId, dados)`). Apresente o objeto `dados` exato que está a ser passado para a camada de persistência. Quais campos críticos estão em falta neste ponto?

4.  **Ponto de Persistência (Repositório/ORM):**
    * Dentro da função do repositório, encontre a chamada do Drizzle (ex: `db.update(propostas).set(...)`).
    * Qual é a query SQL final que está a ser gerada e executada? (Utilize `drizzle-logger` ou um método equivalente para capturar o SQL). A query SQL omite os campos que deveriam ser atualizados?

5.  **Veredito da Hipótese:**
    * Com base na sua análise, aponte qual(is) dos quatro vetores de ataque é/são a(s) causa(s) raiz do problema de dados `NULL` e proponha um plano de correção de alto nível.