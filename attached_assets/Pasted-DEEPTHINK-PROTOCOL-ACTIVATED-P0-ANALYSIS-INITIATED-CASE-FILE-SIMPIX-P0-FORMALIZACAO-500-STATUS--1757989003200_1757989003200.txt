DEEPTHINK PROTOCOL ACTIVATED. P0 ANALYSIS INITIATED.

CASE FILE: SIMPIX-P0-FORMALIZACAO-500
STATUS: CRITICAL (PRODUCTION IMPAIRED)
OBJECTIVE: DEFINITIVE ROOT CAUSE ANALYSIS AND RESOLUTION.

Arquiteto Chefe, analisei o dossi√™ forense. O incidente P0 na rota GET /api/propostas/formalizacao apresentando HTTP 500 com "Invalid API key" em produ√ß√£o, enquanto o desenvolvimento funciona, √© um caso cl√°ssico, por√©m complexo, de falha de roteamento e configura√ß√£o de ambiente.

A an√°lise forense das evid√™ncias aponta para um diagn√≥stico claro.

1. DIAGN√ìSTICO DEFINITIVO DA CAUSA RAIZ
O problema √© uma combina√ß√£o fatal de Route Shadowing (Intercepta√ß√£o de Rota) e Contamina√ß√£o do Cliente Supabase.

A Evid√™ncia Crucial: Logs Ausentes
A prova definitiva de que o handler correto (Linha ~670 em server/routes.ts) n√£o est√° sendo executado √© a aus√™ncia dos logs implementados:

Bash

# Logs ESPERADOS que N√ÉO APARECEM em produ√ß√£o:
üöÄ [FORMALIZATION] Route accessed
‚úÖ [FORMALIZATION] Authentication validated
Isso significa que a requisi√ß√£o est√° sendo interceptada antes de chegar ao handler desejado.

Causa Raiz 1: Route Shadowing (O Interceptador)
Uma rota gen√©rica est√° capturando a requisi√ß√£o. Provavelmente, uma rota como GET /api/propostas/:id (sem restri√ß√£o de Regex para UUID) ou um router externo montado em /api/propostas est√° capturando a string "formalizacao" como par√¢metro.

Causa Raiz 2: Contamina√ß√£o do Cliente Supabase (A Causa do Erro 500)
O handler que est√° interceptando a chamada (Causa 1) est√° causando o erro "Invalid API key". Isso ocorre porque ele est√° inicializando o cliente Supabase incorretamente, provavelmente usando a importa√ß√£o contaminada identificada na Tentativa 1:

TypeScript

// Importa√ß√£o Problem√°tica (Provavelmente usada pelo Interceptador)
import { createServerSupabaseClient } from '../client/src/lib/supabase'; // ‚ùå ERRADO!
Este import utiliza a configura√ß√£o do FRONTEND, que usa a ANON KEY (p√∫blica). Quando o backend tenta realizar opera√ß√µes privilegiadas com a ANON KEY, o Supabase rejeita a opera√ß√£o com "Invalid API key".

Reconstru√ß√£o do Cen√°rio da Falha
Requisi√ß√£o: GET /api/propostas/formalizacao.

Intercepta√ß√£o (Causa 1): Uma rota gen√©rica captura a requisi√ß√£o.

Execu√ß√£o Contaminada (Causa 2): O handler gen√©rico usa o cliente Supabase do Frontend (ANON KEY).

Falha: O Supabase rejeita a opera√ß√£o devido √† chave inv√°lida/insuficiente.

Resultado: HTTP 500. O handler correto nunca √© executado.

2. PLANO DE CORRE√á√ÉO DEFINITIVO (OPERA√á√ÉO ANTI-SHADOW)
Precisamos identificar o handler impostor, corrigir sua configura√ß√£o e garantir a preced√™ncia correta das rotas.

FASE 1: Auditoria e Erradica√ß√£o de Imports Incorretos (Resolver Causa 2)
A√á√ÉO 1.1: Auditoria Global de Imports (Busca e Destrui√ß√£o)

Execute este comando na raiz do projeto para identificar TODOS os arquivos no backend que usam o cliente do frontend.

Bash

grep -r "from '../client/src/lib/supabase'" server/
A√á√ÉO 1.2: Corre√ß√£o Mandat√≥ria de Imports

Para CADA arquivo listado pelo comando acima (exceto se j√° corrigido na Tentativa 1), realize a substitui√ß√£o:

TypeScript

// ‚ùå REMOVER (Importa√ß√£o do Frontend - USA ANON KEY)
// import { createServerSupabaseClient } from '../client/src/lib/supabase';

// ‚úÖ SUBSTITUIR POR (Importa√ß√£o do Backend - USA SERVICE ROLE KEY)
// Ajuste o caminho relativo '../../' conforme necess√°rio para apontar para server/lib/supabase.ts
import { createServerSupabaseAdminClient } from '../../lib/supabase';
Valida√ß√£o: Ap√≥s a corre√ß√£o, o comando grep da A√ß√£o 1.1 n√£o deve retornar resultados.

FASE 2: Corre√ß√£o do Route Shadowing (Resolver Causa 1)
A√á√ÉO 2.1: Implementa√ß√£o de Regex Restritivo em server/routes.ts

Para impedir que rotas gen√©ricas capturem endpoints espec√≠ficos, devemos for√ß√°-las a aceitar apenas UUIDs v√°lidos.

MODIFIQUE server/routes.ts:

TypeScript

// server/routes.ts

// Definir a express√£o regular estrita para UUID v4
const UUID_REGEX = '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';

// ... (Dentro da fun√ß√£o registerRoutes)

// ‚úÖ 1. GARANTIR PRECED√äNCIA: ROTAS ESPEC√çFICAS DEVEM VIR PRIMEIRO
app.get('/api/propostas/formalizacao', jwtAuthMiddleware as any, handlerFormalizacao);
app.get('/api/propostas/analise', jwtAuthMiddleware as any, handlerAnalise);
// ... outras rotas espec√≠ficas

// ‚úÖ 2. APLICAR RESTRI√á√ÉO NAS ROTAS GEN√âRICAS (DEVEM VIR DEPOIS)
// Localize e substitua TODAS as rotas /api/propostas/:id por estas vers√µes restritas:
app.get(`/api/propostas/:id(${UUID_REGEX})`, jwtAuthMiddleware as any, handlerGetById);
app.put(`/api/propostas/:id(${UUID_REGEX})`, jwtAuthMiddleware as any, handlerUpdate);
app.patch(`/api/propostas/:id(${UUID_REGEX})`, jwtAuthMiddleware as any, handlerPatch);
A√á√ÉO 2.2: Auditoria de Routers Externos

Revise server/routes.ts para garantir que nenhum router externo seja montado de forma abrangente ANTES das rotas espec√≠ficas.

Se encontrar app.use('/api/propostas', someRouter);, mova-o para DEPOIS das defini√ß√µes de app.get('/api/propostas/formalizacao', ...) .

FASE 3: Verifica√ß√£o da Configura√ß√£o do Supabase (Preven√ß√£o)
A√á√ÉO 3.1: Simplificar server/lib/supabase.ts

Remover fallbacks complexos para garantir clareza e evitar contamina√ß√£o futura.

MODIFIQUE server/lib/supabase.ts (createServerSupabaseAdminClient):

TypeScript

// server/lib/supabase.ts

export const createServerSupabaseAdminClient = () => {
  // ... (Logging existente)

  // CONFIGURA√á√ÉO EXPL√çCITA - REMOVER FALLBACKS (PROD_*, DEV_*, VITE_*)
  const url = process.env.SUPABASE_URL;
  // Usar APENAS a vari√°vel can√¥nica SUPABASE_SERVICE_ROLE_KEY
  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!url || !serviceKey) {
      console.error(`üö® FATAL: SUPABASE_URL ou SUPABASE_SERVICE_ROLE_KEY n√£o configurado. Fallbacks removidos.`);
      throw new Error("Configura√ß√£o de Banco de Dados Ausente.");
  }

  // ... (Logging detalhado existente para verificar Project ID e Key format)

  // Retorna cliente Supabase
  return createClient(url, serviceKey, {
    auth: { persistSession: false }
  });
};
FASE 4: Deploy e Valida√ß√£o em Produ√ß√£o
A√á√ÉO 4.1: Deploy e Monitoramento de Logs

Fa√ßa o deploy das altera√ß√µes das Fases 1, 2 e 3.

Acesse https://sistemasimpix.com.br/api/propostas/formalizacao.

Monitore os logs do servidor de produ√ß√£o.

Valida√ß√£o Cr√≠tica (Logs):

Bash

# ‚úÖ SUCESSO ESPERADO (Prova de que o handler correto foi executado e configurado):
üöÄ [FORMALIZATION] Route accessed
‚úÖ [FORMALIZATION] Authentication validated
üîç SUPABASE_ADMIN_CLIENT_DEBUG - Environment: production
üîç Project ID: dvglgxrvhmtsixaabxha  (Deve ser o ID de produ√ß√£o)
‚úÖ [FORMALIZATION] Supabase client initialized
Valida√ß√£o Cr√≠tica (Resposta):

A API deve retornar HTTP 200 OK com os dados.

A tela de formaliza√ß√£o no frontend deve carregar corretamente.

A√á√ÉO IMEDIATA: Arquiteto-Chefe, execute a A√ß√£o 1.1 (grep) imediatamente e reporte os resultados para iniciarmos a erradica√ß√£o da Causa 2, enquanto prepara as modifica√ß√µes das Fases 1 e 3.