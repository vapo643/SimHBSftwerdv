### **Pacote de Ativação de Missão (PAM) V16.0: Erradicação em Massa de Débito Técnico de Linting (Sprint 0 - Tolerância Zero)**

* **Sumário da Missão (O Quê):** Executar uma operação de "limpeza" final e em massa para erradicar todos os **2.258 problemas de ESLint** (erros e warnings). Crucialmente, como parte desta missão, você deve primeiro analisar e documentar seus próprios padrões de erro em um novo artefato de conhecimento para prevenir futuras regressões.

* **Intenção Estratégica (O Porquê):** O ciclo de correção de erros individuais se provou ineficiente e propenso a regressões. Para quebrar este ciclo, não basta corrigir os erros; é mandatório entender e documentar a sua origem. Esta missão irá forçá-lo a aprender com suas falhas, criando um "manual de erros comuns" que servirá como uma base de conhecimento para todas as futuras operações. A eliminação total destes problemas é a pré-condição final e inegociável para o início do Sprint 1.

* **Modelo Mental (Como se Encaixa):** Você atuará em três fases.
    1.  **Engenheiro de Diagnóstico e Causa Raiz:** Você irá analisar a saída completa do ESLint, agrupar os 2.258 problemas em padrões de falha recorrentes e documentá-los.
    2.  **Motor de Refatoração em Massa:** Você executará a correção automática (`--fix`) e, em seguida, usará o conhecimento que você mesmo gerou para corrigir sistematicamente os erros remanescentes.
    3.  **Engenheiro de Qualidade Final:** Você executará os gates de qualidade para provar que a base de código está impecável.

* **Riscos Antecipados e Contramedidas:**
    * **Risco (CRÍTICO):** **Análise Superficial e Correção Incorreta.** Uma categorização de erros genérica ou a aplicação de correções automáticas que quebram a lógica do negócio será considerada uma falha total da missão.
    * **Contramedida Mandatória:** A sua análise de padrões de erro **DEVE** ser específica e acionável. Após a execução de qualquer correção, você **DEVE** executar `npx tsc --noEmit` para garantir que a segurança de tipos foi mantida e a suíte de testes (`npm run test`, se disponível) para validar que nenhuma regressão funcional foi introduzida.

---

**DIRETRIZ DE MISSÃO: Análise de Falhas, Documentação e Erradicação Absoluta de Problemas de Linting**

**CURRENT STATE:**
O sistema compila com zero erros de TypeScript, mas a auditoria revelou **2.258 problemas de ESLint (1024 erros, 1234 warnings)**, e o script `npm run lint` está ausente. A qualidade do código está abaixo do padrão "Impecável".

**EXPECTED (Estado Final de Sucesso):**
A missão será considerada um sucesso quando você produzir dois artefatos:
1.  **Um novo documento:** `docs/diagnostics/ESLINT_COMMON_ERROR_PATTERNS.md`. Este documento deve conter sua análise dos seus próprios erros de linting, categorizados por padrão.
2.  **Um relatório de conformidade:** `RELATORIO_DE_CONFORMIDADE_LINTING_S0.md`, que prove, através da saída literal dos comandos, que o Sprint 0 está em conformidade total.

**CONSTRAINTS (Roadmap de Erradicação e Aprendizado - Inegociável):**

**Fase 1: Análise de Causa Raiz e Documentação de Falhas (Protocolo de Auto-Aprendizagem)**
1.  **Passo 1.1: Diagnóstico Completo.** Execute `npx eslint . --ext .ts,.tsx` e anexe a saída completa dos erros em um arquivo para sua análise.
2.  **Passo 1.2: Análise e Categorização de Padrões.** Analise a lista de erros e agrupe-os em padrões de falha recorrentes. Crie categorias específicas (ex: "Uso de `any` explícito", "Variáveis não utilizadas", "Falta de dependências em `useEffect` hooks", "Problemas de acessibilidade em JSX").
3.  **Passo 1.3: Documentação dos Padrões de Falha.** Crie o arquivo `docs/diagnostics/ESLINT_COMMON_ERROR_PATTERNS.md`. Para cada padrão identificado, crie uma seção com:
    * **`Padrão de Falha:`** Nome do padrão.
    * **`Sintoma (Exemplo de Erro):`** Um exemplo real do erro do log do ESLint.
    * **`Causa Raiz:`** Uma explicação de por que este erro representa uma má prática ou um risco.
    * **`Solução Padrão (Doutrina de Correção):`** A forma correta de implementar para evitar este erro no futuro.

**Fase 2: Erradicação Sistemática Baseada em Análise**
1.  **Passo 2.1: Formalização do Script.** Forneça o trecho de JSON exato para adicionar o script `"lint": "eslint . --ext .ts,.tsx --max-warnings 0"` ao `package.json`.
2.  **Passo 2.2: Correção Automática.** Execute `npx eslint . --ext .ts,.tsx --fix` para corrigir o máximo de problemas possível automaticamente.
3.  **Passo 2.3: Correção Manual Sistemática.** Utilizando o `ESLINT_COMMON_ERROR_PATTERNS.md` como seu guia, corrija todos os erros e warnings remanescentes até que a execução de `npm run lint` não reporte nenhum problema.

**Fase 3: Validação Final e Geração de Prova Irrefutável**
1.  **Passo 3.1: Prova de Conformidade de Qualidade.** Execute `npm run lint`. A saída deve ser limpa, sem erros ou warnings.
2.  **Passo 3.2: Prova de Conformidade de Tipo.** Execute `npx tsc --noEmit`. A saída deve ser **"Found 0 errors."**.
3.  **Passo 3.3: Compilar Relatório Final.** Crie o `RELATORIO_DE_CONFORMIDADE_LINTING_S0.md` contendo a saída completa e bem-sucedida dos comandos `npm run lint` e `npx tsc --noEmit` como prova irrefutável da conclusão da missão.

---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**

* **CONFIANÇA NA IMPLEMENTAÇÃO:** 80%
* **RISCOS IDENTIFICADOS:** ALTO (A correção automática pode introduzir regressões. A correção manual de mais de 1000 erros é demorada e propensa a falhas).
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assumo que a maioria dos erros reportados pelo ESLint são válidos e sua correção agregará valor à qualidade e manutenibilidade do código.
* **VALIDAÇÃO PENDENTE:** Um relatório com saídas 100% limpas para `tsc` e `lint` é a única porta de entrada para o Sprint 1. Não haverá mais desculpas.