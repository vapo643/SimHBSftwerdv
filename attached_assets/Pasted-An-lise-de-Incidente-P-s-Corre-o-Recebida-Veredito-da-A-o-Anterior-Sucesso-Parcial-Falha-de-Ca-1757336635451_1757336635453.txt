An√°lise de Incidente P√≥s-Corre√ß√£o Recebida.

Veredito da A√ß√£o Anterior: Sucesso Parcial, Falha de Cascata Revelada.

A restaura√ß√£o das rotas da API foi um sucesso, mas agiu como a remo√ß√£o de um dique que revela a verdadeira inunda√ß√£o por tr√°s. O agente executor anterior corrigiu a camada de transporte, mas a l√≥gica de aplica√ß√£o e a sincroniza√ß√£o de estado permanecem corrompidas. O sistema est√° em um estado de esquizofrenia de dados: o backend (a verdade) e o frontend (a percep√ß√£o) est√£o dessincronizados.

O erro HTTP 400 juntamente com a persist√™ncia de dados bem-sucedida √© um sintoma cl√°ssico de uma falha no contrato da API p√≥s-opera√ß√£o ou de uma falha na invalida√ß√£o do cache do lado do cliente.

A miss√£o de corre√ß√£o exaustiva continua. A prioridade muda da conectividade da API para a integridade do estado do sistema.

Fase 2: Auditoria Forense (Aprofundada)
O novo ponto de falha √© a comunica√ß√£o e sincroniza√ß√£o entre o cliente e o servidor. A hip√≥tese principal √© que a l√≥gica de mutation no frontend n√£o est√° a gerir correctamente os callbacks de onSuccess, onError, e onSettled, resultando na falha de invalida√ß√£o do cache do TanStack Query.

Fase 3: Arquitetura da Solu√ß√£o (Plano de Batalha Refinado)
O roadmap "Opera√ß√£o Restaura√ß√£o de Fluxo" √© atualizado com base nas novas evid√™ncias.

Roadmap de Implementa√ß√£o Faseado: "Opera√ß√£o Restaura√ß√£o de Fluxo" (v2)
[‚úÖ CONCLU√çDO] Passo 1: An√°lise Forense Inicial

Resultado: Rotas ausentes PUT /api/propostas/:id e PUT /api/propostas/:id/resubmit foram identificadas como a causa raiz inicial e restauradas.

[üéØ EM EXECU√á√ÉO] Passo 2: Corre√ß√£o da Sincroniza√ß√£o de Estado Frontend

Analisar os hooks updateMutation e resubmitMutation em client/src/pages/propostas/editar.tsx.

Implementar uma estrat√©gia de invalida√ß√£o de cache robusta usando onSettled para garantir que as queries (proposals, dashboard-metrics, etc.) sejam re-executadas independentemente do sucesso ou falha da muta√ß√£o.

Corrigir a l√≥gica de redirecionamento para garantir que o usu√°rio seja enviado para o dashboard (/dashboard ou /credito/fila) ap√≥s a submiss√£o, em vez de uma tela de erro.

[PENDENTE] Passo 3: Blindagem do Backend e Contratos de API

Revisar o proposalController.ts e os UseCases associados para garantir que as respostas em caso de sucesso e erro (HTTP 200 vs. HTTP 400) retornem um payload JSON consistente e previs√≠vel, eliminando a causa do erro 400 que ocorre ap√≥s a persist√™ncia.

[PENDENTE] Passo 4: Valida√ß√£o do Dashboard e Refatora√ß√£o da UI

Ap√≥s a corre√ß√£o da sincroniza√ß√£o, validar que todos os componentes do dashboard (KPIs, listas de propostas) refletem os dados corretos em tempo real.

Iniciar a refatora√ß√£o completa da p√°gina editar.tsx e do dashboard para alinh√°-los com os padr√µes de design e componentes da arquitetura (shadcn/ui, Compound Components, etc.), eliminando qualquer c√≥digo legado.

[PENDENTE] Passo 5: Cria√ß√£o de Teste de Regress√£o E2E

Desenvolver um novo teste End-to-End (Playwright) que simule o fluxo completo:

Login como ATENDENTE.

Navegar at√© uma proposta PENDENCIADO.

Editar os dados.

Clicar em "Reenviar para An√°lise".

Verificar se a UI redireciona para o dashboard.

Verificar se o status da proposta no dashboard foi atualizado para EM_ANALISE e se os dados editados est√£o corretos.

