# MISSÃO DE IMPLEMENTAÇÃO COREOGRAFADA v1.2 (ANTI-FRÁGIL)



**## CONTEXTO, INTENÇÃO E EXPECTATIVA (LEIA COM ATENÇÃO)**



**Contexto e Histórico de Falhas:**

Olá, Agente. Esta é a nossa missão mais crítica até agora. Estamos a confiar em você para reconstruir a espinha dorsal da segurança da nossa aplicação. Tentativas anteriores de implementar esta funcionalidade falharam catastroficamente. O sistema ficou num estado onde um `ATENDENTE` tinha permissões totais de `ADMINISTRADOR`, e o próprio `ADMINISTRADOR` não conseguia aceder às suas telas. Tivemos de fazer múltiplos "rollbacks". A sua missão é quebrar este ciclo de falhas de uma vez por todas, seguindo este plano com máxima precisão.



**Nossa Intenção Estratégica:**

A intenção é criar um sistema de permissões (RBAC) que seja **blindado**. Queremos que a `role` de um usuário, definida no nosso banco de dados, seja a única e absoluta "fonte da verdade" para o que ele pode ver e fazer na aplicação.



**Expectativa de Sucesso (O Resultado Final):**

Ao final da sua execução, o sistema deve funcionar da seguinte forma:

1.  Quando eu fizer login como **`ADMINISTRADOR`**, eu devo conseguir ver **todos** os menus administrativos e aceder a todas as páginas sem erros.

2.  Quando eu fizer login como um **`ATENDENTE`**, eu devo ver um menu **limitado** (sem os links de admin como "Usuários", "Parceiros", etc.).

3.  Se, como `ATENDENTE`, eu tentar aceder a um URL de administrador diretamente (ex: `/parceiros`), eu devo ser **bloqueado** com um erro "403 Forbidden".



---

**## DIRETRIZES DE EXECUÇÃO**



**Diretriz Principal:** Este é um prompt "coreografado". Execute cada passo de forma atómica e sequencial. Não prossiga para o próximo passo até que o anterior esteja completo e validado.



---

**## ROADMAP DE EXECUÇÃO (MICRO-PASSOS)**



**# PASSO 1 de 4: Refatoração do Middleware de Backend**



* **AÇÃO:** Modifique **APENAS** o ficheiro `/server/lib/jwt-auth-middleware.ts`. Substitua o seu conteúdo pelo código que implementa a lógica de enriquecimento de sessão (validar token, buscar perfil na tabela `profiles`, anexar perfil completo a `req.user`).

* **VALIDAÇÃO IMEDIATA:** Após aplicar esta mudança, reinicie o servidor. Confirme que ele inicia sem erros. **NÃO PROSSIGA se houver erros.**

* **REPORTE A EVIDÊNCIA:** Reporte "Passo 1 concluído com sucesso" após a validação.



---

**# PASSO 2 de 4: Criação do Contexto de Autenticação no Frontend**



* **AÇÃO:** Crie **APENAS** o ficheiro `/client/src/contexts/AuthContext.tsx`. Este ficheiro deve conter o `AuthProvider` e o hook `useAuth`.

* **VALIDAÇÃO IMEDIATA:** Confirme que o ficheiro foi criado e a aplicação compila sem erros. **NÃO PROSSIGA se houver erros.**

* **REPORTE A EVIDÊNCIA:** Reporte "Passo 2 concluído com sucesso" após a validação.



---

**# PASSO 3 de 4: Integração do Provedor de Contexto**



* **AÇÃO:** Modifique **APENAS** o ficheiro `client/src/App.tsx`. Importe o `AuthProvider` e envolva a sua estrutura de rotas com ele.

* **VALIDAÇÃO IMEDIATA:** Reinicie o servidor. Confirme que a aplicação ainda carrega sem erros no browser.

* **REPORTE A EVIDÊNCIA:** Reporte "Passo 3 concluído com sucesso" após a validação.



---

**# PASSO 4 de 4: Aplicação do Controle de Visibilidade na UI**



* **AÇÃO:** Modifique **APENAS** o ficheiro `/client/src/components/DashboardLayout.tsx`. Utilize o hook `useAuth` para renderizar condicionalmente os links de navegação administrativos.

* **VALIDAÇÃO IMEDIATA:** Reinicie o servidor. Verifique se o comportamento final corresponde à "Expectativa de Sucesso" descrita no início.

* **REPORTE A EVIDÊNCIA:** Reporte "Passo 4 concluído com sucesso" e confirme o comportamento observado.

---