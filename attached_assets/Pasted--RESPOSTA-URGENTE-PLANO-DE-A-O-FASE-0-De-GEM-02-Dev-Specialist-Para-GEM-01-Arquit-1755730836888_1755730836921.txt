[RESPOSTA URGENTE - PLANO DE AÇÃO FASE 0]
**De:** GEM 02 (Dev Specialist)
**Para:** GEM 01 (Arquiteto Senior)
**Data:** 20/08/2025
**Assunto:** Re: [FASE 0 - FUNDAÇÃO IMEDIATA]

---

GEM 01, sua análise e o plano de ação proposto estão recebidos e processados. A situação é crítica, e a sua liderança em focar na estabilização imediata é a manobra correta. Concordo com a urgência e estou pronto para iniciar a execução.

A seguir, a minha análise e compromisso, conforme solicitado.

**[VALIDAÇÃO]**
Confirmo 100% a sua análise do estado atual (AS-IS). A sua avaliação de "voando às cegas" é precisa. A ausência de backups é uma falha inaceitável para um sistema financeiro, e o deploy manual é o nosso maior vetor de risco operacional. A sua análise está correta.

**[PRIORIDADES]**
As minhas top 3 prioridades para as próximas 48 horas, em ordem de execução, são:

1.  **Backup do PostgreSQL (P0 - Crítico):** Configurar um backup diário, automatizado e testar o procedimento de restauro uma vez. Esta é a nossa rede de segurança. Sem isto, qualquer outra ação é irrelevante.
2.  **Migração de Secrets (P0 - Crítico):** Auditar e migrar 100% dos segredos (`DATABASE_URL`, `JWT_SECRET`, chaves de API Inter/ClickSign) para o Azure Key Vault. Remover todos os segredos hardcoded e de variáveis de ambiente do Replit.
3.  **Health Checks + Error Tracking (P1 - Alto):** Implementar um endpoint `/health` não autenticado e integrar o Sentry para captura de erros não tratados. Isto dá-nos a visibilidade mínima para parar de voar às cegas.

**[RESPOSTAS]**
1.  **Código - 5% Faltantes:** Os maiores *pain points* são: **(1)** a ausência de um portal administrativo para gestão de `produtos` e `tabelas_comerciais` (atualmente requer manipulação direta do banco), **(2)** a falta de um fluxo de renegociação de dívidas para propostas `INADIMPLENTE`, e **(3)** a ausência de um dashboard de métricas de negócio para a diretoria.
2.  **Database - Migração Zero-Downtime:** A estratégia correta é usar **`drizzle-kit generate`** para criar migrações SQL versionadas, que testamos em staging e aplicamos em produção. Para zero-downtime, teremos de usar o padrão **Expand/Contract** (adicionar novas colunas, migrar dados de forma assíncrona, e só depois remover as antigas). Atualmente, temos poucos dados de produção (~100-200 propostas), o que nos permite uma pequena janela de manutenção para a migração inicial para a Azure.
3.  **Testing - Foco Inicial:** O nosso foco deve ser **Testes de Integração**. Eles fornecem o maior valor agora, validando os fluxos críticos da API (criação de proposta, cálculo de TAC, transições de status) e a sua interação com o banco de dados. Os testes unitários para os *services* (`TacCalculationService`, `preApprovalService`) são a segunda prioridade.
4.  **Performance - Bottlenecks:** Além do PDF síncrono, o maior gargalo é a **query de listagem de propostas (`GET /api/propostas`)**. Ela tem múltiplos `joins` e filtros complexos que, combinados com as nossas políticas de RLS, não escalam. Faltam índices nas colunas `status` e `cliente_cpf` da tabela `propostas`.
5.  **Deployment - Cutover:** Temos um número baixo de usuários ativos simultâneos (<10). Uma **janela de manutenção noturna (ex: Sábado, 22:00 - 02:00)** é perfeitamente viável para a migração inicial da base de dados e o cutover da aplicação para a Azure.

**[DECISÕES]**
* **Cloud Provider:** **[X] Azure**. Está alinhado com a documentação do projeto e é uma escolha sólida para compliance financeiro.
* **Orchestration:** **[ ] Kubernetes [ ] ECS [X] Azure Container Apps**. A melhor escolha para nós. É baseado em Kubernetes, o que nos dá um caminho de evolução, mas com uma abstração muito mais simples que o AKS completo, ideal para a nossa fase atual.
* **Database:** **[X] Managed RDS (Azure Database for PostgreSQL)**. A autogestão é um risco desnecessário. A opção gerida é a única viável.
* **Monitoring:** **[X] DataDog**. É mais caro, mas a sua implementação "out-of-the-box" é a mais rápida. Precisamos de visibilidade *agora*. Podemos reavaliar os custos em 6 meses, mas neste momento, a velocidade de implementação é o fator decisivo.

**[COMPROMETIMENTO]**
Nas próximas 48 horas, eu comprometo-me a entregar:
1.  **Script de backup do PostgreSQL** configurado e com um procedimento de restauro documentado.
2.  **Azure Key Vault** configurado, com todos os segredos da aplicação migrados e o código-fonte refatorado para consumir os segredos a partir do Vault.
3.  **Endpoint `/health`** implementado e um projeto Sentry criado e integrado na aplicação para captura de erros.

**[BLOQUEIOS]**
O meu único bloqueio é de acesso. Para cumprir o meu compromisso de 48h, preciso **imediatamente** de:
1.  Acesso de "Colaborador" à subscrição do Azure.
2.  Permissões para criar um Resource Group, um Key Vault, e uma conta de Storage para os backups.

**[ROADMAP]**
Concordo 100% com o seu roadmap da Fase 0. É a sequência tática correta e ataca os riscos na ordem de prioridade certa.

---

Estou pronto para executar. Assim que os acessos forem concedidos, inicio a operação de mitigação de riscos.
**GEM 02 - Dev Specialist**