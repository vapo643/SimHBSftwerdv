### Pacote de Ativação de Missão (PAM) V1.0 (Teste de Integração da API de Busca por CPF)

* **Sumário da Missão (O Quê):** Criar uma suíte de testes de integração para o endpoint de busca de cliente por CPF (`GET /api/clientes/cpf/:cpf`).
* **Intenção Estratégica (O Porquê):** Garantir a robustez e a correção da nova funcionalidade de busca por CPF, criando uma rede de segurança automatizada que valide o seu comportamento em cenários de sucesso (cliente encontrado) e de falha (cliente não encontrado), prevenindo regressões futuras.
* **Histórico Relevante (Consulta Obrigatória):** O endpoint foi implementado na missão anterior. A infraestrutura de testes de integração (`db-helpers`, `vitest`, `supertest`) está funcional e deve ser reutilizada.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de Quality Assurance. O Agente irá escrever um novo arquivo de teste que simula chamadas de API reais ao nosso backend e valida as respostas contra o estado esperado.

---

**IMPLEMENTAR:**
Teste de Integração para a API de Busca por CPF

**CURRENT STATE:**
O endpoint `GET /api/clientes/cpf/:cpf` foi implementado, mas não possui cobertura de testes automatizados, representando um risco de regressão.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo de teste, `tests/integration/cliente.test.ts`, é criado.
2.  A suíte de testes utiliza `vitest` e `supertest`.
3.  O hook `beforeEach` utiliza os helpers `cleanTestDatabase` e `setupTestEnvironment` para criar um ambiente de teste limpo, incluindo a criação de uma proposta de teste com um CPF conhecido.
4.  **Cenário de Sucesso:** Um teste é criado (`it(...)`) que faz uma chamada para `GET /api/clientes/cpf/:cpf` com o CPF da proposta de teste. As asserções (`expect`) devem verificar se:
    * O status da resposta é `200 OK`.
    * O corpo da resposta (`response.body`) contém os dados corretos do cliente (ex: `expect(response.body.clienteCpf).toBe(testCpf)`).
5.  **Cenário de Falha:** Um teste é criado que faz uma chamada para `GET /api/clientes/cpf/:cpf` com um CPF que **não existe** (ex: "00000000000"). A asserção deve verificar se o status da resposta é `404 Not Found`.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Reutilize a Infraestrutura de Teste:** O teste DEVE usar os helpers `cleanTestDatabase` e `setupTestEnvironment` de `tests/lib/db-helper.ts`.
2.  **Ferramentas:** O teste deve ser escrito usando `vitest` e a biblioteca `supertest` para fazer as chamadas HTTP à API.
3.  **Validação Completa:** Ambos os cenários (sucesso e falha) devem ser implementados e validados.
4.  **Execução:** A prova final de sucesso é a execução bem-sucedida da nova suíte de testes (`npx vitest run tests/integration/cliente.test.ts`).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o `setupTestEnvironment` cria todos os dados necessários para que a busca por CPF seja bem-sucedida."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela passagem de 100% dos novos testes.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (criação do novo arquivo de teste).
2.  Garantir importações e tipos corretos para os helpers de teste e `supertest`.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a nova suíte de testes e garantir que todos passem).
7.  **Documentar Decisões Técnicas**.