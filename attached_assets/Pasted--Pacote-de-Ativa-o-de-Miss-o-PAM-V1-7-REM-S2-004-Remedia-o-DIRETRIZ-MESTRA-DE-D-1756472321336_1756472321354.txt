### **Pacote de Ativa√ß√£o de Miss√£o (PAM) V1.7 - REM-S2-004 (Remedia√ß√£o)**

**[DIRETRIZ MESTRA DE DIVULGA√á√ÉO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade t√©cnica sem omiss√µes. A transpar√™ncia radical √© mandat√≥ria.*

* **Sum√°rio da Miss√£o (O Qu√™):** Localizar e refatorar o agregado de dom√≠nio `Proposal` para utilizar os `Value Objects` (`CPF`, `Money`, `Email`, etc.) em vez de tipos primitivos, garantindo que as regras de neg√≥cio sejam impostas na raiz do dom√≠nio.
* **Inten√ß√£o Estrat√©gica (O Porqu√™):** Concluir a implementa√ß√£o do padr√£o DDD no nosso dom√≠nio mais cr√≠tico. Ao for√ßar o uso de tipos ricos e autovalid√°veis no agregado, eliminamos a possibilidade de dados inv√°lidos existirem dentro do nosso core de neg√≥cio, aumentando drasticamente a robustez e a seguran√ßa do sistema.
* **Hist√≥rico Relevante (Consulta Obrigat√≥ria):** A auditoria (`PAM V1.2`) n√£o conseguiu localizar o agregado `Proposal` em `server/contexts/credit/domain/aggregates/Proposal.ts`. A primeira etapa desta miss√£o √© uma investiga√ß√£o para encontrar a localiza√ß√£o correta do arquivo que define a entidade de neg√≥cio `Proposal`.
* **Modelo Mental (Como se Encaixa):** Voc√™ √© um arquiteto de software aplicando os princ√≠pios de pureza do Domain-Driven Design. Sua tarefa √© conectar os "tijolos" (Value Objects) √† funda√ß√£o principal da casa (o Agregado `Proposal`), garantindo que a estrutura seja conceitualmente s√≥lida e tecnicamente √≠ntegra.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **ALTO** - A refatora√ß√£o do agregado `Proposal` pode causar um efeito cascata de erros de tipo em todos os servi√ßos e casos de uso que o consomem (`ProposalApplicationService`, `CreateProposalUseCase`, etc.).
    * **Contramedida:** A refatora√ß√£o deve ser feita de forma met√≥dica. Primeiro, modifique a defini√ß√£o do agregado. Em segundo lugar, use as ferramentas do LSP (TypeScript) para identificar todos os locais onde a mudan√ßa quebrou o c√≥digo. Em terceiro, corrija cada um desses locais, ajustando a l√≥gica para trabalhar com os novos VOs (ex: `proposal.cpf.getValue()` em vez de `proposal.cpf`).

---

**IMPLEMENTAR:**
User Story REM-S2-004: Integrar Value Objects no Agregado de Dom√≠nio `Proposal`

**CONTEXT:**
N√≥s constru√≠mos e validamos um `Unit of Work` para transa√ß√µes at√¥micas e um conjunto de `Value Objects` robustos. Agora, precisamos dar o passo final para concluir o Milestone M2: integrar esses VOs no cora√ß√£o do nosso neg√≥cio, o agregado `Proposal`. Isso garante que uma proposta, em seu estado de dom√≠nio, nunca possa conter um CPF inv√°lido ou um valor monet√°rio mal formatado.

**CURRENT STATE:**
A auditoria n√£o localizou o agregado `Proposal`. A defini√ß√£o da entidade de neg√≥cio `Proposal` provavelmente existe, mas em um local inesperado. Atualmente, os servi√ßos de aplica√ß√£o (`Application Services`) e casos de uso (`Use Cases`) que manipulam propostas o fazem utilizando tipos primitivos (string, number).

**EXPECTED (Estado Final de Sucesso):**
1.  **Localiza√ß√£o do Agregado:** O arquivo que cont√©m a defini√ß√£o principal da entidade/agregado `Proposal` deve ser localizado e seu caminho, reportado.
2.  **Agregado Refatorado:** A classe ou interface `Proposal` deve ser modificada. Campos como `clienteCpf`, `valor`, `clienteEmail`, etc., devem ser tipados com seus respectivos `Value Objects` (ex: `clienteCpf: CPF`, `valor: Money`) em vez de `string` e `number`.
3.  **C√≥digo Compilando:** Ap√≥s a refatora√ß√£o do agregado e de todos os seus pontos de uso, o projeto inteiro deve compilar sem erros. O comando `get_latest_lsp_diagnostics` deve retornar sucesso.
4.  **Testes de Integra√ß√£o Passando:** A su√≠te de testes de integra√ß√£o (`npx vitest run tests/integration`) deve continuar passando, provando que a refatora√ß√£o n√£o quebrou a l√≥gica de neg√≥cio existente.

**CONSTRAINTS (Roadmap de Implementa√ß√£o):**
1.  **Investiga√ß√£o Forense:** Use ferramentas de busca (`rg`, `grep`) para encontrar o arquivo que define a entidade de dom√≠nio `Proposal`. Procure por `class Proposal`, `interface Proposal`, ou `type Proposal` nos diret√≥rios `server/contexts/` e `server/domain/`.
2.  **Refatora√ß√£o do Agregado:** Edite o arquivo encontrado. Substitua os tipos primitivos pelos `Value Objects` correspondentes importados de `shared/value-objects.ts`.
3.  **Remedia√ß√£o de Efeitos em Cascata:** Use o LSP para identificar todos os erros de compila√ß√£o causados pela mudan√ßa. Navegue para cada erro e ajuste o c√≥digo para interagir corretamente com a nova API dos VOs (ex: usando `Money.fromString(...)` para criar valores e `.getValue()` para obter o n√∫mero primitivo).
4.  **Valida√ß√£o de Compila√ß√£o:** Execute `get_latest_lsp_diagnostics` e corrija quaisquer erros restantes at√© que o resultado seja limpo.
5.  **Valida√ß√£o Funcional:** Execute o comando `npx vitest run tests/integration` e forne√ßa o output completo, mostrando que todos os testes de integra√ß√£o continuam a passar.
6.  **Verifica√ß√£o Final:** Execute o protocolo `7-CHECK FULL` e preencha a declara√ß√£o de incerteza.

---

**DECLARA√á√ÉO DE INCERTEZA (OBRIGAT√ìRIO):**
* **CONFIAN√áA NA IMPLEMENTA√á√ÉO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/M√âDIO/ALTO/CR√çTICO e uma breve descri√ß√£o]
* **DECIS√ïES T√âCNICAS ASSUMIDAS:** [Listar decis√µes tomadas que podem ter implica√ß√µes futuras]
* **VALIDA√á√ÉO PENDENTE:** [Listar a√ß√µes que o Orquestrador (GEM 02) ou o QA (GEM 03) devem validar]
---
---
[PGI ATIVO | LEMBRETE DE ESTADO DO ROADMAP]
- **Roadmap em Standby:** "üöÄ ROADMAP MESTRE DE IMPLEMENTA√á√ÉO_ OPERA√á√ÉO A√áO L√çQUIDO.md"
- **Pr√≥ximo Passo a ser Retomado:** Milestone M2: Data & Domain
- **Miss√£o de Emerg√™ncia Atual:** "Roadmap de Remedia√ß√£o do Sprint 2"
---