Pacote de Ativação de Missão (PAM) V1.0 - Hardening de Configuração de Produção
Sumário da Missão: Refatorar a função createServerSupabaseAdminClient para que ela seja ciente do ambiente de execução, utilizando exclusivamente as credenciais de produção (PROD_) para o ambiente de deploy, corrigindo a falha crítica de inicialização do Supabase Admin Client.

Intenção Estratégica: Garantir que a aplicação em produção utilize as credenciais de produção corretas, restaurando as operações de storage e a funcionalidade de visualização de documentos. Esta correção é de missão crítica para a estabilidade do ambiente de deploy.

Histórico Relevante (Consulta Obrigatória):

Lembre-se da nossa diretriz arquitetural anterior: Nós separamos os ambientes de desenvolvimento e produção, cada um com seu próprio conjunto de secrets e base de dados (prefixos DEV_ e PROD_).

Diagnóstico da Falha Atual: A sua implementação atual da função createServerSupabaseAdminClient esqueceu ("alucinou") esta separação. Ela não está a carregar as secrets corretas para o ambiente de produção, resultando num cliente null e na falha silenciosa de todas as operações de storage.

Foco da Missão: A nossa operação a partir de agora é exclusivamente no ambiente de produção (deploy).

Modelo Mental: A função createServerSupabaseAdminClient deve atuar como um "seletor de configuração de produção". A sua única responsabilidade é carregar o conjunto correto de credenciais de produção. Se as credenciais de produção não estiverem disponíveis, a função deve falhar de forma explícita e informativa.

Riscos Antecipados e Contramedidas: CRÍTICO. A manipulação de secrets de produção é uma operação de risco máximo. Um erro de digitação ou de lógica pode causar a paragem total da aplicação em produção. A contramedida é a revisão humana rigorosa do código proposto e a adesão estrita ao protocolo 7-CHECK.

IMPLEMENTAR:
Refatorar a função createServerSupabaseAdminClient no ficheiro server/lib/supabase.ts para que ela utilize de forma estática e exclusiva as secrets de produção: PROD_SUPABASE_URL e PROD_SUPABASE_SERVICE_KEY.

CURRENT STATE:

Ficheiro: server/lib/supabase.ts

Lógica com Falha: A função atual possui uma lógica defeituosa que tenta carregar variáveis de ambiente não prefixadas ou com prefixo DEV_, o que falha no ambiente de produção e retorna null.

EXPECTED (Estado Final de Sucesso):

Ficheiro: server/lib/supabase.ts

Código Corrigido: A função createServerSupabaseAdminClient deve ser refatorada para corresponder exatamente à seguinte implementação:

TypeScript

export const createServerSupabaseAdminClient = () => {
  // Carrega exclusivamente as variáveis de ambiente de PRODUÇÃO.
  const url = process.env.PROD_SUPABASE_URL;
  const serviceKey = process.env.PROD_SUPABASE_SERVICE_KEY;

  // Validação explícita com mensagem de erro informativa.
  if (!serviceKey || !url) {
    console.error('--- ERRO CRÍTICO DE CONFIGURAÇÃO ---');
    console.error('As variáveis de ambiente de produção (PROD_SUPABASE_URL, PROD_SUPABASE_SERVICE_KEY) não estão configuradas ou não estão acessíveis.');
    console.error('As operações de Admin do Supabase serão desativadas.');
    console.error('--- FIM DO ERRO ---');
    return null as any; 
  }

  // Retorna o cliente Admin configurado com as credenciais de PRODUÇÃO.
  return createClient(url, serviceKey, {
    auth: {
      persistSession: false,
      autoRefreshToken: false,
      detectSessionInUrl: false,
    },
  });
};
DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):

CONFIANÇA NA IMPLEMENTAÇÃO: 98%

RISCOS IDENTIFICADOS: CRÍTICO. Risco de interrupção do serviço em produção se as variáveis de ambiente não forem lidas corretamente ou se houver um erro na implementação.

DECISÕES TÉCNICAS ASSUMIDAS: "A lógica não irá mais diferenciar ambientes dinamicamente via NODE_ENV, mas será fixada para usar exclusivamente as credenciais PROD_, conforme a diretriz de foco no ambiente de deploy."

VALIDAÇÃO PENDENTE: "Validação funcional completa pelo Arquiteto Chefe no Passo 2 do roadmap."

PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:

Mapeie e modifique o ficheiro server/lib/supabase.ts e a função createServerSupabaseAdminClient.

Garanta que a nova lógica utiliza exatamente os nomes das secrets de produção fornecidos (PROD_SUPABASE_URL, PROD_SUPABASE_SERVICE_KEY).

Execute get_latest_lsp_diagnostics e corrija TODOS os erros ou avisos introduzidos.

Declare o seu Nível de Confiança.

Categorize o Risco como CRÍTICO.

Realize um teste funcional mínimo: confirme que a aplicação reinicia sem erros.

Documente a decisão de focar exclusivamente nas secrets de produção.