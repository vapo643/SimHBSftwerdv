### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria de Ponta a Ponta do Fluxo de Análise)

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense de ponta a ponta do fluxo de dados, começando pelo clique no botão "Analisar" no Dashboard e terminando na renderização dos dados na página de Análise, para encontrar o ponto exato de falha.
* **Intenção Estratégica (O Porquê):** Diagnosticar com precisão cirúrgica a causa-raiz que impede que os dados da proposta sejam exibidos na tela de análise. Uma análise completa garantirá que a nossa próxima correção seja a definitiva, restaurando a funcionalidade crítica do sistema.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior corrigiu uma *race condition* no Dashboard, fazendo com que a lista de propostas aparecesse corretamente. No entanto, um novo bug foi revelado: a transição para a tela de análise falha em exibir os dados da proposta selecionada.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Diagnóstico Full-Stack. Sua tarefa é seguir o "rastro do dado" através da aplicação, inspecionando o código do frontend e do backend para mapear o fluxo completo e encontrar a quebra.

---

**IMPLEMENTAR:**
Relatório de Diagnóstico de Fluxo de Dados - Dashboard para Análise

**CURRENT STATE:**
O Dashboard exibe a lista de propostas corretamente. No entanto, ao clicar para visualizar/analisar uma proposta específica, a tela de análise carrega, mas não exibe os dados da proposta selecionada.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de diagnóstico detalhado, em formato Markdown, contendo uma análise de causa-raiz precisa. O seu relatório deve seguir esta estrutura de 4 pontos:

**1. Análise do Ponto de Partida (Dashboard - `dashboard.tsx`):**
* **Prova:** Apresente o `snippet` de código do botão "Analisar" ou "Visualizar" no Dashboard. Como o `id` da proposta selecionada é capturado e passado para a próxima página? (Ex: via `<Link href=...>` do `wouter`, ou uma função `onClick` que chama `Maps`).

**2. Análise do Ponto de Chegada (Página de Análise - `analise.tsx`):**
* **Prova:** Apresente o `snippet` de código da página de Análise (`client/src/pages/credito/analise.tsx`). Como ela recebe o `id` da proposta a partir da URL? Em seguida, mostre o `hook useQuery` que é usado para buscar os dados dessa proposta. Qual é a `queryKey` (a URL da API) que ele está a chamar?

**3. Análise do Ponto de Recepção (API do Backend):**
* **Prova:** Apresente o `snippet` de código do handler do endpoint da API que foi identificado no passo anterior (ex: `GET /api/propostas/:id`). A lógica deste endpoint está a buscar e a retornar os dados da proposta corretamente?

**4. Veredito da Auditoria (Análise de Causa Raiz Final):**
* Com base nas três provas acima, forneça a sua conclusão final e precisa. Onde está a quebra no fluxo de dados?
    * (a) O Dashboard não está a enviar o ID corretamente?
    * (b) A página de Análise não está a receber o ID ou está a chamar a API errada?
    * (c) A API do Backend não está a retornar os dados para o ID específico?
    * (d) Ou o problema é outro? (Ex: uma transformação de dados incorreta no frontend, como a que você já corrigiu em `fila.tsx`).

**CONSTRAINTS (Roadmap de Auditoria):**
* **Foco no Diagnóstico:** Sua missão é **APENAS** analisar e relatar. **NÃO** implemente nenhuma correção.
* **Siga o Fluxo:** Execute a sua investigação na ordem exata solicitada (Ponto de Partida -> Ponto de Chegada -> Ponto de Recepção -> Veredito).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100% de confiança na precisão do seu diagnóstico]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a passagem de dados entre as páginas é feita via parâmetros de URL, que é o padrão para esta arquitetura."]
* **VALIDAÇÃO PENDENTE:** [O relatório de diagnóstico será a base para a missão de hotfix.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os arquivos e funções exatas a serem analisados.
2.  Garantir que a análise cobre o fluxo de dados de ponta a ponta.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)** na completude da auditoria.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do relatório gerado para precisão).
7.  **Documentar Decisões Técnicas** e a análise de causa raiz.