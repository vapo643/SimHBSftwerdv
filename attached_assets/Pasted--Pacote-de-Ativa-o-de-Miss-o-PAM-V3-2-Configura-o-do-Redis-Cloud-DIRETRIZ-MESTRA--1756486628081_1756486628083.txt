### **Pacote de Ativação de Missão (PAM) V3.2 - Configuração do Redis Cloud**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

---
### **MISSÃO 2: Configuração do Redis Cloud (Filas e Cache)**

* **Sumário da Missão (O Quê):** Configurar o sistema para se conectar à instância de produção do Redis Cloud, garantindo a operacionalidade das filas (BullMQ) e do serviço de cache.
* **Intenção Estratégica (O Porquê):** Mover nosso sistema de processamento assíncrono e caching de um ambiente local (inadequado para escala) para uma infraestrutura de nuvem gerenciada, garantindo alta disponibilidade, performance e resiliência para as operações em segundo plano.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **MÉDIO** - Erros de conexão com o Redis Cloud (firewall, credenciais inválidas) podem paralisar todo o processamento de tarefas em fila.
    * **Contramedida:** A implementação deve incluir um "health check" que verifica a conexão com o Redis na inicialização do servidor e reporta falhas imediatamente.

**IMPLEMENTAR:**
User Story INFRA-002: Configurar Conexão com Redis Cloud de Produção

**CONTEXT:**
Atualmente, o sistema está configurado para usar uma instância local do Redis via Docker, o que é ideal para desenvolvimento, mas inaceitável para produção. Precisamos reconfigurar a aplicação para usar a string de conexão da nossa instância provisionada no Redis Cloud, que é mais robusta e escalável.

**CURRENT STATE:**
O arquivo `docker-compose.yml` define um serviço Redis local. O código de conexão em `server/lib/queues.ts` e `server/services/cacheService.ts` provavelmente aponta para o endereço local (`redis://redis:6379`) como fallback. A variável de ambiente `REDIS_URL` pode estar usando um valor de desenvolvimento.

**EXPECTED (Estado Final de Sucesso):**
1.  A variável de ambiente `REDIS_URL` deve ser atualizada com a string de conexão do Redis Cloud de produção. (Nota para o Agente: Você solicitará ao Executor Humano que forneça este valor).
2.  O código de inicialização do BullMQ e do cliente de cache deve usar exclusivamente a variável `REDIS_URL`.
3.  Um "health check" deve ser adicionado para verificar o status da conexão com o Redis na inicialização do servidor, logando uma mensagem de sucesso ou falha crítica.
4.  A conexão com o Redis Cloud deve ser validada funcionalmente.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Solicitar Credencial:** Peça ao Executor Humano (Arquiteto Chefe) para fornecer a `REDIS_URL` de produção e para adicioná-la como um "secret" no Replit.
2.  **Analisar Código de Conexão:** Audite os arquivos `server/lib/queues.ts` e `server/services/cacheService.ts`. Confirme que a conexão com o Redis é instanciada utilizando a variável de ambiente `process.env.REDIS_URL`.
3.  **Implementar Health Check:** Na inicialização do servidor (em `server/index.ts` ou `server/app.ts`), adicione uma função `async` que crie um cliente Redis, tente executar um comando `PING`, e logue o resultado.
    * **Sucesso:** `console.log('✅ Conexão com Redis Cloud estabelecida com sucesso.');`
    * **Falha:** `console.error('❌ FALHA CRÍTICA: Não foi possível conectar ao Redis Cloud. Verifique a REDIS_URL.'); process.exit(1);` (A falha na conexão com o Redis deve impedir o servidor de iniciar).
4.  **Validar Conexão:** Execute a aplicação. O log do health check deve indicar sucesso.
5.  **Validar Funcionalidade:** Instrua o Executor Humano a realizar uma ação que enfileira um job (ex: criar uma proposta). Peça a ele para confirmar que o job apareceu na fila do BullMQ no dashboard apropriado (se houver um) ou que não houve erros de conexão nos logs.

---

**Executor Humano:** Entregue este PAM ao Agente para iniciar a configuração do Redis Cloud.