### **Pacote de Ativação de Missão (PAM) V1.0 - REMEDIAÇÃO DE POLÍTICA DE SEGURANÇA (RLS UPDATE)**

* **Sumário da Missão:** Auditar e corrigir a política de Row Level Security (RLS) na tabela `propostas` para permitir que usuários autorizados (como `ATENDENTE` ou `ANALISTA`) possam executar operações de `UPDATE` nas propostas que lhes pertencem ou que estão sob a sua jurisdição.

* **Intenção Estratégica:** Garantir que o fluxo de negócio de atualização de propostas seja funcional, ao mesmo tempo que se mantém uma postura de segurança rigorosa, prevenindo que um usuário possa modificar dados de outra loja ou instituição.

* **Contexto Técnico:** A correção anterior do erro `500` expôs uma política de RLS que está a bloquear a operação de `UPDATE` na tabela `propostas`. Precisamos de criar ou modificar a política de `UPDATE` para permitir a operação sob as condições corretas, provavelmente verificando o `user_id` do criador da proposta ou a `loja_id` associada.

---

**IMPLEMENTAR:**
Correção da Política RLS de Atualização na Tabela `propostas`

**CURRENT STATE:**
Uma política de RLS para a operação `UPDATE` na tabela `propostas` está a bloquear pedidos legítimos de modificação, resultando num erro de permissão a nível da base de dados.

**EXPECTED (Estado Final de Sucesso):**
1.  A política de RLS para `UPDATE` na tabela `propostas` é modificada ou criada.
2.  A nova política deve permitir que uma operação de `UPDATE` prossiga se o `auth.uid()` do usuário que faz a requisição for igual ao `user_id` da proposta, **OU** se a `loja_id` da proposta pertencer à mesma `instituicao_id` do usuário.
3.  Como resultado, a chamada de API `PUT /api/propostas/:id` deve ser concluída com sucesso (`HTTP 200 OK`) e as alterações devem ser persistidas no banco de dados.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Auditoria de Políticas Atuais:** Primeiro, execute a seguinte query SQL no Supabase para listar todas as políticas existentes na tabela `propostas` e apresente o resultado:
    ```sql
    SELECT * FROM pg_policies WHERE tablename = 'propostas';
    ```

2.  **Implementação da Política RLS Corrigida:** Com base na auditoria, forneça o seguinte script SQL para ser executado no SQL Editor do Supabase. Este script cria uma política de `UPDATE` permissiva mas segura:
    ```sql
    -- Remove qualquer política de UPDATE antiga para evitar conflitos
    DROP POLICY IF EXISTS "Usuários podem atualizar suas próprias propostas ou as da sua loja" ON public.propostas;

    -- Cria a nova política de UPDATE correta
    CREATE POLICY "Usuários podem atualizar suas próprias propostas ou as da sua loja"
    ON public.propostas
    FOR UPDATE
    TO authenticated
    USING (
      -- A condição USING verifica se o usuário tem permissão para a linha
      (SELECT auth.uid()) = user_id OR
      loja_id IN (SELECT id FROM lojas WHERE instituicao_id = (SELECT (auth.jwt() ->> 'user_metadata')::jsonb ->> 'instituicao_id')::uuid)
    )
    WITH CHECK (
      -- A condição WITH CHECK garante que a linha modificada ainda satisfaça a condição
      (SELECT auth.uid()) = user_id OR
      loja_id IN (SELECT id FROM lojas WHERE instituicao_id = (SELECT (auth.jwt() ->> 'user_metadata')::jsonb ->> 'instituicao_id')::uuid)
    );
    ```
3.  **Validação Final:** Após aplicar a política, execute um teste de validação para confirmar que o `PUT /api/propostas/:id` agora funciona sem erros de permissão.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS:** **BAIXO** - O principal risco é um erro de sintaxe na implementação da política SQL. A lógica da política é robusta, mas a sua implementação deve ser precisa.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que o JWT do usuário contém a `claim` `user_metadata.instituicao_id` e que a relação entre `propostas`, `lojas`, e `instituicoes` está corretamente modelada.
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deve realizar testes de validação com diferentes `roles` (`ATENDENTE`, `GERENTE`) para confirmar que um usuário pode editar as propostas da sua loja, mas é corretamente bloqueado ao tentar editar propostas de outras lojas.