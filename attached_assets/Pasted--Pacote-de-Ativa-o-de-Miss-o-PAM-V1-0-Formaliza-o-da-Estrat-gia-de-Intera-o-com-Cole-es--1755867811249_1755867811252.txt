### Pacote de Ativação de Missão (PAM) V1.0 (Formalização da Estratégia de Interação com Coleções)

* **Sumário da Missão (O Quê):** Gerar um Architecture Decision Record (ADR) que defina a nossa estratégia e os padrões mandatórios para a interação com coleções de dados em todas as APIs do sistema Simpix, com base nos "Subtópicos Obrigatórios" do Ponto 37 da nossa Doutrina Arquitetural.
* **Intenção Estratégica (O Porquê):** Criar uma "fonte da verdade" única e padronizada para a paginação, filtragem e ordenação. O objetivo é garantir que todas as nossas APIs de listagem sejam consistentes, performáticas e seguras contra ataques de negação de serviço (DoS), estabelecendo um contrato claro para todos os clientes da API.
* **Histórico Relevante (Consulta Obrigatória):** A auditoria de conformidade identificou a ausência de um padrão para interação com coleções como uma lacuna de prioridade P0 (Crítica).
* **Modelo Mental (Como se Encaixa):** Aja como um Arquiteto de API a desenhar o guia de estilo (`style guide`) para todos os endpoints que retornam listas de recursos. O foco é em design, consistência e segurança.

---

**IMPLEMENTAR:**
ADR: Estratégia de Interação com Coleções de API

**CURRENT STATE:**
As APIs que retornam listas de dados (ex: `GET /api/propostas`) não seguem um padrão consistente para paginação, filtragem ou ordenação, resultando em implementações ad-hoc e potenciais riscos de performance.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/07-decisions/adr-003-api-collection-interaction-strategy.md`, é criado. O arquivo deve conter um ADR completo, incluindo as seguintes seções:

1.  **Decisão:** Uma declaração clara da decisão, por exemplo: "Adotaremos a paginação baseada em cursor (*Cursor-based Pagination*) como o padrão para todas as novas APIs de coleção, com limites de tamanho de página obrigatórios."
2.  **Justificativa:** A justificação para a escolha (ex: performance superior em grandes conjuntos de dados, prevenção de problemas de `OFFSET`, consistência do dataset).
3.  **Estratégia de Paginação Padrão:** A especificação técnica detalhada de como a paginação baseada em cursor será implementada (ex: uso de parâmetros de query `limit` e `after_cursor`).
4.  **Sintaxe Padrão para Filtragem e Ordenação:** A definição da sintaxe que será usada nos parâmetros de query para filtrar e ordenar os resultados.
5.  **Limites de Tamanho de Página (Obrigatórios):** A definição de limites de tamanho de página padrão e máximo (ex: `default: 25`, `max: 100`) para proteger o sistema contra abuso e garantir uma performance previsível.
6.  **Estrutura do Payload de Resposta:** A definição de um envelope de resposta padrão para coleções paginadas (ex: `{ "data": [...], "page_info": { "has_next_page": true, "end_cursor": "..." } }`).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a paginação baseada em cursor, embora mais complexa de implementar, é a escolha estratégica correta para a nossa necessidade de escalar."]
* **VALIDAÇÃO PENDENTE:** [O ADR gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que todas as seções obrigatórias do ADR são criadas.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.