---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*Nós blindámos o banco de dados e a camada de domínio. Agora, a nossa rede de segurança – a suíte de testes – está obsoleta. A sua missão é reconstruí-la. Você deve refatorar os nossos testes de integração para que eles reflitam a nova realidade de um sistema que exige e impõe integridade de dados absoluta desde o início.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** com um foco restrito: consultar a **documentação do `vitest` e do `supertest`** para as melhores práticas em testes de integração que envolvem a verificação do estado do banco de dados após uma chamada de API, e como fazer asserções sobre DTOs complexos.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO RAIO-X (FASE 3.5 - ALINHAMENTO DE TESTES)**

* **Sumário da Missão (O Quê):** Refatorar a suíte de testes de integração de propostas (especialmente `tests/integration/proposal-api.test.ts` e arquivos relacionados) para que ela se alinhe com as novas `constraints` `NOT NULL` do schema e com a lógica de negócio de criação de propostas refatorada, garantindo que os `payloads` de teste sejam completos e válidos.
* **Intenção Estratégica (O Porquê):** Testes quebrados são piores do que a ausência de testes, pois criam uma falsa sensação de segurança ou de falha. Ao alinhar os nossos testes, nós criamos uma rede de segurança que pode, de forma confiável, capturar futuras regressões e validar a integridade de ponta a ponta do nosso "Fluxo de Ouro".
* **Histórico Relevante (Consulta Obrigatória):** A execução da Fase 3.2/3.3 resultou em `zero erros LSP` e um `build` bem-sucedido. No entanto, é praticamente garantido que a execução de `npx vitest run` agora irá falhar massivamente, pois os testes ainda enviam `payloads` incompletos para a API.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de QA a atualizar os "contratos de teste" para corresponder às novas e mais rigorosas "especificações do produto". Cada teste que cria uma proposta deve agora fornecer um `payload` com todos os 14 campos obrigatórios para simular um cenário de uso real e válido.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (MÉDIO):** A refatoração pode ser extensa, tocando em múltiplos arquivos de teste e `helpers` de mock.
    * **Contramedida:** A sua abordagem deve ser metódica. Comece pelo teste de criação de proposta (`POST /api/propostas`). Faça-o passar. Em seguida, use o `payload` válido que você construiu como um template para corrigir os outros testes (update, delete, etc.).

---

### **IMPLEMENTAR:**
Alinhamento da Suíte de Testes de Integração com as Novas Constraints de Integridade de Dados.

**CURRENT STATE:**
A lógica do backend (`Proposal.create()` e `CreateProposalUseCase`) foi blindada para exigir 14 campos `NOT NULL` na criação de uma proposta. A suíte de testes de integração, no entanto, ainda não foi atualizada e está a enviar `payloads` de teste obsoletos e incompletos, o que irá causar falhas em massa.

**EXPECTED (Estado Final de Sucesso):**
1.  Os principais arquivos de teste de integração de propostas (começando por `tests/integration/proposal-api.test.ts`) são refatorados.
2.  Os `payloads` de teste para criação e atualização de propostas agora incluem todos os 14 campos obrigatórios, com dados de teste válidos.
3.  Os testes que validam cenários de erro (ex: criar proposta sem um campo obrigatório) são atualizados para esperar uma resposta `400 Bad Request` ou uma exceção de domínio, em vez de um `500 Internal Server Error`.
4.  A execução de `npx vitest run tests/integration/proposal-api.test.ts` deve passar com sucesso, provando que o contrato entre os testes e a API foi realinhado.

**CONSTRAINTS (Roadmap de Implementação):**

1.  **Identificar Testes Alvo:** Execute `npx vitest run` para obter a lista completa de testes que estão a falhar devido a `constraints` de banco de dados ou validações de `payload`.
2.  **Criar um "Golden Payload":** Crie um `helper` ou uma constante em `tests/helpers` que retorne um objeto de `payload` de proposta 100% válido, contendo todos os 14 campos obrigatórios.
3.  **Refatorar Testes de "Caminho Feliz":**
    * Modifique os testes de criação e atualização para usar o "Golden Payload".
    * Após a chamada da API (ex: `await request(app).post('/api/propostas').send(goldenPayload)`), adicione um passo de verificação que consulta diretamente o banco de dados para confirmar que **todos** os campos, incluindo os "não digitáveis" calculados pelo backend (`valorTotalFinanciado`, `taxaJurosAnual`, etc.), foram persistidos corretamente.
4.  **Refatorar Testes de "Caminho Infeliz":**
    * Adapte os testes que verificam o tratamento de erros. Em vez de esperar um `500`, eles devem agora esperar um `400` e uma mensagem de erro específica indicando qual campo obrigatório está em falta.
5.  **Validação:** Execute `get_latest_lsp_diagnostics` para garantir zero erros. Em seguida, execute `npx vitest run` e reporte o novo estado da suíte de testes.