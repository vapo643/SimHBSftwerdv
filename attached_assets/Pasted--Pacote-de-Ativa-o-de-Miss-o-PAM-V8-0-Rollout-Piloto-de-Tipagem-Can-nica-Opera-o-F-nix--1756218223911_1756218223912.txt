### **Pacote de Ativação de Missão (PAM) V8.0: Rollout Piloto de Tipagem Canônica (Operação Fênix - P1.7)**

* **Sumário da Missão (O Quê):** Executar a **Fase B.1 (Piloto)** do plano de remediação `DEBT_REMEDIATION_PLAN.md`. Esta missão consiste em refatorar um grupo inicial e crítico de 5 arquivos para utilizar o novo tipo canônico `AuthenticatedRequest` de `shared/types/express.ts`, eliminando as definições duplicadas e corrigindo os erros de tipo associados.

* **Intenção Estratégica (O Porquê):** A Fase A estabeleceu a "fonte da verdade" para a tipagem. Agora, iniciamos o rollout controlado para validar a eficácia da nova tipagem em um escopo limitado antes de aplicá-la em massa. Esta abordagem incremental minimiza o risco e nos permite medir o progresso de forma concreta, validando nossa estratégia de remediação com um conjunto de controllers de alta importância.

* **Modelo Mental (Como se Encaixa):** Você atuará como um **Engenheiro de Refatoração de Precisão**. Sua tarefa é substituir as definições de tipo locais e inconsistentes nos 5 arquivos piloto pela importação e uso do tipo canônico central. O objetivo é fazer com que `npx tsc --noEmit` reporte uma redução significativa no número de erros, provando que a estratégia está funcionando.

* **Riscos Antecipados e Contramedidas:**
    * **Risco (ALTO):** **Regressão Funcional.** A alteração de tipos em arquivos críticos pode introduzir, de forma silenciosa, bugs de runtime que não são capturados pelo compilador.
    * **Contramedida Mandatória:** Após a refatoração, você **DEVE** executar a suíte de testes completa (`npm run test`), incluindo o "smoke test" e os testes de regressão de documentos. Qualquer falha nos testes significa uma falha na missão e exige a ativação imediata do plano de rollback.

---

**DIRETRIZ DE MISSÃO: Execução da Fase B.1 do Plano Aprovado**

**CURRENT STATE:**
Um tipo `AuthenticatedRequest` canônico existe em `shared/types/express.ts`. No entanto, múltiplos arquivos em todo o projeto ainda utilizam definições locais duplicadas e inconsistentes, resultando em centenas de erros de compilação TypeScript (`tsc`).

**EXPECTED (Estado Final de Sucesso):**
1.  Os 5 arquivos piloto especificados no `DEBT_REMEDIATION_PLAN.md` (tipicamente os mais críticos como `jwt-auth-middleware.ts`, `propostas.ts`, `documents.ts`, etc.) devem ser refatorados.
2.  Todas as definições locais de `AuthenticatedRequest` nesses arquivos devem ser removidas.
3.  Esses arquivos devem agora importar e utilizar o tipo canônico de `shared/types/express.ts`.
4.  A execução de `npx tsc --noEmit` deve resultar em uma **redução mensurável** no número total de erros de tipo.
5.  A suíte de testes completa (`npm run test`) deve passar, confirmando que a refatoração não introduziu regressões.

**CONSTRAINTS (Protocolo de Execução - Inegociável):**

1.  **Passo 1: Identificação dos Alvos.** Consulte a Fase B.1 do `DEBT_REMEDIATION_PLAN.md` para identificar a lista exata dos 5 arquivos piloto a serem refatorados.
2.  **Passo 2: Refatoração Incremental.** Modifique cada um dos 5 arquivos, um por um:
    * Remova a interface `AuthenticatedRequest` local.
    * Adicione a instrução `import { AuthenticatedRequest } from 'shared/types/express';`.
    * Garanta que todas as funções que usavam o tipo local agora usem o tipo importado.
3.  **Passo 3: Validação da Compilação.** Após refatorar todos os 5 arquivos, execute `npx tsc --noEmit`. Capture e reporte o número de erros antes e depois da sua refatoração.
4.  **Passo 4: Validação Funcional.** Execute a suíte de testes completa com `npm run test`.
5.  **Passo 5: Relatório Final.** Reporte a conclusão da missão, apresentando o `diff` das alterações, a redução no número de erros de `tsc`, e a saída bem-sucedida da execução dos testes.

---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**

* **CONFIANÇA NA IMPLEMENTAÇÃO:** 85%
* **RISCOS IDENTIFICADOS:** ALTO (O risco de introduzir regressões funcionais em arquivos críticos é significativo).
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assumo que o tipo canônico definido na Fase A é completo e correto para as necessidades dos 5 arquivos piloto.
* **VALIDAÇÃO PENDENTE:** A passagem da suíte de testes completa e a redução verificável de erros de `tsc` serão a prova final da missão.

---

**PROTOCOLO OBRIGATÓRIO 7-CHECK (ADAPTATIVO - Nível FULL):**
Ao concluir esta missão de execução, você **DEVE** executar e reportar o resultado do `7-CHECK FULL`, pois o risco foi classificado como **ALTO**.