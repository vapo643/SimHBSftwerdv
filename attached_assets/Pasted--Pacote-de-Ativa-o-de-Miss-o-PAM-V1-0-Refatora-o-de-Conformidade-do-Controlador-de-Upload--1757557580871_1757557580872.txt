### Pacote de Ativação de Missão (PAM) V1.0 - Refatoração de Conformidade do Controlador de Upload

* **Sumário da Missão:** Refatorar o controlador `uploadPropostaDocument` no ficheiro `server/routes/documents.ts` para que ele utilize o `documentsService` (instância de `DocumentsService`), eliminando a sua dependência do `genericService` obsoleto.

* **Intenção Estratégica:** Unificar a arquitetura do módulo de documentos, garantindo que todas as operações (`get` e `upload`) passem pela mesma camada de serviço correta. Isto elimina a dívida técnica, melhora a manutenibilidade e reduz o risco de futuras falhas por desalinhamento arquitetural.

* **Histórico Relevante (Consulta Obrigatória):** A nossa última missão de correção revelou que a função `getPropostaDocuments` foi refatorada para usar o `documentsService` correto, mas a função `uploadPropostaDocument` permaneceu a utilizar um `genericService` legado, criando uma arquitetura híbrida e inconsistente.

---

**IMPLEMENTAR:**
"Religar" o controlador `uploadPropostaDocument` para que ele chame o método `uploadDocument` do `documentsService`.

**CURRENT STATE:**
* **Ficheiro:** `server/routes/documents.ts`
* **Lógica com Falha (Inconsistente):**
    ```typescript
    // Importação do serviço genérico obsoleto
    import { documentService } from '../services/genericService';
    
    // ...

    export const uploadPropostaDocument = async (req: AuthenticatedRequest, res: Response) => {
      // ...
      // Chamada incorreta ao serviço genérico
      const result = await documentService.executeOperation('upload_proposta_document', {
        propostaId: parseInt(propostaId),
        file: req.file,
        ...req.body,
      });
      // ...
    };
    ```

**EXPECTED (Estado Final de Sucesso):**
* **Ficheiro:** `server/routes/documents.ts`
* **Código Corrigido:** O ficheiro deve ser refatorado para que a função `uploadPropostaDocument` utilize o `documentsService`, alinhando-se com a função `getPropostaDocuments`.
    ```typescript
    import { Request, Response } from 'express';
    // 1. IMPORTAÇÃO UNIFICADA: Apontar apenas para a instância correta do DocumentsService
    import { documentsService } from '../services/documentsService';
    import { AuthenticatedRequest } from '../../shared/types/express';

    // ... (função getPropostaDocuments permanece inalterada) ...

    /**
     * POST /api/propostas/:id/documents
     * Upload a document for a proposal
     */
    export const uploadPropostaDocument = async (req: AuthenticatedRequest, res: Response) => {
      try {
        const { id: propostaId } = req.params;

        if (!propostaId) {
          return res.status(400).json({
            success: false,
            message: 'ID da proposta é obrigatório',
          });
        }

        if (!req.file) {
          return res.status(400).json({
            success: false,
            message: 'Arquivo é obrigatório',
          });
        }

        // 2. CHAMADA CORRIGIDA: Invocar o método uploadDocument do serviço correto
        const result = await documentsService.uploadDocument(propostaId, req.file);

        if (result.success) {
          res.json(result);
        } else {
          res.status(500).json(result);
        }
      } catch (error: any) {
        console.error('[DOCUMENTS_CONTROLLER] Error uploading document:', error);
        res.status(500).json({
          success: false,
          message: error.message || 'Erro interno do servidor ao fazer upload do documento',
        });
      }
    };
    ```

---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
Execute a refatoração e realize o protocolo 7-CHECK completo, garantindo **ZERO** novos diagnósticos de LSP e a estabilidade da aplicação após a mudança. A importação do `genericService` deve ser completamente removida deste ficheiro.