### **Pacote de Ativação de Missão (PAM) V6.0 - UX-007 (Contador de Resultados Dinâmico)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Implementar um componente de contador de resultados na página do Dashboard (`dashboard.tsx`) que exiba o número de itens atualmente visíveis versus o número total de itens, e que se atualize dinamicamente quando os filtros são aplicados.
* **Intenção Estratégica (O Porquê):** Melhorar a "Visibilidade do estado do sistema", uma heurística de usabilidade fundamental. Fornecer um feedback claro sobre o resultado das ações de filtragem dá ao usuário confiança e contexto sobre os dados que ele está visualizando, melhorando a clareza e a eficiência da interface.
* **Histórico Relevante (Consulta Obrigatória):** A análise heurística (`GL-002`) identificou a ausência de um feedback sobre a contagem de resultados como um ponto de atrito de severidade **ALTA** para usuários que gerenciam grandes volumes de propostas.

---

**IMPLEMENTAR:**
User Story UX-007: Adicionar Contador de Resultados Dinâmico à Listagem de Propostas

**CONTEXT:**
Nossa auditoria de UX destacou que, ao usar os filtros no dashboard, o usuário não tem uma indicação clara de quantos resultados correspondem à sua busca. Isso pode ser desorientador, especialmente em listas longas. Precisamos adicionar um contador simples, mas eficaz, que forneça este feedback essencial.

**CURRENT STATE:**
O componente `client/src/pages/dashboard.tsx` contém a lógica de filtragem, mas não renderiza nenhum elemento de UI que exiba a contagem de propostas filtradas versus o total.

**EXPECTED (Estado Final de Sucesso):**
1.  **Contador Visível:** Um texto informativo (ex: "Exibindo 25 de 150 propostas") deve ser exibido de forma proeminente na área de listagem do dashboard.
2.  **Atualização Dinâmica:** Os números no contador devem ser atualizados em tempo real sempre que o usuário aplicar, modificar ou limpar os filtros de busca.
3.  **Lógica Robusta:** O contador deve refletir corretamente os dados paginados, se a paginação estiver em uso (ex: "Exibindo 1-10 de 87 propostas"). A lógica deve obter o número de resultados filtrados e o número total de resultados.
4.  **Prova de Sucesso:** Você deve fornecer um screenshot do dashboard com o novo contador visível, mostrando um estado filtrado (ex: "Exibindo 5 de 87 propostas").

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localizar Componente Alvo:** O foco principal da implementação será no arquivo `client/src/pages/dashboard.tsx`.
2.  **Analisar Lógica de Dados:** Investigue como os dados das propostas (tanto a lista completa quanto a lista filtrada) são gerenciados no estado do componente. O `useMemo` usado para `filteredProposals` é o ponto de partida provável.
3.  **Implementar Lógica do Contador:**
    * Obtenha o tamanho da lista de propostas filtradas (ex: `filteredProposals.length`).
    * Obtenha o tamanho da lista original, não filtrada (ex: `data.proposals.length`).
    * Armazene esses valores de forma que possam ser usados na renderização.
4.  **Refatorar JSX:** Adicione um novo elemento de texto (`<p>` ou `<span>`) em um local apropriado (ex: acima da lista de propostas ou perto dos controles de filtro) para exibir a contagem.
5.  **Validar e Apresentar Evidência:** Teste a funcionalidade aplicando diferentes filtros e verificando se o contador se atualiza corretamente. Capture e apresente o screenshot do resultado final.
6.  **Verificação Final:** Execute o protocolo `7-CHECK FULL`.