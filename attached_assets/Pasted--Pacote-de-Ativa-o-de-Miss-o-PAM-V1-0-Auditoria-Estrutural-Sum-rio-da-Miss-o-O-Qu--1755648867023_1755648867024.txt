### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria Estrutural)

* **Sumário da Missão (O Quê):** Realizar uma auditoria estrutural completa do projeto Simpix, comparando a organização de pastas com o padrão canônico de mercado para aplicações Remix/Vite e identificando arquivos de teste obsoletos ou de diagnóstico.
* **Intenção Estratégica (O Porquê):** Obter um mapa preciso do estado atual da organização do código para planejar uma refatoração que melhore a manutenibilidade, a clareza e a conformidade com as melhores práticas da indústria, garantindo um ambiente de desenvolvimento mais limpo e eficiente.
* **Histórico Relevante (Consulta Obrigatória):** As missões anteriores focaram na lógica interna e na modularização das rotas. Esta missão foca na organização física dos arquivos e na eliminação de código não utilizado. A auditoria anterior identificou um grande número de arquivos de teste com nomes sugestivos de scripts de diagnóstico.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de reconhecimento e análise comparativa. O Agente deve agir como um auditor de qualidade, listando a estrutura atual, comparando-a com um benchmark fornecido e sinalizando desvios e arquivos suspeitos.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A análise de obsolescência pode ser imprecisa e marcar um arquivo útil como obsoleto.
    * **Contramedida:** O prompt exige que a análise se baseie em evidências (ex: arquivo não incluído na configuração do executor de testes), e o resultado será um relatório para revisão humana, não uma ação de deleção.

---

**IMPLEMENTAR:**
Relatório de Auditoria Estrutural e de Arquivos Obsoletos

**CURRENT STATE:**
A estrutura de pastas do projeto evoluiu organicamente e pode não seguir um padrão de mercado claro, dificultando a distinção entre as camadas de `frontend`, `backend` e `database`. Além disso, múltiplos arquivos de teste criados durante as fases de desenvolvimento e diagnóstico podem não estar mais em uso.

**EXPECTED (Estado Final de Sucesso):**
Um relatório detalhado em formato Markdown, dividido em duas seções claras:

**Seção 1: Análise da Estrutura de Pastas**
1.  **Estrutura Atual:** Liste a árvore de diretórios principal do projeto (profundidade máxima de 2 níveis).
2.  **Padrão de Mercado (Benchmark):** Apresente a seguinte estrutura canônica para aplicações Remix/Vite como referência:
    ```
    /
    ├── app/
    │   ├── components/
    │   ├── routes/
    │   ├── services/
    │   └── utils/
    ├── drizzle/ (ou /db)
    ├── public/
    ├── scripts/
    └── tests/
    ```
3.  **Relatório de Desvios (Gap Analysis):** Analise e descreva as principais diferenças entre a estrutura atual do Simpix e o padrão de mercado. Aponte especificamente a ausência de uma separação clara entre código de `client` (frontend), `server` (backend) e `database` (drizzle/scripts).

**Seção 2: Análise de Arquivos Obsoletos (Foco em Testes)**
1.  **Listagem Completa:** Liste **todos** os arquivos de teste (`*.test.ts`, `*.spec.ts`) encontrados no projeto.
2.  **Análise da Configuração de Testes:** Analise o arquivo `vitest.config.ts` e o `package.json` para identificar quais diretórios e padrões de arquivo estão incluídos na execução de testes padrão (`npm run test`).
3.  **Relatório de Arquivos Suspeitos:** Com base na análise anterior, identifique e liste os arquivos de teste que são fortes candidatos a serem obsoletos, usando os seguintes critérios:
    * Arquivos que **não correspondem** ao padrão de inclusão do `vitest`.
    * Arquivos com nomes que sugerem um uso único ou de diagnóstico (ex: `test-vulnerability.ts`, `ccb-calibration.ts`).
    * Arquivos de teste que não importam nenhum módulo do código-fonte da aplicação principal (`/server`, `/client`, `/shared`).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100% de confiança na COMPLETUDE da auditoria]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO. Risco de classificar incorretamente um arquivo como obsoleto.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a ausência de importações de código-fonte é um forte indicador de que um teste é obsoleto ou um script de diagnóstico."]
* **VALIDAÇÃO PENDENTE:** [A lista de arquivos obsoletos deve ser revisada e aprovada pelo Arquiteto Chefe antes de qualquer ação de deleção.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (apenas leitura).
2.  Garantir que a análise comparativa e a listagem de arquivos estão completas.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)** na completude da auditoria.
5.  **Categorizar Riscos Descobertos**.
6.  Realizar um teste funcional (revisão do relatório gerado para precisão e lógica).
7.  **Documentar Decisões Técnicas** e os critérios usados para identificar arquivos suspeitos.