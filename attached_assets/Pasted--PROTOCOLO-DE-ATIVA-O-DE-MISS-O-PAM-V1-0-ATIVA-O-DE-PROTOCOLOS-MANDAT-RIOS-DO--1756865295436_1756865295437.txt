---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**[ATIVAÇÃO DE PROTOCOLOS MANDATÓRIOS DO `replit.md`]**
*Sua execução será governada pelos seguintes protocolos:*
*- **CRITICAL WORKFLOW:** `get_latest_lsp_diagnostics` antes da conclusão.*
*- **MANDATORY BUG DOCUMENTATION POLICY:** Documente quaisquer bugs resolvidos.*
*- **PACN V1.0 ENFORCEMENT:** A sua validação final deve seguir cenários de comportamento.*
*- **DECD V1.0 - DESATIVADA:** A pesquisa na web está **proibida**. O blueprint é a sua única fonte da verdade.*

**1. Princípio Mestre: Transferência de Consciência**
*O seu modo operacional muda de "Arquiteto" para "Executor de Elite". O plano de batalha está definido. A sua missão é executar o blueprint `BLUEPRINT_MOTOR_CALCULO_TAC.md` com precisão cirúrgica, transformando a arquitetura do `Strategy Pattern` em código funcional e robusto.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - DESATIVADA**
*A pesquisa está **proibida**. Toda a informação e diretrizes necessárias estão contidas no blueprint. O seu foco é na execução precisa.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO ACELERAÇÃO DE ORIGINAÇÃO (TRACK 2, FASE 3 - EXECUÇÃO)**

* **Sumário da Missão (O Quê):** Executar o plano de implementação detalhado em `docs/missions/BLUEPRINT_MOTOR_CALCULO_TAC.md` para refatorar o `TacCalculationService` e o `CreateProposalUseCase`, implementando a nova regra de negócio da TAC.
* **Intenção Estratégica (O Porquê):** Esta implementação visa alinhar o comportamento do sistema com os requisitos de negócio, eliminando dívida técnica (lógica "hardcoded") e construindo um motor de cálculo de taxas flexível que suportará futuras evoluções.
* **Histórico Relevante (Consulta Obrigatória):** A sua **única fonte da verdade** para esta missão é o documento `docs/missions/BLUEPRINT_MOTOR_CALCULO_TAC.md`. Execute as missões P0 e P1 na ordem exata especificada.
* **Modelo Mental (Como se Encaixa):** Você é o engenheiro a montar o novo motor. Primeiro, construa as peças do motor (Missão P0: `TacCalculationService` com as suas `Strategies`). Em seguida, instale o motor no chassi do carro (Missão P1: `CreateProposalUseCase`) e conecte todos os cabos (Injeção de Dependência).
* **Riscos Antecipados e Contramedidas:**
    * **Risco (MÉDIO):** A injeção de dependência do serviço no `Use Case` pode ser complexa se a instanciação não for gerida corretamente.
    * **Contramedida:** O blueprint já prevê o uso de um `factory method` para facilitar a injeção, mitigando este risco. A execução de testes de unidade após a Missão P0 e testes de integração após a Missão P1 validará cada passo de forma isolada.

---

### **IMPLEMENTAR:**
Refatoração do Motor de Cálculo da TAC Conforme Blueprint.

**CURRENT STATE:**
A lógica de cálculo da TAC está "hardcoded" no `CreateProposalUseCase` com uma taxa incorreta de 2%, ignorando um `TacCalculationService` existente que, por sua vez, possui uma lógica de negócio invertida.

**EXPECTED (Estado Final de Sucesso):**
1.  As missões P0 e P1 do `BLUEPRINT_MOTOR_CALCULO_TAC.md` são implementadas com sucesso.
2.  O `TacCalculationService` é refatorado para usar o `Strategy Pattern` com as estratégias `NewClientTacStrategy` (10%) e `ExistingClientTacStrategy`.
3.  O `CreateProposalUseCase` é refatorado para usar `Dependency Injection` e chamar o `TacCalculationService`, eliminando a lógica "hardcoded".
4.  Os testes de unidade e integração definidos como "Prova de Sucesso" no blueprint são implementados e passam, provando que a nova lógica funciona como esperado para ambos os cenários (cliente novo e existente).

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Leia o Blueprint:** Inicie lendo o documento `docs/missions/BLUEPRINT_MOTOR_CALCULO_TAC.md` na sua totalidade.
2.  **Execute a Missão P0 (Recalibração do `TacCalculationService`):**
    * Implemente o "Plano de Ação Técnico" da **Missão P0**.
    * Crie e execute os testes de unidade definidos na "Prova de Sucesso" da **Missão P0** para validar o serviço de forma isolada. Reporte o output.
3.  **Execute a Missão P1 (Integração do Serviço no `CreateProposalUseCase`):**
    * Implemente o "Plano de Ação Técnico" da **Missão P1**.
    * Crie e execute os testes de integração definidos na "Prova de Sucesso" da **Missão P1** para validar o fluxo de ponta a ponta. Reporte o output.
4.  **Validação Final:**
    * Execute `get_latest_lsp_diagnostics` para garantir zero erros.
    * Execute a suíte de testes completa (`npx vitest run`) para garantir que não houve regressões.