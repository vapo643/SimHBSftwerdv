### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Criar uma suíte de testes unitários completa para o serviço `TacCalculationService`, validando a sua lógica de negócio de forma isolada.
* **Intenção Estratégica (O Porquê):** Garantir a correção e a robustez da lógica de cálculo e isenção de TAC. Testes unitários nos permitem validar cada cenário de negócio (cliente novo, cliente cadastrado, TAC fixa, TAC percentual) de forma rápida e precisa, criando uma rede de segurança contra futuras regressões.
* **Histórico Relevante (Consulta Obrigatória):** A FASE 1 implementou o `TacCalculationService`. O roadmap de planejamento que você mesmo arquitetou especificou os cenários exatos que precisam ser testados.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de Quality Assurance focada em testes de "caixa-branca". O Agente irá interagir diretamente com a classe `TacCalculationService`, "mockando" as suas dependências (como as chamadas ao banco de dados) para testar a sua lógica pura em isolamento.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** Os mocks do banco de dados podem não refletir com precisão o comportamento real.
    * **Contramedida:** O prompt exige a criação de mocks simples e determinísticos, focados em testar a lógica do serviço, não as complexidades do banco de dados.

---

**IMPLEMENTAR:**
Suíte de Testes Unitários para o `TacCalculationService`

**CURRENT STATE:**
O serviço `TacCalculationService` contém a lógica de negócio crítica, mas não possui cobertura de testes automatizados, representando um risco de regressão.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo de teste, `tests/services/tacCalculationService.test.ts`, é criado.
2.  A suíte de testes utiliza `vitest` e a sua funcionalidade de `mocking` (`vi.spyOn` ou `vi.mock`).
3.  São criados testes para cobrir, no mínimo, os seguintes 4 cenários definidos no nosso plano:
    * **Cenário 1 (TAC para Cliente Novo):** Um teste que simula um cliente **não cadastrado** e valida que o serviço calcula a TAC corretamente com base na configuração do produto (testar tanto o tipo "fixo" quanto o "percentual").
    * **Cenário 2 (Isenção para Cliente Cadastrado):** Um teste que simula um cliente **cadastrado** (mockando a função `isClienteCadastrado` para retornar `true`) e valida que o método `calculateTac` retorna `0`.
    * **Cenário 3 (Lógica `isClienteCadastrado`):** Testes específicos para o método `isClienteCadastrado`, mockando a resposta do banco de dados para validar que ele retorna `true` quando encontra propostas com os status corretos e `false` quando não encontra.
    * **Cenário 4 (Tratamento de Erro):** Um teste que valida o comportamento de fallback do serviço quando o produto não é encontrado no banco de dados (o resultado esperado é uma TAC de `0`).

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Arquivo de Teste:** Crie o novo arquivo em `tests/services/tacCalculationService.test.ts`.
2.  **Use `vitest` e `mocking`:** Utilize `describe`, `it`, `expect` e `vi.spyOn` ou `vi.mock` para isolar o `TacCalculationService` das suas dependências de banco de dados.
3.  **Mock das Dependências:** Antes de cada teste, você deve "mockar" as chamadas ao `db.select().from(...)` para que elas retornem dados de teste controlados e previsíveis, em vez de depender de um banco de dados real.
4.  **Validação Final Mandatória:** A prova de sucesso é a execução bem-sucedida da nova suíte de testes (`npx vitest run tests/services/tacCalculationService.test.ts`).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o `mocking` das chamadas de banco de dados com `vitest` é a melhor estratégia para testes unitários deste serviço."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela passagem de 100% dos novos testes unitários.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (criação do novo arquivo de teste).
2.  Garantir que os mocks estão corretamente configurados e que as asserções validam todos os cenários.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a nova suíte de testes e garantir que todos passem).
7.  **Documentar Decisões Técnicas**.