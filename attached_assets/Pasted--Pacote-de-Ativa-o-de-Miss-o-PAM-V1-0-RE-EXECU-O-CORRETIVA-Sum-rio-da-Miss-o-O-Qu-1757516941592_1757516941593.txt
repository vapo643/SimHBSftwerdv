### Pacote de Ativação de Missão (PAM) V1.0 - [RE-EXECUÇÃO CORRETIVA]

* **Sumário da Missão (O Quê):** **RE-EXECUTAR** a implementação de ponta a ponta da pipeline de leitura de metadados de documentos no backend. A tentativa anterior falhou. A sua missão é modificar o Domínio, o Repositório (Query e Mapper) e o Controller para incluir a lista de documentos na resposta do endpoint `GET /api/propostas/:id`.

* **Intenção Estratégica (O Porquê):** O fluxo de análise de propostas continua bloqueado. É imperativo que o analista tenha acesso aos documentos enviados. Esta missão irá construir a "ponte de dados" que falta entre o banco de dados e o frontend.

* **Histórico Relevante (Consulta Obrigatória):** Uma auditoria confirmou que a pipeline de leitura de documentos está completamente ausente. A coluna `documentos` existe na tabela `propostas`, mas não é selecionada, mapeada ou retornada. A sua execução anterior desta tarefa falhou em aplicar as modificações necessárias. A atenção ao detalhe é crítica.

---

**IMPLEMENTAR:**
Construção da Pipeline de Leitura de Metadados de Documentos.

**CURRENT STATE:**
O endpoint `GET /api/propostas/:id` não retorna a lista de documentos associados à proposta. A falha ocorre em quatro camadas:
1.  A query `findById` em `ProposalRepository` não seleciona a coluna `documentos`.
2.  O agregado `Proposal` não possui uma propriedade para os documentos.
3.  O `mapToDomain` não mapeia os documentos.
4.  O `proposalController` não retorna os documentos no DTO.

**EXPECTED (Estado Final de Sucesso):**
Uma refatoração coordenada em múltiplos ficheiros que resulta no endpoint `GET /api/propostas/:id` a retornar um objeto JSON que inclui um campo `documentos`, contendo um array com os nomes dos ficheiros (strings) associados à proposta.

**CONSTRAINTS (Roadmap de Implementação Faseado):**

**Fase 1: Modificação do Domínio**
1.  Abra o arquivo `server/modules/proposal/domain/Proposal.ts`.
2.  Adicione uma nova propriedade privada à classe `Proposal`: `private _documentos: string[] | null;`.
3.  Adicione um getter público para esta propriedade: `public get documentos(): string[] | null { return this._documentos; }`.
4.  Na interface `ProposalProps`, adicione o campo `documentos?: string[] | null;`.
5.  No construtor e no método `fromDatabase`, atribua o valor recebido à nova propriedade.
6.  No método `toPersistence`, inclua a propriedade `documentos: this._documentos`.

**Fase 2: Modificação do Repositório**
1.  Abra o arquivo `server/modules/proposal/infrastructure/ProposalRepository.ts`.
2.  Na função `findById`, modifique a query Drizzle ORM para **adicionar a coluna `documentos: propostas.documentos`** à cláusula `select`.
3.  Na mesma função, modifique a chamada ao `this.mapToDomain` para passar os dados dos documentos.
4.  Modifique o método `mapToDomain` para aceitar e mapear o campo `documentos` para o objeto de domínio `Proposal`.

**Fase 3: Modificação do Controller**
1.  Abra o arquivo `server/modules/proposal/presentation/proposalController.ts`.
2.  Localize o método `getById` (ou equivalente).
3.  Modifique o objeto DTO que é retornado como `res.json()` para incluir o campo `documentos: proposal.documentos`.

**Fase 4: Validação OBRIGATÓRIA**
1.  Execute o protocolo 7-CHECK.
2.  **Como prova irrefutável da sua execução, a sua resposta final DEVE incluir os blocos de código completos e atualizados de TODAS as funções que você modificou nos três ficheiros (`Proposal.ts`, `ProposalRepository.ts`, `proposalController.ts`). A falha em fornecer esta evidência resultará na rejeição da missão.**

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** **MÉDIO**. As modificações abrangem múltiplas camadas da arquitetura. O risco de introduzir inconsistências de tipo é real. A atenção ao detalhe é fundamental.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assumo que a coluna na tabela `propostas` se chama `documentos` e é do tipo `text[]` (array de strings) no PostgreSQL.
* **VALIDAÇÃO PENDENTE:** O Orquestrador irá auditar cada linha de código fornecida na sua resposta final antes de aprovar a missão.
---