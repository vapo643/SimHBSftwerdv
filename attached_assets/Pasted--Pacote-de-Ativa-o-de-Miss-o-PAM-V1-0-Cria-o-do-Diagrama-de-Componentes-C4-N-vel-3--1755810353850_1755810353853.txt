### Pacote de Ativação de Missão (PAM) V1.0 (Criação do Diagrama de Componentes C4 - Nível 3)

* **Sumário da Missão (O Quê):** Gerar o Diagrama de Componentes (C4 Modelo - Nível 3) para o *Bounded Context* de "Credit Proposal" que acabamos de refatorar, utilizando a sintaxe Mermaid ou PlantUML.
* **Intenção Estratégica (O Porquê):** Criar uma "documentação viva" e de baixo nível da nossa nova arquitetura de domínio. Este diagrama irá tornar a estrutura interna do nosso *bounded context* explícita, facilitando o *onboarding* de novos desenvolvedores, a manutenção futura e as discussões de arquitetura.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior implementou com sucesso a nova arquitetura para o contexto de Propostas, dividindo-a nas camadas de `Presentation`, `Application`, `Domain` e `Infrastructure`. Esta missão irá visualizar essa estrutura.
* **Modelo Mental (Como se Encaixa):** Aja como um Arquiteto de Software a documentar o seu próprio design. Sua tarefa é traduzir a estrutura de código que você acabou de criar numa representação visual clara e padronizada.

---

**IMPLEMENTAR:**
Diagrama de Componentes C4 Nível 3 para o Bounded Context "Credit Proposal"

**CURRENT STATE:**
A nova arquitetura DDD para o contexto de Propostas foi implementada, mas não está visualmente documentada, o que aumenta a carga cognitiva para quem precisa de interagir com ela.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo Markdown, `architecture/08-diagrams/c4-level3-proposal-context.md`, é criado.
2.  O arquivo contém um diagrama gerado com Mermaid ou PlantUML que visualiza os componentes principais do *bounded context* "Credit Proposal".
3.  O diagrama deve mostrar claramente os seguintes componentes e as suas interações:
    * O **`ProposalController`** (na camada de `Presentation`).
    * Os **Casos de Uso** (ex: `CreateProposalUseCase`, na camada de `Application`).
    * O **Agregado `Proposal`** (na camada de `Domain`).
    * A **Interface `IProposalRepository`** (na camada de `Domain`).
    * A **Implementação `ProposalRepository`** (na camada de `Infrastructure`).
4.  As setas de interação devem seguir as regras da nossa arquitetura: `Presentation` -> `Application` -> `Domain` (Interface do Repositório) -> `Infrastructure` (Implementação do Repositório).

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Arquivo de Diagrama:** Crie o novo arquivo em `architecture/08-diagrams/c4-level3-proposal-context.md`.
2.  **Use "Diagrams as Code":** Utilize a sintaxe Mermaid ou PlantUML para criar o diagrama.
3.  **Represente a Arquitetura Real:** O diagrama deve ser um reflexo fiel da estrutura de código que foi implementada na missão anterior, mostrando as quatro camadas e como elas se comunicam.
4.  **Validação:** A validação final será uma revisão do diagrama gerado para garantir que ele representa corretamente a nossa nova arquitetura.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a sintaxe Mermaid é suficiente para representar a complexidade deste diagrama."]
* **VALIDAÇÃO PENDENTE:** [O diagrama gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado e os componentes a serem representados.
2.  Garantir que as interações e dependências no diagrama seguem as regras da nossa arquitetura DDD.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do diagrama Markdown gerado).
7.  **Documentar Decisões Técnicas**.