### Pacote de Ativação de Missão (PAM) V1.0 - Auditoria Consolidada - Fase 1: Conformidade Arquitetural

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense para verificar a consistência e a correta aplicação dos padrões arquiteturais chave (DDD, Repository, UoW, Modularidade) através dos Sprints 0, 1 e 2.
* **Intenção Estratégica (O Porquê):** Prevenir a "erosão arquitetural", garantindo que as fundações de design estabelecidas nos sprints iniciais não foram contornadas ou implementadas incorretamente nas fases subsequentes. A conformidade arquitetural é a espinha dorsal da manutenibilidade e escalabilidade do sistema.
* **Modelo Mental (Como se Encaixa):** Você é um arquiteto de software a realizar uma revisão de código aprofundada. Seu foco é validar a aderência aos padrões definidos, procurando por desvios, "vazamentos" de lógica e acoplamentos indevidos.

---

**IMPLEMENTAR (Plano de Auditoria):**
Execute a seguinte sequência de verificações e reporte suas descobertas com evidências de código.

**CURRENT STATE:**
A base de código contém as implementações dos Sprints 0, 1 e 2, incluindo a estrutura de módulos, a camada de persistência (Repositories, UoW) e o modelo de domínio (Agregado Proposal).

**EXPECTED (Estado Final de Sucesso da Auditoria):**
Um relatório detalhado que responde a cada verificação abaixo com "CONFORME" e o snippet de código como prova, ou "DESVIO IDENTIFICADO" com a evidência da não conformidade.

**CONSTRAINTS (Roadmap de Auditoria - Fase 1):**

**1. Validação do Domínio (DDD Purity Check):**
* **Verificação 1.1:** Inspecione a classe do Agregado `Proposal` em `server/modules/proposal/domain/Proposal.ts`. Confirme que toda a lógica de negócio para transição de estados e validação de invariantes (ex: `approve()`, `reject()`, `pend()`) está contida dentro dos métodos desta classe.
* **Verificação 1.2:** Investigue os ficheiros de *services* de aplicação (ex: `server/contexts/proposal/application/ApproveProposalUseCase.ts`). Verifique se a sua responsabilidade se limita a: 1) carregar o agregado do repositório, 2) chamar os métodos de negócio do próprio agregado (ex: `proposal.approve()`), e 3) salvar o agregado de volta no repositório. Reporte qualquer "vazamento" de lógica de negócio (ex: `if (proposal.status === ...)` fora do agregado) nestes ficheiros.

**2. Validação da Camada de Persistência (Repository/UoW Usage Check):**
* **Verificação 2.1:** Faça uma pesquisa global (usando `rg` ou similar) por chamadas diretas ao cliente Drizzle (ex: `db.select()`, `db.insert()`) fora da camada de infraestrutura dos repositórios (ex: fora de `server/modules/*/infrastructure/`). O objetivo é garantir que os serviços de aplicação **NÃO** acedem à base de dados diretamente. Reporte quaisquer ocorrências encontradas.
* **Verificação 2.2:** Localize o `ApproveProposalUseCase.ts` (ou similar) e valide se ele utiliza a abstração do `UnitOfWork` para orquestrar as operações de salvamento, em vez de chamar diretamente `proposalRepository.save()`.

**3. Validação da Modularidade (Boundary Check):**
* **Verificação 3.1:** Analise as declarações de importação (`import ... from ...`) nos ficheiros dentro do módulo `proposal` (`server/modules/proposal/`). Verifique se existem importações diretas de ficheiros de outros módulos de negócio (ex: `../boleto/domain/...`). A comunicação entre módulos deve ocorrer preferencialmente através de eventos de domínio ou serviços de aplicação. Reporte quaisquer acoplamentos diretos que encontrar.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** N/A (Missão de Auditoria)
* **RISCOS IDENTIFICADOS:** N/A (Missão de Auditoria)
* **DECISÕES TÉCNICAS ASSUMIDAS:** N/A (Missão de Auditoria)
* **VALIDAÇÃO PENDENTE:** O resultado completo desta auditoria de conformidade.