### Pacote de Ativação de Missão (PAM) V1.0 (Neutralização de Ameaça Latente)

* **Sumário da Missão (O Quê):** Deletar permanentemente o componente `client/src/components/ui/chart.tsx` e quaisquer referências a ele.
* **Intenção Estratégica (O Porquê):** Eliminar completamente uma vulnerabilidade de segurança de XSS (Cross-Site Scripting) da base de código. Ao remover o componente vulnerável e não utilizado, garantimos que ele não possa ser acidentalmente reintroduzido no futuro, alcançando um estado de segurança intrínseca.
* **Histórico Relevante (Consulta Obrigatória):** A sua auditoria anterior (Passo 2.1) confirmou que o componente `chart.tsx` é vulnerável a XSS via `dangerouslySetInnerHTML` e, crucialmente, que não está a ser utilizado em nenhuma parte da aplicação.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de "excisão cirúrgica". O Agente deve remover um artefato de código morto que representa um risco de segurança. A operação é puramente de deleção e limpeza de referências.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O componente pode ter referências (`import`) em outras partes do código que, se não forem removidas, quebrarão o processo de build.
    * **Contramedida:** O prompt exige uma busca por todas as referências ao arquivo e a sua remoção, seguida de uma verificação de `LSP diagnostics` para garantir a integridade do código.

---

**IMPLEMENTAR:**
Remoção do Componente Vulnerável `chart.tsx`

**CURRENT STATE:**
O arquivo `client/src/components/ui/chart.tsx` existe na base de código, contém uma vulnerabilidade de XSS confirmada e não está a ser utilizado.

**EXPECTED (Estado Final de Sucesso):**
1.  O arquivo `client/src/components/ui/chart.tsx` é permanentemente **deletado**.
2.  Qualquer declaração de `import` que referencie `./ui/chart.tsx` em outros arquivos é localizada e **removida**.
3.  Ao final da missão, a execução de `get_latest_lsp_diagnostics` retorna zero erros, confirmando que a remoção não quebrou nenhuma dependência.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Auditoria de Referências:** Antes de deletar, execute uma busca global em todo o projeto pela string `"./ui/chart.tsx"` para identificar todos os arquivos que o importam.
2.  **Limpeza de Referências:** Abra cada arquivo identificado e remova a linha de `import` correspondente.
3.  **Deleção do Arquivo:** Execute o comando de deleção para remover permanentemente o arquivo: `rm client/src/components/ui/chart.tsx`.
4.  **Validação Final Mandatória:** Como prova de sucesso, execute `get_latest_lsp_diagnostics` para garantir que a base de código permanece estável e sem erros de importação.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria **BAIXO**, pois a auditoria já confirmou que o componente não está em uso funcional.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a deleção do arquivo é a melhor estratégia de remediação para uma vulnerabilidade em código não utilizado."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. A validação é a execução bem-sucedida do `get_latest_lsp_diagnostics`.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os ficheiros a serem modificados/deletados.
2.  Garantir que todas as referências de `import` são removidas.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (verificação de LSP).
7.  **Documentar Decisões Técnicas**.