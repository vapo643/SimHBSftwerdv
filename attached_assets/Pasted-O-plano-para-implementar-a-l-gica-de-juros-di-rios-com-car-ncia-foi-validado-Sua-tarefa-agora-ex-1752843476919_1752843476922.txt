O plano para implementar a lógica de juros diários com carência foi validado.

Sua tarefa agora é executar o seguinte plano de 2 etapas:

**1. Atualize a API de Simulação no Backend:**
Modifique o arquivo de rotas do servidor (provavelmente `/server/routes.ts`). Substitua a rota `GET /api/simulacao` existente pela seguinte versão, que agora inclui a lógica de cálculo de juros diários e a validação de 45 dias:

```typescript
// server/routes.ts

// ... (manter a função calcularParcela existente) ...

app.get('/api/simulacao', (req, res) => {
  const { valor, prazo, produto_id, incluir_tac, dataVencimento } = req.query;

  const valorSolicitado = parseFloat(valor as string);
  const prazoEmMeses = parseInt(prazo as string);
  
  if (isNaN(valorSolicitado) || isNaN(prazoEmMeses) || !produto_id || !dataVencimento) {
    return res.status(400).json({ error: 'Parâmetros inválidos.' });
  }

  // Validação da data do primeiro vencimento
  const dataAtual = new Date();
  const primeiroVencimento = new Date(dataVencimento as string);
  const diasDiferenca = (primeiroVencimento.getTime() - dataAtual.getTime()) / (1000 * 3600 * 24);

  if (diasDiferenca > 45) {
    return res.status(400).json({ error: "A data do primeiro vencimento não pode ser superior a 45 dias." });
  }

  const { taxaDeJurosMensal, valorTac } = buscarTaxas(produto_id as string);
  
  // Cálculo de juros diários sobre a carência
  const taxaJurosDiaria = taxaDeJurosMensal / 30; // Aproximação
  const jurosCarencia = valorSolicitado * (taxaJurosDiaria / 100) * diasDiferenca;

  const iof = calcularIOF(valorSolicitado);
  const tac = incluir_tac === 'true' ? valorTac : 0;
  
  const valorTotalFinanciado = valorSolicitado + iof + tac + jurosCarencia;

  const valorParcela = calcularParcela(valorTotalFinanciado, prazoEmMeses, taxaDeJurosMensal);
  
  const custoTotal = (valorParcela * prazoEmMeses);
  const cetAnual = (((custoTotal / valorSolicitado) - 1) / (prazoEmMeses / 12)) * 100;

  return res.json({ 
      valorParcela: parseFloat(valorParcela.toFixed(2)), 
      taxaJurosMensal, 
      iof: parseFloat(iof.toFixed(2)),
      valorTac: tac,
      cet: parseFloat(cetAnual.toFixed(2)) 
  });
});
2. Atualize a Chamada da API no Frontend:
Modifique o arquivo /client/src/pages/propostas/nova.tsx. Dentro da função handleSimulacao, atualize a chamada fetch para que ela envie o novo campo dataVencimento para a API:

JavaScript

// Dentro do useEffect, na função handleSimulacao
const params = new URLSearchParams({
    valor: String(valorSolicitado),
    prazo: prazo,
    produto_id: produto,
    incluir_tac: String(incluirTac),
    dataVencimento: dataPrimeiroVencimento // Adicionar este novo parâmetro
});
const response = await fetch(`/api/simulacao?${params.toString()}`);
Certifique-se também que a variável dataPrimeiroVencimento esteja sendo "assistida" (watch) pelo react-hook-form e adicionada à lista de dependências do useEffect.

Execute este plano de refatoração.