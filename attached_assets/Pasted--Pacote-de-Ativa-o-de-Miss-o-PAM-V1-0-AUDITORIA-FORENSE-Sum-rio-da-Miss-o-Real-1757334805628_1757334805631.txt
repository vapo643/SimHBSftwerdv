### **Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA FORENSE**

* **Sumário da Missão:** Realizar uma auditoria forense completa no fluxo de "Correção e Reenvio de Proposta Pendente" para identificar a causa raiz da falha de persistência de dados e de transição de estado.

* **Cenário de Negócio (O "Caso de Teste"):** Um usuário `ATENDENTE` abre uma proposta com status `PENDENCIADO`. Ele modifica um campo (ex: `nome` do cliente) e clica no botão "Reenviar para Análise". A regra de negócio dita que a proposta deve ter seus dados atualizados e seu status alterado para `EM_ANALISE`. Atualmente, a ação falha silenciosamente no backend.

* **Vetor de Ataque / Ponto de Falha (Hipóteses):** A falha pode estar em uma ou mais das seguintes camadas:
    1.  **Frontend (`editar.tsx`):** O formulário está a enviar um payload incorreto ou incompleto para a API.
    2.  **API (`routes.ts`):** O endpoint `PUT /api/propostas/:id` não está a processar o request, ou está a chamar um `UseCase` legado/incorreto.
    3.  **Lógica de Aplicação (`Proposal UseCases`):** A lógica para atualizar a entidade `Proposal` e persistir a mudança está com defeito ou não está a ser chamada.
    4.  **Camada de Dados (Drizzle / Supabase):** A query de `UPDATE` está mal formada, ou uma política de RLS está a bloquear a alteração para o usuário `ATENDENTE`.
    5.  **Gerenciamento de Estado (`TanStack Query`):** A query do dashboard não está a ser invalidada após a (falha na) mutação, exibindo dados em cache.

* **Evidência de Conformidade Requerida (A "Prova Irrefutável"):**
    1.  **Análise Frontend:** Localize o ficheiro da página de edição de propostas (provavelmente `client/src/pages/propostas/editar.tsx`). Apresente o código da função `onSubmit` (ou equivalente) que é chamada pelo botão "Reenviar para Análise". Mostre o objeto exato (payload) que é enviado para a API.
    2.  **Análise da API:** Localize o ficheiro de rotas do Express.js (provavelmente `server/routes.ts` ou um derivado). Apresente o código que define o endpoint `PUT /api/propostas/:id`. Identifique qual Controller e qual `UseCase` são acionados por esta rota.
    3.  **Análise do Backend:** Navegue até o `UseCase` identificado no passo anterior. Apresente o código completo deste `UseCase`. Mostre como ele recebe os dados, carrega a entidade `Proposal` do repositório, tenta aplicar as mudanças e, crucialmente, chama o método para salvar (`repository.save(proposal)`).
    4.  **Análise da Persistência:** Navegue até a implementação do `ProposalRepository` (provavelmente em `server/modules/proposal/infrastructure/ProposalRepository.ts`). Apresente o código do método `save` ou `update`. Mostre a query Drizzle ORM que executa a operação de `UPDATE` na tabela `propostas`.
    5.  **Veredito Final:** Com base na análise de ponta-a-ponta, explique exatamente **onde** o fluxo está a ser interrompido e **porquê** as alterações não estão a ser persistidas no banco de dados.