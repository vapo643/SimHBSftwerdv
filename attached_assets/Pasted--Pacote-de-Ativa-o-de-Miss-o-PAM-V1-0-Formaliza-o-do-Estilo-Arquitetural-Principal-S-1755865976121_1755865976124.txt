### Pacote de Ativação de Missão (PAM) V1.0 (Formalização do Estilo Arquitetural Principal)

* **Sumário da Missão (O Quê):** Gerar um Architecture Decision Record (ADR) detalhado que defina formalmente o estilo arquitetural alvo para o sistema Simpix, com base nos "Subtópicos Obrigatórios" do Ponto 12 da nossa Doutrina Arquitetural.
* **Intenção Estratégica (O Porquê):** Criar uma "fonte da verdade" única sobre a nossa arquitetura-alvo. Esta decisão fundamental irá guiar a evolução do sistema, garantir o alinhamento técnico em toda a equipa e fornecer os critérios objetivos para futuras refatorações e a introdução de novas tecnologias.
* **Histórico Relevante (Consulta Obrigatória):** A nossa arquitetura atual é um "Monolito Modular". A modelagem de domínio (Ponto 9) preparou o terreno para uma potencial evolução para microserviços. Esta missão irá analisar os trade-offs e formalizar a decisão.
* **Modelo Mental (Como se Encaixa):** Aja como um Arquiteto de Soluções a realizar uma análise de trade-offs. Sua tarefa é comparar diferentes estilos arquiteturais, justificar uma escolha e documentá-la de forma rigorosa num ADR.

---

**IMPLEMENTAR:**
ADR: Estilo Arquitetural Principal do Sistema Simpix

**CURRENT STATE:**
Operamos com um "Monolito Modular" de facto, mas não temos uma decisão formal ou um plano de evolução documentado para a nossa arquitetura principal.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/07-decisions/adr-002-primary-architectural-style.md`, é criado. O arquivo deve conter um ADR completo, incluindo as seguintes seções:

1.  **Análise Comparativa (Trade-off Analysis Matrix):** Uma tabela que compara pelo menos duas opções: "Evoluir o Monolito Modular" vs. "Migrar para Microserviços". A comparação deve ser feita através de múltiplos eixos (ex: Complexidade Operacional, Velocidade de Desenvolvimento, Custo, Escalabilidade, Resiliência).
2.  **Decisão:** Uma declaração clara da decisão arquitetural (ex: "Decidimos evoluir o nosso Monolito Modular, adiando uma migração completa para microserviços").
3.  **Justificativa:** A justificação detalhada para a decisão, alinhada com os nossos objetivos de negócio e restrições.
4.  **Plano de Evolução Controlada:** Um roadmap de alto nível que descreve como a arquitetura irá evoluir.
5.  **Definição dos Critérios de Gatilho (Trigger Criteria):** Uma lista de métricas ou eventos de negócio objetivos que, se atingidos, irão "disparar" uma reavaliação desta decisão (ex: "Quando o número de equipas de desenvolvimento exceder 5", "Quando a latência p99 do módulo de pagamentos exceder 500ms").
6.  **Definição das Fitness Functions Iniciais:** Uma descrição das primeiras *fitness functions* automatizadas que iremos criar para validar continuamente a nossa arquitetura (ex: "Um teste no CI que falha se o Bounded Context de 'Pagamentos' fizer uma chamada direta ao Bounded Context de 'Autenticação'").

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a análise de trade-offs entre Monolito e Microserviços é a principal decisão a ser tomada."]
* **VALIDAÇÃO PENDENTE:** [O ADR gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que todas as seções obrigatórias do ADR são criadas.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.