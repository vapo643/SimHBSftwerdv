### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Adicionar as colunas `nome_empresa` e `data_admissao` à tabela `clientes` no schema Drizzle e gerar o script de migração SQL versionado.
* **Intenção Estratégica (O Porquê):** Implementar a primeira modificação de schema necessária para a nova funcionalidade. Esta ação estabelece a base de dados para os novos campos do formulário de "Nova Proposta" e valida nosso processo de migração controlada.
* **Histórico Relevante (Consulta Obrigatória):** O nosso debate de planejamento (Interação 2) definiu que todos os novos campos devem ser `NULLABLE` para garantir retrocompatibilidade com registros existentes e que as migrações para produção devem ser geradas como scripts SQL explícitos.
* **Modelo Mental (Como se Encaixa):** Esta é uma operação de duas etapas: primeiro, modificar a definição do schema no código-fonte (`shared/schema.ts`); segundo, usar uma ferramenta (`drizzle-kit`) para gerar o script SQL que aplicará essa mudança no banco de dados real.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O Agente pode usar `drizzle-kit push` em vez de `generate`, aplicando a mudança diretamente, o que viola nosso protocolo de produção.
    * **Contramedida:** O prompt proíbe explicitamente o uso de `push` e exige o uso de `generate`, validando o sucesso pela criação do arquivo de migração.

---

**IMPLEMENTAR:**
Adição de Campos de Empregador à Tabela de Clientes

**CURRENT STATE:**
A definição da tabela `clientes` no arquivo `shared/schema.ts` não possui os campos `nome_empresa` e `data_admissao`.

**EXPECTED (Estado Final de Sucesso):**
1.  O arquivo `shared/schema.ts` é modificado. As duas novas colunas são adicionadas à definição Drizzle da tabela `clientes`. As colunas devem ser `NULLABLE` (não devem ter `.notNull()`).
2.  Um novo arquivo de migração SQL é gerado pelo Drizzle Kit na pasta `drizzle/migrations/`.
3.  O script de migração gerado contém os comandos SQL `ALTER TABLE "clientes" ADD COLUMN "nome_empresa" text;` e `ALTER TABLE "clientes" ADD COLUMN "data_admissao" date;`.
4.  A migração **NÃO É EXECUTADA** no banco de dados. A missão é apenas gerar o script.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Modifique o Schema Drizzle:** Abra o arquivo `shared/schema.ts`. Localize a definição da tabela `clientes` (`export const clientes = ...`). Adicione as seguintes definições de coluna dentro do objeto:
    * `nome_empresa: text('nome_empresa'),`
    * `data_admissao: date('data_admissao'),`
2.  **Gere a Migração Versionada:** Execute o seguinte comando exato no terminal para gerar o script de migração: `npx drizzle-kit generate:pg --name="add_employer_fields_to_clientes"`.
3.  **Validação Final Mandatória:** Como prova de sucesso, abra o novo arquivo SQL gerado na pasta `drizzle/migrations/` e inclua o seu conteúdo completo no seu relatório final.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o tipo `date` do Drizzle corresponde ao tipo `DATE` do PostgreSQL corretamente."]
* **VALIDAÇÃO PENDENTE:** [O script SQL gerado deve ser revisado e aprovado pelo Arquiteto Chefe antes de ser aplicado em qualquer ambiente.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (`shared/schema.ts`).
2.  Garantir que os novos campos Drizzle estão sintaticamente corretos e são `NULLABLE`.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (verificar o conteúdo do script de migração gerado).
7.  **Documentar Decisões Técnicas**.