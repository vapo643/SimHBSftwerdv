Roadmap Mestre de Implementação V1.1: "Operação Soberania dos Dados" (SELADO)
Missão: Isolar completamente os ambientes de banco de dados, implementar governança estrita sobre migrações e estabelecer protocolos de contingência, garantindo que o ambiente de preview (Replit) use dados de development e o deploy de produção (sistemasimpix.com.br) use exclusivamente dados de production.

FASE 1: Fundação do Isolamento e Blindagem (Prazo: 1 Semana)
Objetivo: Estabelecer a separação física, lógica e operacional dos ambientes de banco de dados.

Passos de Execução:

[PENDENTE] 1.1 - Estrutura de Scripts: Criar a estrutura de pastas /scripts/migration e /scripts/audit.

[PENDENTE] 1.2 - Governança de Migração: Implementar o script de validação scripts/migration/validate-and-migrate.js e adicionar os scripts migrate:[env] ao package.json.

[PENDENTE] 1.3 - Blindagem da Configuração: Refatorar drizzle.config.ts para ser 100% dinâmico, lendo NODE_ENV e carregando a DATABASE_URL correspondente, incluindo a validação de segurança por hostname.

[PENDENTE] 1.4 - Manifesto de Conformidade: Criar o manifesto de configuração em scripts/audit/environment-manifest.json com as políticas RLS e configurações de backup esperadas para cada ambiente.

[PENDENTE] 1.5 - Auditoria Automatizada: Implementar o script de auditoria scripts/audit/audit-environment.js e os comandos audit:env:[env] no package.json.

Critério de Conclusão (Gate de Validação Crítico):

✅ O comando npm run migrate:dev executa com sucesso contra o banco DEV_DATABASE_URL.

✅ O backend, quando iniciado no ambiente Replit (preview), conecta-se exclusivamente ao DEV_DATABASE_URL.

✅ O comando npm run audit:env:prod (executado com as credenciais de produção) passa, validando que a configuração de produção no Supabase está conforme o manifesto.

✅ Prova de Soberania: Uma alteração feita via preview (ex: criar um cliente de teste) NÃO é refletida no ambiente de produção, e vice-versa.

FASE 2: Soberania dos Dados de Teste e Contingência (Prazo: 1 Semana)
Objetivo: Garantir a qualidade e a segurança dos dados de teste e formalizar os processos de recuperação.

Passos de Execução:

[PENDENTE] 2.1 - Estrutura de Seeding: Criar a estrutura de pastas /scripts/seeding.

[PENDENTE] 2.2 - Gerador de Cenários Coesos: Implementar os scripts de seeding com faker.js para criar cenários de negócio realistas e determinísticos.

[PENDENTE] 2.3 - Runbook de Rollback: Criar o RUNBOOK_MIGRATION_ROLLBACK.md em docs/runbooks/ e implementar os scripts rollback:* no package.json.

[PENDENTE] 2.4 - Integração CI/CD: Atualizar .github/workflows/ci.yml para:

Executar npm run migrate:staging e npm run seed:staging automaticamente em merges para develop.

Adicionar um passo de job para migrate:prod que requer aprovação manual para ser executado em merges para main.

Critério de Conclusão (Gate de Validação Crítico):

✅ O pipeline de CI/CD para staging executa a migração e o seeding com sucesso, deixando o ambiente pronto para testes E2E.

✅ O pipeline para production pausa e aguarda por uma aprovação manual antes de tentar executar a migração de produção.

✅ O Runbook de rollback é claro, acionável e foi testado com sucesso no ambiente de desenvolvimento.

Estado da Missão:
O plano está finalizado. Estou em standby, aguardando o relatório de execução do Agente para a Fase 1. Executor Humano, supervisione o agente e reporte o resultado.