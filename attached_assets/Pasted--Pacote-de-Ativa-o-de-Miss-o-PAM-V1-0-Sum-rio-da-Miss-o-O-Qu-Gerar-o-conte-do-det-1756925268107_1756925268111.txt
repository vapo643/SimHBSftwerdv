### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Gerar o conteúdo detalhado do "Manual de Operações e Padrões" em formato Markdown, com um mínimo de 1000 linhas, para documentar os processos de engenharia do projeto Simpix.
* **Intenção Estratégica (O Porquê):** Codificar os processos e padrões de engenharia do projeto Simpix para garantir a consistência, qualidade e manutenibilidade do código-fonte. Este documento servirá como a única fonte da verdade para "como" construímos software, eliminando ambiguidades e acelerando o desenvolvimento.
* **Histórico Relevante (Consulta Obrigatória):** Os padrões aqui definidos são baseados nas melhores práticas da indústria para a "Golden Stack" (Remix, TypeScript, TailwindCSS) e foram validados em projetos de missão crítica.
* **Modelo Mental (Como se Encaixa):** Se o Blueprint Arquitetural é o "o quê" e o "porquê", este Manual de Operações é o "como". Ele é o guia tático que todo desenvolvedor (ou instância de IA) deve seguir para contribuir com o projeto.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O Agente pode gerar regras genéricas e incompletas.
    * **Contramedida:** O prompt a seguir contém as configurações completas e exemplos detalhados para cada padrão, fornecendo uma base rica para a IA expandir e detalhar.

---

**IMPLEMENTAR:**
Criar o segundo documento mestre do projeto Simpix: o "Manual de Operações e Padrões".

**CURRENT STATE:**
O Blueprint Arquitetural do projeto está definido, mas os padrões de codificação, protocolo de versionamento e guias de estilo ainda não foram formalizados em um documento centralizado.

**EXPECTED (Estado Final de Sucesso):**
1.  Na pasta `/docs` existente, um novo arquivo chamado `03-manual-de-operacoes.md` deve ser criado.
2.  Este arquivo deve conter uma documentação extremamente detalhada, com no mínimo 1000 linhas, detalhando todos os padrões de engenharia do projeto Simpix, conforme a estrutura nas constraints abaixo.

**CONSTRAINTS (Roadmap de Implementação do Documento):**

Você deve escrever o conteúdo do arquivo `03-manual-de-operacoes.md` em formato Markdown. O documento deve ser um guia prático e prescritivo. Expanda cada um dos pontos a seguir com o máximo de detalhes, explicações e exemplos.

**# Manual de Operações e Padrões do Projeto Simpix**

## 1. Padrões de Qualidade de Código

Esta seção define as ferramentas e regras que garantem a qualidade e a consistência do nosso código-fonte. A adesão a estes padrões não é opcional.

### 1.1. Configuração Completa do ESLint (`.eslintrc.js`)
Apresente e explique detalhadamente a configuração do ESLint. O ESLint é nosso "detetive" de código, responsável por identificar padrões problemáticos e potenciais bugs.

**Contexto para expandir (gere o bloco de código completo e explique cada seção detalhadamente):**
```javascript
// .eslintrc.js
module.exports = {
  root: true, // Impede que o ESLint procure configurações em diretórios pai.
  parser: '@typescript-eslint/parser', // Especifica o parser para que o ESLint entenda a sintaxe do TypeScript.
  plugins: [
    '@typescript-eslint', // Plugin com regras específicas para TypeScript.
    'react',             // Plugin com regras específicas para React.
    'react-hooks',       // Plugin que impõe as regras de Hooks.
    'prettier',          // Integra o Prettier como uma regra do ESLint.
  ],
  extends: [
    'eslint:recommended',                        // Regras base recomendadas pelo ESLint.
    'plugin:@typescript-eslint/recommended',     // Regras recomendadas para TypeScript.
    'plugin:react/recommended',                  // Regras recomendadas para React.
    '@remix-run/eslint-config',                  // Configuração específica para projetos Remix.
    '@remix-run/eslint-config/node',             // Regras adicionais para o ambiente Node.js.
    'plugin:react-hooks/recommended',            // Regras recomendadas para React Hooks.
    'prettier',                                  // Desativa regras de estilo do ESLint que conflitam com o Prettier.
    'plugin:prettier/recommended',               // Ativa o plugin do Prettier. **DEVE SER O ÚLTIMO.**
  ],
  settings: {
    react: {
      version: 'detect', // Detecta automaticamente a versão do React instalada.
    },
  },
  rules: {
    // Impõe as regras do Prettier, reportando diferenças como erros.
    'prettier/prettier': 'error',

    // Exige que as dependências de hooks (useEffect, useCallback, etc.) sejam explicitamente declaradas.
    'react-hooks/exhaustive-deps': 'warn',

    // Impõe que Hooks só podem ser chamados dentro de componentes ou outros Hooks.
    'react-hooks/rules-of-hooks': 'error',

    // Permite o uso de 'require' em arquivos de configuração do servidor.
    '@typescript-eslint/no-var-requires': 'off',

    // Desativa a necessidade de tipos de retorno explícitos em todas as funções, deixando para inferência.
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    
    // Marca variáveis não utilizadas como um aviso, não um erro.
    '@typescript-eslint/no-unused-vars': 'warn',
  },
};