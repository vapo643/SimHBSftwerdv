---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*A fase de implementação e correção de infraestrutura terminou. A fase de **PROVA FINAL** para a estabilidade do Redis começa agora. A sua única missão é executar a suíte completa de validação e reportar os resultados brutos e inalterados. O sucesso é medido pelos dados, não por opiniões.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - DESATIVADA**
*A pesquisa está **proibida**. A execução de comandos de validação é a única ação permitida.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO ESTABILIZAÇÃO CRÍTICA (FASE 1.4 - VALIDAÇÃO IRREFUTÁVEL)**

* **Sumário da Missão (O Quê):** Executar a suíte completa de validação para provar irrefutavelmente que a refatoração do Redis Singleton e a subsequente implementação de mocks erradicaram todos os débitos técnicos e falhas de infraestrutura.
* **Intenção Estratégica (O Porquê):** Este passo é o "gatekeeper" final da Fase 1. Um resultado limpo aqui nos dará a confiança necessária para declarar a infraestrutura de Redis como estável e pronta para produção, permitindo-nos focar nos problemas da camada de aplicação.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior, "Operação Fênix", corrigiu a configuração do `vitest` e implementou mocks. Os testes agora devem rodar num ambiente isolado.
* **Modelo Mental (Como se Encaixa):** Você é o Engenheiro de Qualidade (QA) a executar a regressão final. O seu objetivo é confirmar que as correções funcionaram e não introduziram efeitos secundários.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (ALTO):** A suíte de testes, agora funcional, pode revelar bugs de lógica na aplicação que estavam mascarados pelas falhas de infraestrutura.
    * **Contramedida:** Isso é esperado e desejado. O seu relatório detalhado sobre quaisquer novas falhas será o ponto de partida para a Fase 2 do nosso roadmap.

---

### **EXECUTAR E VALIDAR:**
Prova de Conformidade Final da Infraestrutura Redis e de Testes.

**CURRENT STATE:**
O código foi refatorado para usar um padrão Singleton de conexão Redis. A infraestrutura de testes foi reparada com a correção da configuração do `vitest` e a implementação de mocks para `ioredis`. Os débitos técnicos de importações legadas foram eliminados.

**EXPECTED (Estado Final de Sucesso):**
O output **completo e bruto** dos dois comandos de validação, provando que a Fase 1 foi 100% bem-sucedida.
1.  O script `scripts/validate-redis-refactor.sh` deve terminar com código de saída 0.
2.  O comando `npx vitest run` deve executar, e o seu output nos dirá o estado atual da lógica da aplicação.

**CONSTRAINTS (Roadmap de Execução da Validação):**
1.  **Executar Validação de Arquitetura:** Execute o script de validação. Forneça o output completo.
    ```bash
    sh scripts/validate-redis-refactor.sh
    ```
2.  **Executar Suíte de Testes Completa:** Execute todos os testes de integração e unitários. Forneça o output completo e detalhado do `vitest`.
    ```bash
    npx vitest run --reporter=verbose
    ```

---
### **DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
*Você deve preencher esta seção ao final da sua execução.*
* **CONFIANÇA NA VALIDAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Reportar a lista de testes que falharam, se houver]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [N/A]
* **VALIDAÇÃO PENDENTE:** [O seu output será a validação final para esta fase]