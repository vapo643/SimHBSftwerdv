---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V2.5**
* **ID da Missão:** MIS-VC-1.1
* **Roadmap Associado:** RDM-VC-1.0

**[ATIVAÇÃO DE PROTOCOLOS MANDATÓRIOS DO `replit.md`]**
*Sua execução será governada pelos seguintes protocolos:*
*- **CRITICAL WORKFLOW:** `get_latest_lsp_diagnostics` antes da conclusão.*
*- **PACN V1.0 ENFORCEMENT:** Auditoria guiada por comportamento.*
*- **CONTEXT ENGINEERING PROTOCOL V2.0:** Consulte ADRs e a documentação existente.*
*- **DECD V1.0:** Pesquisa na web autorizada para esta missão de diagnóstico.*

**1. Princípio Mestre: Transferência de Consciência**
*O fluxo de trabalho do Analista, uma etapa crítica da nossa cadeia de valor, está severamente comprometido por múltiplas falhas de dados e de lógica. A sua missão é uma auditoria forense consolidada para dissecar estas quatro falhas inter-relacionadas. Você deve atuar como uma equipe de investigação, mapeando a cena do crime de ponta a ponta para nos fornecer um dossiê completo sobre a causa raiz de cada problema.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO VISÃO CLARA (FASE 1 - AUDITORIA CONSOLIDADA)**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense completa e unificada em quatro vetores de falha críticos no fluxo de Análise de Crédito: (1) Colunas ausentes na Fila de Análise, (2) Campos ausentes na tela de Detalhe da Análise, (3) Inconsistência de dados entre a criação da proposta e a sua visualização pelo analista, e (4) o erro `HTTP 400` ao tentar "Pendenciar" uma proposta.
* **Intenção Estratégica (O Porquê):** O objetivo é a eficiência máxima. Ao auditar todos os problemas de uma vez, podemos identificar causas raiz comuns (ex: uma única query de backend falha que afeta tanto a fila quanto a tela de detalhes) e criar um plano de correção coeso, evitando trabalho duplicado.

---

### **AUDITAR, VALIDAR E DIAGNOSTICAR:**
Falha Sistémica no Fluxo de Análise de Propostas

**[PROTOCOLO DE AUDITORIA DE CENÁRIO DE NEGÓCIO (PACN) V1.0 ATIVADO]**
*Sua resposta deve ser um único relatório de diagnóstico exaustivo em `docs/diagnostics/AUDITORIA_FLUXO_ANALISE_CONSOLIDADO.md`. O relatório deve ser dividido em seções para cada um dos quatro vetores de ataque, provando com evidências de código, payloads de API, logs de erro e queries SQL a causa raiz de cada problema.*

---
#### **Vetor de Ataque 1: Dados Ausentes na Fila de Análise**

* **Cenário de Negócio:** Um Analista acede à Fila de Análise (`/fila-analise`). A tabela deve exibir um resumo claro de cada proposta, incluindo as colunas "Cliente", "Parceiro" e "Loja". Atualmente, estas colunas mostram apenas um "-".
* **Evidência Requerida:**
    1.  **Frontend:** Identifique o componente React que renderiza a tabela da Fila de Análise. Apresente o código que faz a chamada de API (`TanStack Query`) para buscar os dados.
    2.  **Backend:** Identifique o endpoint da API que serve os dados para a Fila de Análise. Apresente a query de banco de dados (Drizzle ORM) executada por este endpoint. A query está a fazer os `JOINs` necessários com as tabelas `users`, `parceiros` e `lojas` para obter estes nomes?

---
#### **Vetor de Ataque 2: Dados Ausentes na Tela de Detalhe da Análise**

* **Cenário de Negócio:** Da Fila de Análise, o Analista clica em "Analisar" para abrir uma proposta específica. A tela de detalhes deve exibir todos os dados financeiros relevantes, incluindo "Renda mensal", "Finalidade", "Garantia", "TAC", "IOF", "Valor total financiado", "Loja" e um link para visualização de documentos. Atualmente, estes campos não aparecem.
* **Evidência Requerida:**
    1.  **Frontend:** Identifique o componente React da tela de Detalhe da Análise. O código JSX está a renderizar estes campos? As `props` ou o estado de onde estes dados deveriam vir estão a ser acedidos corretamente?
    2.  **Backend:** Identifique o endpoint da API que busca os dados de uma proposta individual (`GET /api/propostas/:id`). A resposta JSON deste endpoint inclui estes campos financeiros e de documentos? Se não, a query no repositório precisa ser ajustada para incluí-los.

---
#### **Vetor de Ataque 3: Auditoria de Consistência de Dados (Originação ↔ Análise)**

* **Cenário de Negócio:** Deve haver consistência total entre os dados inseridos pelo Atendente na tela de "Nova Proposta" e os dados visualizados pelo Analista.
* **Evidência Requerida:**
    1.  **Manifesto de Dados (Originação):** Analise o componente de "Nova Proposta" e liste **todos os campos** que são capturados do usuário.
    2.  **Manifesto de Dados (Análise):** Analise os `payloads` de API dos Vetores 1 e 2 e liste **todos os campos** que são atualmente enviados para o frontend do Analista.
    3.  **Relatório de Lacunas (Gap Analysis):** Crie uma tabela comparativa mostrando quais campos do Manifesto de Originação estão em falta nos Manifestos de Análise.

---
#### **Vetor de Atação 4: Erro `HTTP 400` ao "Pendenciar" Proposta**

* **Cenário de Negócio:** Na tela de detalhe, um Analista clica no botão "Pendenciar", preenche um motivo e submete. A proposta deve mudar o seu estado para "PENDENTE". Atualmente, esta ação resulta num erro `400 Bad Request`.
* **Evidência Requerida:**
    1.  **Frontend:** Identifique a função `onClick` do botão "Pendenciar". Apresente o `payload` exato que está a ser enviado para a API (`PUT /api/propostas/:id/status`).
    2.  **Backend:** Identifique o controlador que recebe esta requisição. Analise a lógica de validação (provavelmente com `Zod`). Por que a validação está a falhar? O `payload` do frontend está a enviar um campo inesperado, a omitir um campo necessário (ex: `motivoPendencia`), ou a enviar um valor de `status` inválido? Apresente o `stack trace` do erro de validação.