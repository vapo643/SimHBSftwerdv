**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Implementar a lógica de negócio completa para as ações de "Prorrogar Vencimento" e "Aplicar Desconto" na "Tela de Cobranças", integrando com a API do Banco Inter.
* **Intenção Estratégica (O Porquê):** Para ser verdadeiramente eficaz, a equipe de cobranças precisa de ferramentas para gerenciar ativamente os boletos, permitindo negociações com clientes (prorrogações, descontos), o que aumenta a taxa de recuperação de dívidas e melhora o relacionamento com o cliente.
* **Histórico Relevante (Consulta Obrigatória):** Sua auditoria anterior confirmou que os botões e modais para estas ações já existem na UI, mas a lógica por trás deles é um placeholder ou está incompleta. Já temos o serviço `interBankService` com uma função `editarCobranca` que provavelmente será o alvo desta integração.
* **Modelo Mental (Como se Encaixa):** O operador clica em uma ação na UI. Um modal coleta os novos dados. Ao confirmar, o frontend chama um novo endpoint no backend. O backend valida a permissão, chama o `interBankService.editarCobranca`, e ao receber sucesso, atualiza nosso banco de dados. A atualização no DB, via Realtime, deve atualizar a UI.
* **Riscos Antecipados:** **Risco:** Modificar um instrumento financeiro (boleto) é uma operação de alto risco. **Contramedida:** A implementação deve ter validação de dados rigorosa no backend (Zod) e a lógica de permissão de role deve ser a primeira verificação no endpoint.

---

**IMPLEMENTAR:**
A funcionalidade completa dos botões "Prorrogar Vencimento" e "Aplicar Desconto" na "Tela de Cobranças".

**CURRENT STATE:**
Os botões e modais existem na UI, mas não possuem uma lógica de backend funcional para interagir com a API do Banco Inter e atualizar o estado do boleto.

**EXPECTED (Estado Final de Sucesso):**
- **Prorrogar Vencimento:** O operador consegue, através de um modal, selecionar um ou mais boletos de uma proposta, escolher uma nova data de vencimento e, ao confirmar, a data é atualizada no Banco Inter e refletida em nosso sistema.
- **Aplicar Desconto:** O operador consegue, através de um modal, inserir um valor de desconto e uma data de validade para um boleto, e ao confirmar, o desconto é aplicado no Banco Inter e registrado em nosso sistema.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Backend - Endpoint de Modificação:**
    - **Ação:** Crie um novo endpoint robusto, por exemplo, `PATCH /api/cobrancas/boletos/:codigoSolicitacao`.
    - **Implementação:** Este endpoint deve ser responsável por receber as solicitações de modificação (prorrogação ou desconto).

**2. Backend - Lógica de Negócio:**
    - **Ação:** Dentro do novo endpoint, adicione a seguinte lógica:
        a. **Validação de Permissão:** Verifique se o usuário tem a role `ADMIN` ou `FINANCEIRO`.
        b. **Construção do Payload:** Construa o payload correto para a função `interBankService.editarCobranca` com base na ação solicitada (seja um novo `dataVencimento` ou um objeto `desconto`).
        c. **Chamada à API Externa:** Chame o `interBankService.editarCobranca`.
        d. **Atualização Local:** Em caso de sucesso na chamada da API, atualize a linha correspondente na nossa tabela `inter_collections` com as novas informações.

**3. Frontend - Lógica dos Modais:**
    - **Ação:** Conecte os modais de "Prorrogar Vencimento" e "Aplicar Desconto" (que já existem) para que eles chamem o novo endpoint `PATCH` com os dados corretos coletados do usuário.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear os arquivos de frontend e backend envolvidos.
2.  Garantir que a validação de permissões seja a primeira etapa no endpoint.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar um teste funcional para a prorrogação e outro para o desconto.
5.  O critério de sucesso é a modificação bem-sucedida de um boleto, validada pela atualização do status na UI (via Realtime) e pela confirmação nos logs de uma chamada bem-sucedida à API do Inter.