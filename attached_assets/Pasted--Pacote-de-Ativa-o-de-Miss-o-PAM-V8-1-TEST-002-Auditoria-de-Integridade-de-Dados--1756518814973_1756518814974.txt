### **Pacote de Ativação de Missão (PAM) V8.1 - TEST-002 (Auditoria de Integridade de Dados)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Executar um fluxo de criação de proposta de ponta-a-ponta, preenchendo todos os campos possíveis na UI, e em seguida, realizar uma auditoria direta no banco de dados PostgreSQL para verificar se cada dado inserido foi persistido de forma correta, completa e sem corrupção.
* **Intenção Estratégica (O Porquê):** Garantir com 100% de certeza a integridade dos dados, que é o ativo mais valioso do nosso sistema. Esta auditoria valida que nossas abstrações (Frontend, API, DDD, ORM) não possuem falhas e que o que o usuário vê na tela é exatamente o que é armazenado no banco, prevenindo o risco de corrupção silenciosa de dados.
* **Histórico Relevante (Consulta Obrigatória):** As missões anteriores validaram a arquitetura e a performance. Esta missão valida a correção funcional da persistência de dados em um cenário real e complexo.

---

**AUDITAR E VALIDAR:**
Integridade de Dados no Ciclo de Vida da Proposta

**CONTEXT:**
Validamos que o sistema é rápido e estável. Agora, precisamos validar que ele é **correto**. A última verificação antes do deploy é um teste de integridade de dados completo. Vamos criar a proposta mais complexa possível através da interface e depois usar privilégios de administrador para inspecionar o banco de dados e garantir que cada pedaço de informação foi salvo perfeitamente.

**CURRENT STATE:**
O sistema está funcional. O fluxo de criação de propostas permite a inserção de uma grande variedade de dados, mas não foi realizada uma auditoria que compare sistematicamente os dados da UI com os dados persistidos no banco.

**EXPECTED (Estado Final de Sucesso):**
Você deve produzir um **Relatório de Auditoria de Integridade de Dados** que documente o seguinte processo e seus resultados:
1.  **Criação da Proposta de Teste:** Uma nova proposta deve ser criada através da UI, preenchendo o maior número possível de campos, incluindo dados do cliente, referências, condições do empréstimo e upload de documentos. O ID da proposta criada deve ser registrado.
2.  **Validação Pós-Criação (Tabela `propostas`):**
    * Uma query `SELECT * FROM propostas WHERE id = '[ID_DA_PROPOSTA]'` deve ser executada.
    * O relatório deve apresentar uma tabela comparativa (UI vs. DB) para no mínimo 10 campos críticos (ex: `cliente_cpf`, `valor`, `prazo`), confirmando que os valores são idênticos.
3.  **Validação Pós-Criação (Tabelas Relacionadas):**
    * Queries de verificação devem ser executadas nas tabelas relacionadas, como `referencia_pessoal` e `proposta_documentos`.
    * O relatório deve confirmar que os registros nessas tabelas foram criados corretamente e estão associados ao ID da proposta correta.
4.  **Validação do Log de Auditoria:**
    * Uma query na tabela `proposta_logs` (ou `status_transitions`) deve ser executada.
    * O relatório deve confirmar que o evento de criação da proposta ("Status alterado de NULO para RASCUNHO") foi devidamente registrado.
5.  **Veredito Final:** Uma declaração final sobre se a integridade dos dados está 100% confirmada ou se foram encontradas discrepâncias.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Criar Proposta de Teste (Simulação):** Descreva os dados que você usaria para criar uma proposta de teste completa. Não é necessário interagir com a UI, apenas listar os dados de teste (Nome, CPF, Valor, etc.).
2.  **Script de Auditoria SQL:** Crie um script SQL (`scripts/audit-proposal-integrity.sql`) que contenha todas as queries `SELECT` necessárias para realizar a auditoria descrita na seção "EXPECTED". O script deve usar um placeholder para o ID da proposta a ser auditada.
3.  **Executar e Apresentar Evidências (Simulado):** Para cada query no seu script, descreva o resultado esperado. Por exemplo:
    * "Para a query `SELECT cliente_cpf FROM propostas ...`, o resultado esperado é o valor `123.456.789-00` inserido na UI."
    * "Para a query `SELECT COUNT(*) FROM referencia_pessoal ...`, o resultado esperado é `2`."
4.  **Compilar Relatório Final:** Organize todas as suas descobertas no relatório final, concluindo com o veredito sobre a integridade dos dados.