2¬∞ - Desenvolvedor Full-Stack V10- Orquestrador de Refinamento de IA
Gem personalizado

Mostrar racioc√≠nio
Confirmado. Aprova√ß√£o do "Roadmap de Implementa√ß√£o" recebida. Iniciando a Fase 4: Execu√ß√£o Cir√∫rgica.

A nossa √∫nica a√ß√£o ser√° o Passo 1. A sua valida√ß√£o posterior determinar√° o sucesso da miss√£o.

Roadmap Ativo e Detalhado
[üéØ EM EXECU√á√ÉO] Passo 1: Refatorar o Middleware JWT para Usar a Configura√ß√£o Centralizada

[PENDENTE] Passo 2: Valida√ß√£o Funcional Completa

Gero agora o Pacote de Ativa√ß√£o de Miss√£o (PAM) para o Passo 1.

Por favor, copie o conte√∫do exato do bloco Markdown abaixo e submeta-o ao Agente Replit com o modo High Power (Claude Opus) ativado.

Pacote de Ativa√ß√£o de Miss√£o (PAM) V1.0 - Refatora√ß√£o de Conformidade Arquitetural
Sum√°rio da Miss√£o: Refatorar o ficheiro server/lib/jwt-auth-middleware.ts para que ele utilize a fun√ß√£o de configura√ß√£o centralizada getJwtSecret(), eliminando a sua l√≥gica de carregamento de secrets que est√° obsoleta e desalinhada com a arquitetura do projeto.

Inten√ß√£o Estrat√©gica: Restaurar a funcionalidade de autentica√ß√£o em toda a aplica√ß√£o, impondo a conformidade arquitetural. Ao for√ßar o middleware a usar a fonte da verdade √∫nica para secrets, garantimos que ele se tornar√° automaticamente ciente dos ambientes de produ√ß√£o e desenvolvimento, resolvendo a falha de valida√ß√£o de tokens na sua causa raiz.

Hist√≥rico Relevante (Consulta Obrigat√≥ria): A auditoria forense provou que o ficheiro jwt-auth-middleware.ts ignora a fun√ß√£o getJwtSecret() de server/lib/config.ts (que √© a correta e ciente do ambiente). Em vez disso, ele utiliza uma l√≥gica pr√≥pria, est√°tica e incorreta (const JWT_SECRET = process.env.JWT_SECRET ...), o que causa a falha de todas as valida√ß√µes de token no ambiente de produ√ß√£o.

Modelo Mental: Pense no config.ts como o "c√©rebro" da nossa configura√ß√£o. O jwt-auth-middleware.ts est√° a agir com o seu pr√≥prio "c√©rebro" defeituoso. A sua miss√£o √© fazer um "transplante": remova a l√≥gica de secret defeituosa do middleware e conecte-o diretamente ao "c√©rebro" central, que √© a fun√ß√£o getJwtSecret().

Riscos Antecipados e Contramedidas: CR√çTICO. Uma falha na refatora√ß√£o da l√≥gica de autentica√ß√£o manter√° o sistema inteiro inoperacional. A contramedida √© a implementa√ß√£o exata do c√≥digo fornecido e a valida√ß√£o rigorosa atrav√©s do protocolo 7-CHECK.

IMPLEMENTAR:
Refatorar o ficheiro server/lib/jwt-auth-middleware.ts para obter a JWT Secret atrav√©s da fun√ß√£o getJwtSecret() do sistema de configura√ß√£o centralizado.

CURRENT STATE:

Ficheiro: server/lib/jwt-auth-middleware.ts

L√≥gica com Falha (Linha 478 aprox.):

TypeScript

const JWT_SECRET = process.env.JWT_SECRET || 'development-secret-key';
Evid√™ncia Bruta: Este c√≥digo est√° a ignorar a arquitetura de configura√ß√£o do projeto e a tentar ler uma secret (JWT_SECRET) que n√£o est√° configurada para o ambiente de produ√ß√£o, resultando em falhas de valida√ß√£o de token.

EXPECTED (Estado Final de Sucesso):

Ficheiro: server/lib/jwt-auth-middleware.ts

C√≥digo Corrigido: A implementa√ß√£o deve ser refatorada para corresponder exatamente √† seguinte l√≥gica:

Adicionar a Importa√ß√£o: No topo do ficheiro, adicione a importa√ß√£o da fun√ß√£o de configura√ß√£o correta.

TypeScript

import { getJwtSecret } from '../lib/config'; 
Substituir a L√≥gica: Substitua a linha de c√≥digo defeituosa pela chamada √† fun√ß√£o importada.

TypeScript

// Linha 478 (aprox.)
const JWT_SECRET = getJwtSecret();
Comportamento Resultante: O middleware ir√° agora obter a JWT Secret correta para o ambiente em que est√° a ser executado (PROD_JWT_SECRET em produ√ß√£o), permitindo que os tokens sejam validados com sucesso e restaurando o acesso a dados em toda a aplica√ß√£o.

DECLARA√á√ÉO DE INCERTEZA (OBRIGAT√ìRIO):

CONFIAN√áA NA IMPLEMENTA√á√ÉO: 99%

RISCOS IDENTIFICADOS: CR√çTICO. O correto funcionamento da autentica√ß√£o de toda a aplica√ß√£o depende desta modifica√ß√£o.

DECIS√ïES T√âCNICAS ASSUMIDAS: "A decis√£o √© de eliminar a l√≥gica de secret redundante e impor o uso do sistema de configura√ß√£o centralizado como a √∫nica fonte da verdade, eliminando d√≠vida t√©cnica e desalinhamento arquitetural."

VALIDA√á√ÉO PENDENTE: "Valida√ß√£o funcional completa pelo Arquiteto Chefe no Passo 2 do roadmap."

PROTOCOLO OBRIGAT√ìRIO 7-CHECK EXPANDIDO:

Mapeie e modifique o ficheiro server/lib/jwt-auth-middleware.ts.

Garanta que a nova importa√ß√£o e a chamada da fun√ß√£o getJwtSecret() substituem completamente a l√≥gica antiga.

Execute get_latest_lsp_diagnostics e corrija TODOS os erros (ex: caminho de importa√ß√£o incorreto).

Declare o seu N√≠vel de Confian√ßa.

Categorize o Risco como CR√çTICO.

Realize um teste funcional m√≠nimo: confirme que a aplica√ß√£o reinicia sem erros.

Documente a decis√£o de refatorar para usar a configura√ß√£o centralizada.