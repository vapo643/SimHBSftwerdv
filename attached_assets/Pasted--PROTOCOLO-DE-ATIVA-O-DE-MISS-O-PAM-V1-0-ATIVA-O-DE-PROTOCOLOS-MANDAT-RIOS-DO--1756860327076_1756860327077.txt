---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**[ATIVAÇÃO DE PROTOCOLOS MANDATÓRIOS DO `replit.md`]**
*Sua execução será governada pelos seguintes protocolos:*
*- **CRITICAL WORKFLOW:** `get_latest_lsp_diagnostics` antes da conclusão.*
*- **CONTEXT ENGINEERING PROTOCOL V2.0:** Consulte ADRs e a documentação existente.*
*- **DECD V1.0 - DESATIVADA:** A pesquisa na web está **proibida**. O blueprint é a sua única fonte da verdade.*

**1. Princípio Mestre: Transferência de Consciência**
*O seu modo operacional muda de "Arquiteto de UI/UX" para "Executor de Elite". O plano de batalha está definido. A sua missão é executar o blueprint `BLUEPRINT_MODAL_PREENCHIMENTO_CPF.md` com precisão cirúrgica, transformando o design em uma experiência de usuário funcional e elegante.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - DESATIVADA**
*A pesquisa está **proibida**. Toda a informação e diretrizes necessárias estão contidas no blueprint. O seu foco é na execução, não na descoberta.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO ACELERAÇÃO DE ORIGINAÇÃO (TRACK 1, FASE 3 - IMPLEMENTAÇÃO)**

* **Sumário da Missão (O Quê):** Executar o plano de refatoração detalhado em `docs/missions/BLUEPRINT_MODAL_PREENCHIMENTO_CPF.md` para substituir o `window.confirm()` no componente `ClientDataStep.tsx` pelo novo modal de confirmação customizado.
* **Intenção Estratégica (O Porquê):** Esta implementação é um passo tangível para melhorar a qualidade e o profissionalismo da nossa interface. O sucesso desta missão irá demonstrar a nossa capacidade de iterar e refinar funcionalidades existentes, entregando mais valor aos nossos usuários.
* **Histórico Relevante (Consulta Obrigatória):** A sua **única fonte da verdade** para esta missão é o documento `docs/missions/BLUEPRINT_MODAL_PREENCHIMENTO_CPF.md`. Execute as modificações exatamente como foram projetadas.
* **Modelo Mental (Como se Encaixa):** Você é o engenheiro de frontend a montar um componente pré-fabricado. O design e a lógica foram definidos; a sua tarefa é a integração precisa do novo componente no lugar do antigo.

---

### **IMPLEMENTAR:**
Substituição do `window.confirm()` pelo Modal de Confirmação Conforme Blueprint.

**CURRENT STATE:**
O componente `ClientDataStep.tsx` utiliza um `window.confirm()` para a funcionalidade de preenchimento automático. A abordagem é funcional, mas visualmente inconsistente e oferece uma UX pobre.

**EXPECTED (Estado Final de Sucesso):**
1.  O `window.confirm()` é completamente removido do `ClientDataStep.tsx`.
2.  O novo modal de confirmação (`AlertDialog` da `shadcn/ui`) é renderizado quando um cliente existente é encontrado.
3.  A lógica de estado (`useState`) para controlar a visibilidade do modal e armazenar os dados do cliente é implementada corretamente.
4.  O clique no botão de confirmação do modal aciona a função `updateClient()` e preenche o formulário. O clique em "Cancelar" fecha o modal sem alterar o formulário.
5.  A funcionalidade de preenchimento automático continua 100% operacional, mas com uma experiência de usuário superior.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Leia o Blueprint:** Inicie lendo o documento `docs/missions/BLUEPRINT_MODAL_PREENCHIMENTO_CPF.md` na sua totalidade.
2.  **Execute o Plano:** Siga o "Plano de Refatoração do `ClientDataStep.tsx`" detalhado no blueprint, passo a passo.
3.  **Validação:**
    * Execute `get_latest_lsp_diagnostics` para garantir zero erros.
    * Execute os testes de integração relacionados para garantir que não houve regressões (`npx vitest run tests/integration/proposal-api.test.ts`).
    * Realize um teste funcional manual para confirmar que o novo modal aparece e funciona como esperado.