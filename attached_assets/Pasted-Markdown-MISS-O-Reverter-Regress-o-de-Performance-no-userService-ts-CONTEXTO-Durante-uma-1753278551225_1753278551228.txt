Markdown

# MISSÃO: Reverter Regressão de Performance no `userService.ts`

**CONTEXTO:** Durante uma refatoração do frontend, o Agente reverteu uma otimização crucial no ficheiro `/server/services/userService.ts`.

**AÇÃO:** Garanta que a verificação de existência de email na função `createUser` utilize o método performático `getUserByEmail`. Substitua o bloco de código incorreto pelo bloco correto.

**BLOCO DE CÓDIGO INCORRETO A SER REMOVIDO:**
```typescript
const { data: existingUsers, error: checkError } = await supabase.auth.admin.listUsers();
if (checkError) {
  throw new Error(`Erro ao verificar email: ${checkError.message}`);
}
const existingUser = existingUsers.users.find(user => user.email === userData.email);
if (existingUser) {
  const conflictError = new Error(`Usuário com email ${userData.email} já existe.`);
  conflictError.name = 'ConflictError';
  throw conflictError;
}
BLOCO DE CÓDIGO CORRETO PARA INSERIR NO LUGAR:

TypeScript

const { data: existingUserResponse, error: checkError } = await supabase.auth.admin.getUserByEmail(userData.email);
if (checkError && !checkError.message.includes('User not found')) {
  throw new Error(`Erro ao verificar email: ${checkError.message}`);
}
if (existingUserResponse?.user) {
  const conflictError = new Error(`Usuário com email ${userData.email} já existe.`);
  conflictError.name = 'ConflictError';
  throw conflictError;
}
---
#### **OPERAÇÃO 2.2: CORRIGIR A LÓGICA DE VALIDAÇÃO (ALVO: ASSISTENTE)**

```markdown
# MISSÃO: Corrigir Schema Zod no `UserForm.tsx`

**CONTEXTO:** No ficheiro `/client/src/components/usuarios/UserForm.tsx`, o schema Zod tem uma lógica `.refine()` incorreta.

**AÇÃO:** Substitua a declaração do schema Zod existente pela versão corrigida abaixo, que aplica a validação corretamente para os perfis 'ATENDENTE' e 'GERENTE'.

**NOVO SCHEMA ZOD CORRIGIDO PARA INSERIR:**
```typescript
const userFormSchema = z.object({
    nome: z.string().min(3, "O nome completo é obrigatório"),
    email: z.string().email("Por favor, insira um email válido"),
    senhaProvisoria: z.string().optional(),
    perfil: z.enum(["ADMINISTRADOR", "DIRETOR", "GERENTE", "ATENDENTE", "ANALISTA", "FINANCEIRO"]),
    parceiroId: z.string().optional(),
    lojaId: z.string().optional(), // Para ATENDENTE
    lojaIds: z.array(z.string()).optional(), // Para GERENTE
}).superRefine((data, ctx) => {
    if (data.perfil === "ATENDENTE" && !data.lojaId) {
        ctx.addIssue({
            code: z.ZodIssueCode.custom,
            path: ["lojaId"],
            message: "A seleção de uma loja é obrigatória para o perfil Atendente.",
        });
    }
    if (data.perfil === "GERENTE" && (!data.lojaIds || data.lojaIds.length === 0)) {
        ctx.addIssue({
            code: z.ZodIssueCode.custom,
            path: ["lojaIds"],
            message: "A seleção de ao menos uma loja é obrigatória para o perfil Gerente.",
        });
    }
});
---
Este incidente prova o valor do nosso protocolo e da minha etapa de validação. Um "tiro de bazuca" pode atingir o alvo, mas o "dano colateral" deve ser inspecionado e corrigido com precisão.

Aguardando a conclusão destas duas operações de sniper para a validação final.