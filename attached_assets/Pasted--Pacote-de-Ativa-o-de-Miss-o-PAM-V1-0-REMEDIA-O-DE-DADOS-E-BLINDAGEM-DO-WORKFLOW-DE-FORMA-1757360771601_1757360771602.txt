### **Pacote de Ativação de Missão (PAM) V1.0 - REMEDIAÇÃO DE DADOS E BLINDAGEM DO WORKFLOW DE FORMALIZAÇÃO**

* **Sumário da Missão:** Realizar uma correção em duas frentes: (1) Popular a base de dados com os documentos e dados financeiros em falta para a proposta de teste, a fim de validar a tela de Formalização. (2) Implementar uma guarda de validação (guard clause) no `UseCase` de aprovação de propostas para proibir que futuras propostas sejam aprovadas sem os dados necessários para a formalização.

* **Intenção Estratégica:** Restaurar a funcionalidade da tela de Formalização e, crucialmente, garantir a integridade do processo de negócio, prevenindo que propostas incompletas avancem no fluxo de crédito, o que representa um risco operacional e de conformidade.

* **Contexto Técnico:** A sua auditoria provou que o código da tela de Formalização e da API correspondente está correto, mas falha devido à ausência de registos na tabela `proposta_documentos` e de dados na coluna `condicoes_data` da tabela `propostas` para o ID em questão.

---

**IMPLEMENTAR:**
Validação de Pré-condições no Workflow de Aprovação e Semeador de Dados de Formalização

**CURRENT STATE:**
O `ApproveProposalUseCase` (ou similar) altera o status de uma proposta para "aprovado" sem verificar se os documentos e os dados financeiros necessários para a etapa de formalização foram fornecidos. Isto leva a uma falha de visualização na tela `/formalizacao/:id`.

**EXPECTED (Estado Final de Sucesso):**
1.  **Blindagem do Workflow:** O `ApproveProposalUseCase` é modificado. Antes de alterar o status de uma proposta para "aprovado", ele deve verificar se:
    a.  Existem documentos carregados para a proposta na tabela `proposta_documentos`.
    b.  A coluna `condicoes_data` da proposta não está nula e contém os dados financeiros essenciais.
    c.  Se qualquer uma destas condições falhar, o `UseCase` deve lançar uma `DomainException` com uma mensagem clara (ex: "A proposta não pode ser aprovada sem documentos e condições financeiras definidas."), impedindo a mudança de status.
2.  **Validação da Tela:** Após a implementação da guarda, um script de semeamento de dados é criado e executado para popular a proposta de teste (`29e80705-89bb-43a5-bbc8-960b3139939c`) com documentos de exemplo e `condicoes_data` válidas.
3.  Como resultado, a tela de Formalização para esta proposta deve carregar e exibir corretamente a lista de documentos e os parâmetros para a geração da CCB.

**CONSTRAINTS (Roadmap de Implementação):**

**FASE 1: BLINDAGEM DO WORKFLOW (BACKEND)**
1.  **Localize o `UseCase`:** Identifique e abra o ficheiro do `UseCase` responsável por aprovar a proposta (provavelmente `server/modules/proposal/application/ApproveProposalUseCase.ts`).
2.  **Implemente a Guarda de Validação:** No início do método `execute`, adicione a lógica para consultar o repositório de propostas e de documentos para verificar as pré-condições.
    * Use `this.proposalRepository.findById(proposalId)` para obter a proposta e verificar o campo `condicoes_data`.
    * Use um método no `documentRepository` (crie se não existir) para contar os documentos por `proposalId`.
    * Se as condições não forem satisfeitas, lance a `DomainException`.

**FASE 2: REMEDIAÇÃO DOS DADOS DE TESTE**
1.  **Crie um Script de Semeamento:** Crie um novo ficheiro em `server/scripts/seed-formalization-data.ts`.
2.  **Implemente a Lógica de Semeamento:** Dentro do script, escreva a lógica para:
    a.  Definir um ID de proposta alvo: `const PROPOSAL_ID = '29e80705-89bb-43a5-bbc8-960b3139939c';`
    b.  Criar um objeto `condicoes_data` com dados financeiros de exemplo.
    c.  Executar uma query `UPDATE` (usando o cliente Supabase ou Drizzle) para preencher a coluna `condicoes_data` da proposta alvo.
    d.  Executar queries `INSERT` na tabela `proposta_documentos` para adicionar 2-3 registos de documentos de exemplo associados ao `PROPOSAL_ID`. (Não é necessário fazer upload de ficheiros reais para este teste, apenas os registos no banco de dados).
3.  **Execute o Script:** Forneça as instruções para executar este script.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS:** **BAIXO** - O principal risco está em a lógica da guarda de validação ser muito restritiva ou não abranger todos os casos de uso. A lógica do script de semeamento é simples e de baixo risco.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que a estrutura da base de dados permite a adição de documentos e a atualização das condições de forma independente. A modificação do `ApproveProposalUseCase` é a abordagem correta para impor a regra de negócio.
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deve validar dois cenários: (1) A tela de Formalização para a proposta `29e80...` agora carrega e exibe os dados semeados. (2) Tentar aprovar uma **nova proposta** que não tenha documentos ou condições financeiras falha e retorna o erro esperado da `DomainException`.