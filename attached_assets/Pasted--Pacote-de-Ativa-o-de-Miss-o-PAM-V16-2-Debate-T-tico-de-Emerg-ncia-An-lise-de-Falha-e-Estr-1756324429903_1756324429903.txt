### **Pacote de Ativação de Missão (PAM) V16.2: Debate Tático de Emergência (Análise de Falha e Estratégia de Saída)**

* **Sumário da Missão (O Quê):** Iniciar um debate tático de emergência de 3 interações. Sua primeira tarefa é fornecer um relatório de situação completo e honesto sobre o estado atual do codebase, seguido de um pedido de ajuda para definir a estratégia de remediação mais eficaz.

* **Intenção Estratégica (O Porquê):** As tentativas anteriores de remediação falharam, resultando em uma degradação severa da qualidade do código e na inoperabilidade do sistema. Antes de prosseguir, é mandatório que tenhamos um alinhamento absoluto sobre a magnitude do problema e a estratégia mais inteligente para resolvê-lo, alavancando sua velocidade de processamento para análise em vez de correções cegas.

* **Modelo Mental (Como se Encaixa):** Você atuará como um **Engenheiro Sênior reportando-se a um Arquiteto Chefe em uma "War Room" de crise**. Sua credibilidade foi abalada. Sua única forma de recuperá-la é através da transparência radical e da colaboração. Você não deve propor soluções, mas sim apresentar os dados brutos e pedir uma decisão estratégica.

---

**DIRETRIZ DE MISSÃO: Relatório de Situação e Pedido de Direcionamento (Interação 1 de 3)**

**CURRENT STATE:**
O sistema não é executável. Múltiplas tentativas de correção em massa falharam, resultando em um número desconhecido e massivo de erros de linting e, potencialmente, de compilação. A confiança no estado atual do código é zero.

**EXPECTED (Estado Final de Sucesso para ESTA INTERAÇÃO):**
Você **DEVE** produzir um único artefato em Markdown chamado **`SITUATION_REPORT_CRITICAL.md`**. Este relatório **NÃO DEVE CONTER** nenhuma tentativa de correção. Ele deve conter exclusivamente as seguintes seções:

1.  **`1. Prova de Estado Irrefutável:`**
    * A saída **completa e não truncada** do comando `npx eslint . --ext .ts,.tsx,.js,.jsx`.
    * A saída **completa e não truncada** do comando `npx tsc --noEmit`.
    * A contagem final e exata de **erros** e **warnings** de ESLint e de **erros** de TypeScript.

2.  **`2. Análise de Padrões de Falha (Inteligência Tática):`**
    * Com base na saída dos comandos, identifique e liste os **3 principais padrões de erro** que constituem a maioria dos problemas.
    * Para cada padrão, forneça:
        * **`Nome do Padrão:`** (Ex: "Parsing Error: Declaration or statement expected").
        * **`Contagem de Ocorrências:`** O número exato de vezes que este padrão aparece.
        * **`Análise de Causa Raiz:`** Sua hipótese sobre por que este padrão de erro foi introduzido em massa (ex: "Uma substituição automática de `any` por `unknown` sem o devido type casting causou falhas de sintaxe em cascata").

3.  **`3. Confissão de Bloqueio e Pedido de Ajuda:`**
    * Uma declaração clara e concisa sobre o principal bloqueio técnico (ex: "O volume de 'Parsing Errors' impede a eficácia de qualquer correção automática ou análise mais profunda").
    * Uma pergunta direta ao Arquiteto Chefe, pedindo uma decisão estratégica. (Ex: **"Arquiteto, com base nestes dados, qual dos 3 principais padrões de erro devemos priorizar para um ataque em massa inicial a fim de obter o máximo impacto na estabilização do sistema?"**).

---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**

* **CONFIANÇA NA IMPLEMENTAÇÃO ATUAL:** 0%
* **RISCOS IDENTIFICADOS:** CRÍTICO (O sistema está inoperante e a dívida técnica é massiva).
* **VALIDAÇÃO PENDENTE:** A qualidade e a honestidade do seu `SITUATION_REPORT_CRITICAL.md` serão a base para a nossa próxima decisão tática.

---

**PROTOCOLO OBRIGATÓRIO 7-CHECK (ADAPTATIVO - Nível FULL):**
A execução desta missão de diagnóstico é classificada como de Risco **CRÍTICO**. Você **DEVE** executar e reportar o resultado do `7-CHECK FULL`.