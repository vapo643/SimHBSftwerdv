### Pacote de Ativação de Missão (PAM) V1.0 - Operação "Estabilização de Frontend" / Fase 2 (P1)

* **Sumário da Missão (O Quê):** Auditar e refatorar os componentes `dashboard.tsx` e `AuthContext.tsx` para estabilizar a ordem de execução dos React Hooks e as suas dependências.
* **Intenção Estratégica (O Porquê):** Eliminar a instabilidade de renderização (risco P1) causada pela ordem inconsistente de chamadas de *hooks* e por dependências não otimizadas. Uma base de *hooks* estável previne re-renderizações desnecessárias e bugs subtis, garantindo a robustez da aplicação a longo prazo.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de frontend sênior a aplicar as melhores práticas do React. Sua tarefa é garantir que a utilização de *hooks* segue as regras canónicas da biblioteca para garantir um comportamento previsível.

---

**IMPLEMENTAR (Plano de Refatoração):**
Execute a seguinte sequência de ações.

**CURRENT STATE:**
O erro P0 de DOM foi corrigido, mas a análise do agente identificou instabilidades potenciais na ordem de execução dos *hooks* e nas suas dependências.

**EXPECTED (Estado Final de Sucesso):**
1.  Todos os *hooks* (`useState`, `useEffect`, `useMemo`, `useQuery`) nos ficheiros `dashboard.tsx` e `AuthContext.tsx` são chamados incondicionalmente no topo dos seus respetivos componentes.
2.  Os *arrays* de dependências dos *hooks* `useEffect` e `useMemo` estão completos e otimizados, utilizando `useCallback` para estabilizar funções passadas como dependências, se necessário.
3.  O sistema permanece funcional, sem regressões.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Estabilizar `AuthContext.tsx`**
1.1. Abra o ficheiro `client/src/contexts/AuthContext.tsx`.
1.2. Audite a ordem dos *hooks*. Mova todas as chamadas de `useState`, `useEffect`, etc., para o topo do componente `AuthProvider`, antes de qualquer lógica de retorno ou condicional.
1.3. Inspecione os *arrays* de dependências. Se houver funções definidas dentro do componente e usadas em um `useEffect`, envolva-as com `useCallback` para estabilizar a sua referência.

**Passo 2: Estabilizar `dashboard.tsx`**
2.1. Abra o ficheiro `client/src/pages/dashboard.tsx`.
2.2. Garanta que a ordem de execução dos *hooks* seja consistente e incondicional, conforme a correção da Fase 1.
2.3. Audite todos os *arrays* de dependências dos `useEffect`s e `useMemo`s no ficheiro. Adicione quaisquer dependências em falta e utilize `useCallback` para estabilizar funções, se aplicável.

**Passo 3: Validação Final**
3.1. Apresente os trechos de código refatorados de ambos os ficheiros que demonstrem a ordem correta dos *hooks* e a otimização das dependências.
3.2. Execute `get_latest_lsp_diagnostics` para confirmar que não há erros de compilação ou *linting* (especialmente do `eslint-plugin-react-hooks`).
3.3. Confirme que o fluxo de login e a renderização do dashboard continuam a funcionar sem erros.

---

### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**
Liste a totalidade das suas descobertas, riscos e recomendações.
---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS (LISTA COMPLETA):**
    * **Risco 1 (Baixo):** A adição incorreta de dependências em um `useEffect` pode causar *loops* de renderização infinitos.
* **DECISÕES TÉCNICAS ASSUMIDAS (LISTA COMPLETA):**
    * A regra `exhaustive-deps` do ESLint será a nossa "fonte da verdade" para a completude dos *arrays* de dependências.
* **VALIDAÇÃO PENDENTE (LISTA COMPLETA):**
    * O teste funcional completo do fluxo de autenticação e dashboard é mandatório para detetar regressões.