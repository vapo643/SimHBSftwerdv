---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*A infraestrutura está estável; agora caçamos os bugs da aplicação. A sua missão é uma análise forense de três falhas críticas distintas. Você deve atuar como um detetive de código, dissecando cada cenário de falha para encontrar a sua causa raiz exata e propor um plano de correção cirúrgico.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** para entender quaisquer mensagens de erro específicas de bibliotecas (`express`, `drizzle`, etc.) ou para encontrar padrões de correção canónicos para os problemas identificados. Priorize a documentação oficial.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO ESTABILIZAÇÃO CRÍTICA (FASE 2 - DIAGNÓSTICO DE FALHAS)**

* **Sumário da Missão (O Quê):** Realizar uma análise de causa raiz nos três bugs mais críticos revelados pela suíte de testes (`Erro 500 em Tabelas Comerciais`, `Erro de Destructuring em Propostas` e `Unhandled Rejection em Timing Attack`) e produzir um relatório de diagnóstico detalhado para cada um.
* **Intenção Estratégica (O Porquê):** Atacar os bugs de forma reativa e desordenada é ineficiente. Esta missão visa criar um plano de batalha informado, compreendendo profundamente cada problema antes de escrever qualquer código de correção. Isto minimiza o risco de introduzir novas regressões.
* **Histórico Relevante (Consulta Obrigatória):** O output `verbose` do comando `npx vitest run` da missão anterior (Fase 1.4) é a sua principal fonte de evidências. Ele contém os stack traces e os nomes dos arquivos de teste que falharam.
* **Modelo Mental (Como se Encaixa):** Você é um Engenheiro de Qualidade a triar um backlog de bugs. Para cada bug, você deve reproduzir a falha, isolar a causa e documentar um "ticket" claro e acionável para a fase de implementação.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (MÉDIO):** As três falhas podem ter uma causa raiz comum e interligada, como um problema num middleware de autenticação ou de parsing de body.
    * **Contramedida:** A sua análise deve considerar esta possibilidade. Se encontrar uma conexão, o seu relatório deve destacá-la, pois isso mudará a estratégia de correção.

---

### **AUDITAR E VALIDAR:**
Falhas Críticas na Lógica da Aplicação

**[PROTOCOLO DE AUDITORIA DE CENÁRIO DE NEGÓCIO (PACN) V1.0 ATIVADO]**
*Sua resposta deve ser um único relatório de diagnóstico em `docs/diagnostics/FASE_2_TEST_FAILURES_ROOT_CAUSE_ANALYSIS.md`, dividido em três seções, uma para cada vetor de ataque abaixo. Para cada seção, forneça as evidências irrefutáveis solicitadas.*

---
#### **Vetor de Ataque 1: `GET /api/tabelas-comerciais-disponiveis` retorna 500**

* **Cenário de Negócio:** Um usuário autenticado tenta aceder à lista de tabelas comerciais disponíveis. A regra de negócio dita que a API deve retornar um status `200 OK` com a lista de tabelas.
* **Ponto de Falha:** O teste de integração para este endpoint falha, recebendo um `500 Internal Server Error`.
* **Evidência Requerida:**
    1.  **Localize o Controlador:** Identifique o arquivo do controlador e a função que manipula a rota `GET /api/tabelas-comerciais-disponiveis`.
    2.  **Rastreie a Execução:** Analise o código desta função. Onde ocorre o erro que causa o status 500? É uma falha na consulta ao banco de dados, na serialização dos dados, ou noutro local?
    3.  **Apresente a Prova:** Forneça o `stack trace` completo do erro que é logado no terminal do servidor quando este teste específico é executado.
    4.  **Proponha a Correção:** Descreva a alteração de código exata necessária para corrigir a falha.

---
#### **Vetor de Ataque 2: `Destructuring Error` em `server/routes/propostas/core.ts:223`**

* **Cenário de Negócio:** Um endpoint relacionado à atualização de propostas (provavelmente um `POST` ou `PUT`) espera receber dados no corpo da requisição (`req.body`).
* **Ponto de Falha:** O teste falha com um `TypeError`, indicando que `req.body` está `undefined` na linha 223 do arquivo `core.ts`, o que impede a desestruturação de propriedades.
* **Evidência Requerida:**
    1.  **Contextualize a Falha:** Apresente o bloco de código em torno da linha 223 de `server/routes/propostas/core.ts`.
    2.  **Analise o Middleware:** Verifique a cadeia de middlewares para esta rota. Existe um middleware de `body-parser` (como `express.json()`) a ser executado **antes** do seu controlador?
    3.  **Inspecione o Teste:** Analise o arquivo de teste que aciona este erro. A requisição no teste está a enviar corretamente um `body` com o `Content-Type: application/json`?
    4.  **Proponha a Correção:** Descreva a causa raiz (ex: "Middleware `express.json()` ausente no setup da aplicação de teste" ou "O teste X não está a enviar um body na sua requisição `POST`") e o plano de correção.

---
#### **Vetor de Ataque 3: `Unhandled rejection` em `timing-attack-mitigation.test.ts`**

* **Cenário de Negócio:** Um teste de segurança verifica se a nossa implementação de comparação de strings é resiliente a ataques de timing.
* **Ponto de Falha:** O teste termina com uma rejeição de promessa não tratada (`unhandled rejection`), indicando um erro assíncrono que não foi capturado por um bloco `.catch()`.
* **Evidência Requerida:**
    1.  **Apresente o Teste:** Mostre o código do teste que está a falhar em `timing-attack-mitigation.test.ts`.
    2.  **Identifique a Promessa:** Qual operação assíncrona dentro do teste está a ser rejeitada?
    3.  **Diagnostique a Rejeição:** Por que a promessa está a ser rejeitada? Qual é o erro real que está a ser lançado?
    4.  **Proponha a Correção:** Descreva como o teste deve ser modificado (ex: adicionando `async/await` com um bloco `try/catch`, ou adicionando um `.catch()` à cadeia da promessa) para tratar a rejeição e fazer a asserção correta sobre o erro.