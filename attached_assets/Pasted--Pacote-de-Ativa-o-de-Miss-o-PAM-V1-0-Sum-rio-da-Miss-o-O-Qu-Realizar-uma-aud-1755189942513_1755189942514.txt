**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Realizar uma auditoria de diagnóstico completa da **existente** "Tela de Cobranças" para mapear sua estrutura, componentes e lógica de dados atuais antes de iniciarmos qualquer refatoração.
* **Intenção Estratégica (O Porquê):** Nossas tentativas anteriores de modificar esta tela falharam porque partimos da premissa incorreta de que ela precisava ser criada do zero. Agora, nossa estratégia é primeiro entender profundamente a implementação atual para que possamos atualizá-la de forma cirúrgica e sem introduzir regressões.
* **Histórico Relevante (Consulta Obrigatória):** A sua tentativa anterior de criar uma nova tela `/cobrancas` foi incorreta. A tela já existe dentro da área financeira. Sua missão agora é encontrá-la e analisá-la.
* **Modelo Mental (Como se Encaixa):** Você atuará como um engenheiro de software que acabou de entrar no projeto e recebeu a tarefa de entender uma peça de código existente antes de poder modificá-la. Sua tarefa é ler, analisar e relatar.

---

**IMPLEMENTAR:**
Auditoria de diagnóstico completa. **NÃO FAÇA NENHUMA MODIFICAÇÃO NO CÓDIGO.**

**CURRENT STATE:**
Existe uma "Tela de Cobranças" em algum lugar na nossa área financeira, mas não temos um mapa claro de sua implementação, sua query de dados, ou seus componentes.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria detalhado que responda a todas as questões abaixo, nos fornecendo um "blueprint" da tela atual.

**CONSTRAINTS (Roadmap de Auditoria - Apenas Leitura):**

**1. Localização da Tela (Frontend):**
    - **Ação:** Encontre o ficheiro do componente React que renderiza a "Tela de Cobranças" existente.
    - **Relatório:** Reporte o caminho completo do ficheiro (ex: `client/src/pages/financeiro/cobrancas.tsx`).

**2. Análise da Lógica de Dados (Frontend):**
    - **Ação:** Inspecione o componente que você encontrou.
    - **Relatório:** Como ele busca seus dados? Ele usa `TanStack Query`? Qual é o `queryKey` ou o endpoint da API que ele chama? Apresente o trecho de código que faz a busca de dados.

**3. Análise da Query (Backend):**
    - **Ação:** Localize o endpoint da API no backend que você identificou no passo anterior.
    - **Relatório:** Apresente a query Drizzle completa que este endpoint utiliza. Quais são as regras de negócio (filtros `WHERE`) que a query atual aplica para decidir o que é mostrado na tela?

**4. Análise dos Componentes da UI:**
    - **Ação:** Descreva brevemente os principais componentes da UI na tela.
    - **Relatório:** A tela já possui uma tabela? Quais colunas ela exibe? Existem botões de ação? Quais?

**Relatório Final:**
O critério de sucesso é um relatório claro que nos dê um entendimento completo da implementação atual da "Tela de Cobranças", do frontend ao backend.