### **Pacote de Ativação de Missão (PAM) V1.0 - CORREÇÃO DE CONTRATO E AUTORIZAÇÃO**

* **Sumário da Missão:** Realizar uma correção em duas frentes: (1) Sanear a resposta da API de reenvio de proposta e a lógica de tratamento no frontend para eliminar o falso erro `HTTP 400` e garantir o redirecionamento correto. (2) Corrigir a falha de permissão que impede o carregamento dos logs de auditoria no componente `HistoricoCompartilhado.tsx`.

* **Intenção Estratégica:** Restaurar a integridade funcional e a confiança do usuário no sistema. Um fluxo que salva os dados mas reporta um erro é inaceitável e mina a credibilidade da plataforma. A falha em exibir o histórico de auditoria é uma quebra de requisito de negócio.

* **Contexto Técnico:**
    1.  **Erro 400:** A persistência no DB está a funcionar, mas o `proposalController.ts` provavelmente falha ao serializar a resposta de sucesso, fazendo com que o Express retorne um `400 Bad Request`. Isso engana o `apiClient` e o TanStack Query no frontend, que acionam a lógica de erro.
    2.  **Erro de Permissão:** O `apiClient` no frontend está a ser bloqueado ao tentar aceder aos dados de auditoria. A causa provável é uma política de Row Level Security (RLS) na tabela `auditoria_propostas` que não está corretamente configurada para o `auth.uid()` do usuário autenticado.

---

**IMPLEMENTAR:**
Saneamento da API de Reenvio e Correção de Permissão de Auditoria

**CURRENT STATE:**
1.  O método `resubmitFromPending` no `proposalController.ts` executa a lógica de negócio com sucesso mas termina com uma resposta que o cliente interpreta como um erro `400`.
2.  A mutação em `editar.tsx` aciona seu callback `onError`, exibindo uma mensagem de erro incorreta e redirecionando o usuário para uma tela de "não editável" em vez do dashboard.
3.  O componente `HistoricoCompartilhado.tsx` falha ao tentar executar a query `api.get(`/api/propostas/${id}/auditoria`)`, recebendo um erro de permissão.

**EXPECTED (Estado Final de Sucesso):**
1.  O método `resubmitFromPending` no `proposalController.ts` deve, após a execução bem-sucedida do `UseCase`, retornar explicitamente um `res.status(200).json({ success: true, message: 'Proposta reenviada para análise.' })`.
2.  O hook `resubmitMutation` em `editar.tsx` deve acionar o callback `onSuccess`.
3.  Dentro do `onSuccess`, o usuário deve ser redirecionado para o dashboard (`/dashboard` ou `/credito/fila`) usando o hook `useLocation` da biblioteca `wouter`.
4.  Um `toast` de sucesso deve ser exibido.
5.  A query para buscar os logs de auditoria no endpoint `/api/propostas/:id/auditoria` deve ser executada com sucesso, retornando os dados para o componente `HistoricoCompartilhado.tsx` sem erros de permissão.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Correção do Backend (Controller):**
    * Navegue até `server/modules/proposal/presentation/proposalController.ts`.
    * Localize o método `resubmitFromPending`.
    * Garanta que, dentro do bloco `try`, após a linha `await useCase.execute(...)`, exista a linha `return res.status(200).json({ success: true, message: 'Proposta reenviada com sucesso.' });`.

2.  **Correção do Frontend (Redirecionamento):**
    * Navegue até `client/src/pages/propostas/editar.tsx`.
    * Importe `useLocation` de `wouter`: `import { useLocation } from 'wouter';`.
    * Instancie o hook no componente: `const [, setLocation] = useLocation();`.
    * Dentro do callback `onSuccess` da `resubmitMutation`, adicione a linha: `setLocation('/dashboard');`.

3.  **Correção de Permissão de Auditoria (RLS):**
    * Esta é uma tarefa de banco de dados. A hipótese é que a política de RLS para `auditoria_propostas` está incorreta.
    * Forneça o seguinte comando SQL para ser executado no SQL Editor do Supabase, que garante que um usuário autenticado possa ler os logs de auditoria de uma proposta se ele tiver acesso à própria proposta:
        ```sql
        -- Remove a política antiga se existir
        DROP POLICY IF EXISTS "Isolamento por instituição - auditoria" ON public.auditoria_propostas;

        -- Cria a nova política correta
        CREATE POLICY "Usuários podem ver auditoria de propostas que podem acessar"
        ON public.auditoria_propostas
        FOR SELECT
        USING (
          EXISTS (
            SELECT 1
            FROM propostas p
            WHERE p.id = auditoria_propostas.proposta_id
          )
        );
        ```

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS:** **BAIXO** - O principal risco na correção da RLS é que uma política mal formulada poderia expor dados de auditoria indevidamente. O comando SQL fornecido é projetado para ser seguro, baseando o acesso aos logs no acesso à proposta principal.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que o erro `400` é de fato um problema de resposta e não uma falha de validação de dados não reportada. Assume-se que o role do usuário no teste tem acesso à proposta, logo o erro de permissão é da política de RLS.
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deve validar que, após a correção, usuários de diferentes `roles` (`ATENDENTE`, `ANALISTA`) e de diferentes lojas (`loja_id`) só conseguem ver o histórico de auditoria das propostas que lhes pertencem, validando a eficácia da nova política de RLS.