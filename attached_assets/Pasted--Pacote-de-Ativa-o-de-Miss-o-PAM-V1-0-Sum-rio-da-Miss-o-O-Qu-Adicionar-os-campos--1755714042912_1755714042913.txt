### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Adicionar os campos de formulário para "Valor da TAC" (`tacValor`) e "Tipo de TAC" (`tacTipo`) ao componente de criação/edição de produtos (`ProdutoForm.tsx`).
* **Intenção Estratégica (O Porquê):** Expor a nova capacidade de configuração de TAC aos administradores do sistema, tornando a lógica de negócio que implementamos no backend controlável através da interface do usuário. Esta é a etapa que torna a nova funcionalidade utilizável.
* **Histórico Relevante (Consulta Obrigatória):** A FASE 0 (Passo 0.2) já preparou os schemas de validação Zod para estes novos campos. A auditoria inicial identificou o `ProdutoForm.tsx` como o componente correto a ser modificado.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de desenvolvimento de UI. O Agente irá modificar um componente React existente, adicionando novos campos de formulário que se conectarão ao `react-hook-form` e serão validados pelo schema Zod já atualizado.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** Os novos campos podem não se integrar corretamente ao estado do formulário ou à lógica de submissão.
    * **Contramedida:** O prompt exige o uso dos componentes `FormField` e `Controller` do `react-hook-form` e `shadcn/ui`, que são o padrão já estabelecido no projeto para garantir uma integração correta.

---

**IMPLEMENTAR:**
Expansão do Formulário de Produtos para Configuração de TAC

**CURRENT STATE:**
A auditoria confirmou que o formulário `ProdutoForm.tsx` não possui campos para que o administrador configure o `tacValor` ou o `tacTipo` de um produto.

**EXPECTED (Estado Final de Sucesso):**
1.  O arquivo `client/src/components/produtos/ProdutoForm.tsx` é modificado.
2.  Dois novos campos são adicionados ao formulário JSX, dentro da estrutura do `react-hook-form`:
    * Um `Input` numérico para "Valor da TAC".
    * Um `Select` (ou `RadioGroup`) para "Tipo de TAC", com as opções "Valor Fixo (R$)" e "Percentual (%)".
3.  Os novos campos estão corretamente vinculados ao estado do `react-hook-form` e são validados pelo schema Zod `insertProdutoSchema` que já foi atualizado.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Componente Alvo:** A modificação deve ser focada no arquivo `client/src/components/produtos/ProdutoForm.tsx`.
2.  **UI Consistente:** Utilize os componentes pré-existentes da biblioteca `shadcn/ui` (`FormField`, `FormLabel`, `Input`, `Select`, `SelectItem`, etc.) para construir os novos campos.
3.  **Integração com Formulário:** Os novos campos DEVEM ser envolvidos no componente `FormField` do `react-hook-form` para garantir a correta integração com o estado e a validação. O `name` de cada `FormField` deve corresponder às chaves no schema Zod (`tacValor` e `tacTipo`).

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o `ProdutoForm.tsx` já utiliza `react-hook-form` e o `zodResolver` com o `insertProdutoSchema`."]
* **VALIDAÇÃO PENDENTE:** [A validação final da submissão destes novos campos será o Passo 2.2.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro e os componentes exatos a serem modificados.
2.  Garantir que os novos campos de formulário estão corretamente integrados com o `react-hook-form`.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão visual do formulário e do código para confirmar a integração).
7.  **Documentar Decisões Técnicas**.