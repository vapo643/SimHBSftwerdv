# MISSÃO DE IMPLEMENTAÇÃO (ARQUITETURA FINAL): Reconstrução Completa do Sistema de Autorização

**CONTEXTO ESTRATÉGICO:**
Olá, Agente. Este prompt é o resultado final de um "Debate Máximo" de 4 interações. Ele contém a arquitetura definitiva e aprovada para a reconstrução completa do nosso sistema de autorização (RBAC). Siga cada fase com precisão absoluta para garantir uma implementação à prova de falhas.

**AÇÃO:**
Sua missão é executar uma refatoração profunda e sistemática no backend e frontend para implementar um sistema de permissões robusto e anti-falha.

**ROADMAP DE EXECUÇÃO (Sequencial):**

---
**FASE 1: RECONSTRUÇÃO DO BACKEND**

* **1.1:** Refatore completamente o ficheiro `/server/lib/jwt-auth-middleware.ts`. A nova implementação deve seguir a lógica de "Profile Enrichment": validar o token, buscar o perfil completo do usuário (com `JOIN`s), bloquear usuários "órfãos" com um erro `403`, estabelecer o contexto de RLS no PostgreSQL e, finalmente, anexar o perfil completo ao objeto `req.user`.
* **1.2:** Adicione os novos métodos `getUserProfileWithDetails` e `setUserContext` ao ficheiro `/server/storage.ts`.
* **1.3:** Atualize os nossos "role guards" (ex: `requireAdmin`) em `/server/lib/auth-guards.ts` para que eles validem a permissão usando a nova estrutura: `req.user.profile.role`.

---
**FASE 2: RECONSTRUÇÃO DO FRONTEND**

* **2.1:** Crie o novo `AuthProvider` reativo no ficheiro `/client/src/contexts/AuthContext.tsx`. Ele deve usar o listener `supabase.auth.onAuthStateChange` para detetar logins/logouts em tempo real e buscar o perfil do usuário para manter o estado global sempre atualizado.
* **2.2:** Implemente o hook `useAuth()` unificado (provavelmente em `/client/src/hooks/useAuth.ts`) com todos os "helpers" de verificação de permissão que projetamos (ex: `isAdmin()`, `canAccessPayments()`).
* **2.3:** Integre o `AuthProvider` no nosso ficheiro principal `/client/src/App.tsx`, envolvendo toda a estrutura de rotas.

---
**FASE 3: APLICAÇÃO DO CONTROLE DE VISIBILIDADE**

* **3.1:** Refatore completamente o nosso componente de layout `/client/src/components/DashboardLayout.tsx`. Ele deve usar o novo hook `useAuth()` para renderizar os links de navegação condicionalmente, com base na `role` e nas permissões do usuário logado.
* **3.2:** Crie o componente `ProtectedRoute.tsx` para proteger rotas inteiras com base numa `role` ou permissão necessária.

Execute este plano para entregar a nova arquitetura de autorização do Simpix.