### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Criar um script de "teardown" (limpeza) para o banco de dados de teste que delete dados em uma ordem que respeite as constraints de chave estrangeira, ou que use `TRUNCATE ... CASCADE`, para permitir que os testes de integração passem.
* **Intenção Estratégica (O Porquê):** Desbloquear nossa suíte de testes de integração, estabelecendo um ambiente de teste confiável e repetível. Sem um ciclo de `setup/teardown` funcional no banco de dados, a FASE 4 do roadmap está paralisada e a segurança contra regressões futuras está comprometida.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior (Passo 4.1) falhou porque a tentativa de limpar a tabela `propostas` antes de cada teste resultou em erros de "Foreign Key Violation", pois outras tabelas (`clientes`, `users`, `lojas`, etc.) dependem dela.
* **Modelo Mental (Como se Encaixa):** Esta missão cria uma ferramenta de infraestrutura de teste. O resultado será uma função helper (`cleanTestDatabase`) que será chamada no hook `beforeEach` de nossas suítes de teste de integração para garantir que cada teste comece com um banco de dados limpo e previsível.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O comando `TRUNCATE ... CASCADE` é poderoso e pode apagar mais dados do que o esperado se não for usado com cuidado.
    * **Contramedida:** A missão é estritamente focada no ambiente de teste. O Agente deve garantir que esta lógica só seja executada como parte da suíte de testes.

---

**IMPLEMENTAR:**
Script Robusto de Limpeza do Banco de Dados de Teste

**CURRENT STATE:**
Os testes de integração em `tests/integration/status-system.test.ts` estão falhando. O hook `beforeEach` tenta uma limpeza de banco de dados simplista que não respeita as dependências de chave estrangeira, causando a falha da suíte de testes antes mesmo de as asserções serem executadas.

**EXPECTED (Estado Final de Sucesso):**
1.  Uma nova função helper, `async function cleanTestDatabase()`, é criada em um arquivo apropriado (ex: `tests/lib/db-helper.ts`).
2.  Esta função implementa uma estratégia de limpeza que resolve o problema de chave estrangeira. A estratégia preferencial é usar o comando SQL `TRUNCATE "table1", "table2", ... RESTART IDENTITY CASCADE;`.
3.  O hook `beforeEach` no arquivo `tests/integration/status-system.test.ts` é refatorado para chamar a nova função `cleanTestDatabase()`.
4.  Após a refatoração, a execução do comando `npx vitest run tests/integration/status-system.test.ts` deve resultar em **TODOS os testes passando com sucesso**. Este é o principal critério de sucesso.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Analise o Schema:** Antes de escrever o script, analise o arquivo `shared/schema.ts` para identificar todas as tabelas que têm relações de chave estrangeira com `propostas`, `clientes`, `users`, e `lojas`.
2.  **Crie a Função Helper:** Crie um novo arquivo `tests/lib/db-helper.ts` e implemente a função `cleanTestDatabase`.
3.  **Implemente a Estratégia TRUNCATE:** A implementação deve usar `db.execute(sql`...`)` para executar um comando `TRUNCATE` em todas as tabelas relevantes, usando a opção `CASCADE` para lidar com as dependências e `RESTART IDENTITY` para resetar as sequências de IDs.
4.  **Refatore o Teste:** Modifique o arquivo `tests/integration/status-system.test.ts` para importar e usar `cleanTestDatabase` em seu hook `beforeEach`.
5.  **Validação Final Mandatória:** Execute a suíte de testes completa (`npx vitest run tests/integration/status-system.test.ts`) e inclua o output bem-sucedido em seu relatório final como prova de que o ambiente de teste foi desbloqueado.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que `TRUNCATE ... CASCADE` é a estratégia mais eficiente e segura para o ambiente de teste."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela passagem de 100% dos testes na suíte.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas.
2.  Garantir importações e tipos corretos.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (100%)** na correção do ambiente de teste.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a suíte de testes e garantir que todos passem).
7.  **Documentar Decisões Técnicas** como a escolha da estratégia de limpeza.