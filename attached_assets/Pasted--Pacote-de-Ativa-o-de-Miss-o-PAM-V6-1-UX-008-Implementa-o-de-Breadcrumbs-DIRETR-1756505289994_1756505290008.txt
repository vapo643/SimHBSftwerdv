### **Pacote de Ativação de Missão (PAM) V6.1 - UX-008 (Implementação de Breadcrumbs)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Implementar um componente de `Breadcrumbs` (navegação estrutural) dinâmico dentro do `DashboardLayout.tsx`, que exiba a trilha de navegação do usuário em páginas aninhadas.
* **Intenção Estratégica (O Porquê):** Melhorar a orientação e a navegabilidade do sistema. Breadcrumbs fornecem aos usuários uma consciência contextual de onde eles estão na hierarquia do site, reduzindo a carga cognitiva e permitindo uma navegação rápida para níveis superiores, o que é essencial em aplicações complexas.
* **Histórico Relevante (Consulta Obrigatória):** A análise heurística (`GL-002`) identificou a ausência de `Breadcrumbs` como uma melhoria de **ALTA** severidade para a experiência de navegação.

---

**IMPLEMENTAR:**
User Story UX-008: Implementar Componente de Navegação Breadcrumbs

**CONTEXT:**
Nossa auditoria de UX apontou que, à medida que o usuário navega para seções mais profundas da aplicação (ex: Dashboard > Propostas > Detalhe da Proposta), não há uma indicação visual clara de sua localização na hierarquia do sistema. Isso pode ser desorientador. Para resolver, implementaremos um componente de "breadcrumbs".

**CURRENT STATE:**
O componente `client/src/components/DashboardLayout.tsx` define a estrutura principal da página, incluindo o cabeçalho e a sidebar, mas não contém um componente ou lógica para renderizar breadcrumbs.

**EXPECTED (Estado Final de Sucesso):**
1.  **Breadcrumbs Visíveis:** Um componente de breadcrumbs deve ser exibido em uma posição proeminente, geralmente abaixo do cabeçalho principal, em todas as páginas internas do dashboard.
2.  **Geração Dinâmica:** Os breadcrumbs devem ser gerados dinamicamente com base na rota atual da URL.
    * Para a rota `/propostas`, deve exibir: `Início / Propostas`
    * Para a rota `/propostas/editar/ID-123`, deve exibir: `Início / Propostas / Editar Proposta`
3.  **Links Funcionais:** Cada item no breadcrumb (exceto o último) deve ser um link funcional que permita ao usuário navegar para o nível hierárquico correspondente.
4.  **Componente Reutilizável:** A lógica deve ser encapsulada em um componente `Breadcrumbs.tsx` reutilizável.
5.  **Prova de Sucesso:** Você deve fornecer um screenshot mostrando o novo componente de breadcrumbs em ação em uma página aninhada (como a de editar proposta).

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localizar Componente Alvo:** O componente principal a ser modificado para incluir os breadcrumbs é o `client/src/components/DashboardLayout.tsx`.
2.  **Criar Componente `Breadcrumbs`:** Crie um novo arquivo, `client/src/components/ui/breadcrumbs.tsx`. Este componente utilizará um hook do `wouter` (como `useLocation`) para obter o `pathname` atual.
3.  **Implementar Lógica de Mapeamento:** Dentro do componente `Breadcrumbs.tsx`, crie uma lógica que divida o `pathname` (ex: `pathname.split('/')`) e mapeie cada segmento da rota para um nome amigável e um link (ex: 'propostas' -> { name: 'Propostas', path: '/propostas' }).
4.  **Renderizar JSX:** Renderize a lista de segmentos de rota mapeados como uma lista de links, com separadores (ex: ' / '). Utilize os componentes de `Link` do `wouter`.
5.  **Integrar ao Layout Principal:** Importe e renderize o novo componente `Breadcrumbs` dentro do `DashboardLayout.tsx`, em um local apropriado (geralmente no topo da área de conteúdo principal).
6.  **Validar e Apresentar Evidência:** Teste a navegação em diferentes páginas e sub-páginas para garantir que os breadcrumbs se atualizam corretamente. Capture e apresente o screenshot do resultado final.
7.  **Verificação Final:** Execute o protocolo `7-CHECK FULL`.