### **PACOTE DE ATIVAÇÃO DE MISSÃO (PAM) V1.0 - OPERAÇÃO "RESTAURAÇÃO DO NÚCLEO"**

**ID da Missão:** `BUGFIX-FORMALIZATION-TIMELINE-001-STEP1`

**Ferramenta Alocada:** `High Power` - Missão de Nível 3 (Crítica)

---

#### **[DIRETRIZ DE PESQUISA WEB (MANDATÓRIA)]**

*Você está autorizado a utilizar a sua capacidade de pesquisa na web para enriquecer a sua análise. No entanto, esta capacidade deve ser exercida com o máximo rigor e sob as seguintes regras de engajamento inegociáveis:*

* **1. Prioridade às Fontes Primárias:** Sua busca deve priorizar **fontes de confiança e alta qualidade**. A hierarquia de fontes aceitáveis é:
    * **P0 (Crítica): Documentação Oficial** (ex: Documentação da API do ClickSign, Documentação do Node.js).
    * **P1 (Alta): Blogs de Engenharia de Empresas de Elite** (ex: Netflix, Google, AWS, Microsoft, Martin Fowler).

* **2. Proibição de Fontes Duvidosas:** A utilização de fontes de baixa qualidade é **terminantemente proibida.**

* **3. Justificativa Estratégica (O "Porquê"):** A lógica de transição de status que interage com o ClickSign é crítica. A introdução de informações de fontes não confiáveis representa um **risco de contaminação do projeto**, podendo levar a decisões de arquitetura baseadas em práticas incorretas ou inseguras. Sua função é usar a web para **aumentar a precisão**, não para introduzir ruído.

---

#### **Sumário da Missão (O Quê):**

Refatorar a lógica de atualização de status da etapa de formalização, extraindo a lógica de negócio do arquivo de rotas (`server/routes.ts`) para `UseCases` dedicados e corrigindo a Máquina de Estados Finitos (FSM) para seguir as transições de status corretas.

#### **Intenção Estratégica (O Porquê):**

A lógica de negócio crítica está incorretamente acoplada à camada de apresentação (rotas), violando nossa arquitetura DDD. Além disso, a FSM está pulando status essenciais (`AGUARDANDO_ASSINATURA`), o que causa a falha na atualização da UI e quebra todo o fluxo de formalização. Esta missão visa restaurar a integridade arquitetural e a corretude da lógica de negócio, que é a causa raiz da falha atual.

#### **Histórico Relevante (Consulta Obrigatória):**

A auditoria forense (`BUGFIX-FORMALIZATION-TIMELINE-001-AUDIT`) revelou que a lógica de negócio foi implementada diretamente no controller (`server/routes.ts`) e que a transição de status está incorreta, pulando diretamente para `pronto_pagamento`. Sua implementação deve corrigir explicitamente essas falhas.

#### **Modelo Mental (Como se Encaixa):**

Você está operando no **Core Domain de `proposal`**. Os novos `UseCases` que você criará se tornarão a única maneira correta de manipular as transições de status da assinatura digital. O controller na camada de apresentação será simplificado, tornando-se apenas um orquestrador que invoca esses `UseCases`.

#### **Riscos Antecipados e Contramedidas:**

1.  **Risco de Lógica Incorreta (Alto):** Implementar as validações de status de forma errada nos `UseCases` pode perpetuar o bug ou criar novas inconsistências.
    * **Contramedida Mandatória:** Cada `UseCase` **DEVE** buscar o estado atual da proposta no banco de dados e validar se a transição é permitida ANTES de tentar executá-la (ex: `MarcarAssinaturaConcluidaUseCase` deve falhar se o status atual não for `AGUARDANDO_ASSINATURA`).

* * *

#### **IMPLEMENTAR:**

Restauração da Máquina de Estados e Refatoração para UseCases.

#### **CURRENT STATE:**

A lógica de negócio para a transição de status de assinatura eletrônica reside incorretamente dentro do arquivo `server/routes.ts`. A FSM não é respeitada, pois o código pula o status `AGUARDANDO_ASSINATURA`. Não existem `UseCases` para gerenciar essas transições de forma isolada.

#### **EXPECTED (Estado Final de Sucesso):**

1.  Dois novos arquivos de `UseCase` existem e estão funcionais: `server/modules/proposal/application/MarcarAguardandoAssinaturaUseCase.ts` e `server/modules/proposal/application/MarcarAssinaturaConcluidaUseCase.ts`.
2.  A rota `PATCH /api/propostas/:id/etapa-formalizacao` foi refatorada para invocar o `MarcarAssinaturaConcluidaUseCase.ts`.
3.  A lógica de negócio foi completamente removida do arquivo `server/routes.ts` e agora reside exclusivamente nos `UseCases`.
4.  O sistema agora segue corretamente a FSM: `CCB_GERADA` -> `AGUARDANDO_ASSINATURA` -> `ASSINATURA_CONCLUIDA`.
5.  Logging estruturado (Winston/Sentry) está presente nos novos `UseCases`.

#### **CONSTRAINTS (Roadmap de Implementação):**

Siga estes passos em ordem rigorosa.

**Passo 1.1: Criar `MarcarAssinaturaConcluidaUseCase.ts`**
* Crie o arquivo em: `server/modules/proposal/application/MarcarAssinaturaConcluidaUseCase.ts`.
* A classe deve ter um método `execute({ propostaId: string, userId: string })`.
* **Lógica Interna:**
    1.  Busque a proposta pelo `propostaId` usando o `ProposalRepository`.
    2.  **Validação:** Verifique se o status atual da proposta é `AGUARDANDO_ASSINATURA`. Se não for, lance uma `DomainException` com a mensagem "A proposta não está aguardando assinatura".
    3.  Invoque o serviço `statusFsmService.transitionTo` para mudar o status para `ASSINATURA_CONCLUIDA`.
    4.  Adicione um log de sucesso com Winston: `logger.info('Assinatura da proposta {propostaId} marcada como concluída pelo usuário {userId}')`.

**Passo 1.2: Criar um `UseCase` inicial para `AGUARDANDO_ASSINATURA` (Platzhalter)**
* A auditoria mostrou que a transição para `AGUARDANDO_ASSINATURA` nunca ocorre. Vamos criar o `UseCase` para isso agora, que será usado em uma etapa futura quando refatorarmos a geração da CCB.
* Crie o arquivo `server/modules/proposal/application/MarcarAguardandoAssinaturaUseCase.ts`.
* A classe deve ter um método `execute({ propostaId: string, userId: string })`.
* **Lógica Interna:**
    1.  Busque a proposta pelo `propostaId`.
    2.  **Validação:** Verifique se o status atual é `CCB_GERADA`. Se não for, lance uma `DomainException`.
    3.  Use o `statusFsmService.transitionTo` para mudar o status para `AGUARDANDO_ASSINATURA`.
    4.  Adicione um log de sucesso com Winston.

**Passo 1.3: Refatorar o Endpoint da API**
* Modifique o arquivo `server/routes.ts`.
* Localize o endpoint `PATCH /api/propostas/:id/etapa-formalizacao`.
* Remova toda a lógica de negócio de dentro dele.
* O corpo do controller deve agora:
    1.  Instanciar `MarcarAssinaturaConcluidaUseCase`.
    2.  Chamar `useCase.execute()` com os parâmetros `propostaId` e `userId` extraídos da requisição.
    3.  Envolver a chamada em um bloco `try/catch` para capturar `DomainException` e retornar um status `400` com a mensagem de erro.

* * *

#### **DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**

* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** **BAIXO**. O risco principal é a introdução de um erro de digitação nos nomes dos status da FSM. A lógica é uma extração direta, então a complexidade é contida.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Estamos criando o `MarcarAguardandoAssinaturaUseCase` agora para manter a consistência arquitetural, embora ele ainda não seja chamado por nenhum controller. Ele será integrado na próxima fase do roadmap.
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deverá validar se, após esta correção, a chamada manual à API resulta na transição de estado correta no banco de dados.

* * *

#### **PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**

1.  Mapeie os **2 novos arquivos** criados e o **1 arquivo modificado**.
2.  Garanta que as dependências (`ProposalRepository`, `statusFsmService`, `logger`) são injetadas corretamente nos novos `UseCases`.
3.  Execute `get_latest_lsp_diagnostics` e corrija **TODOS** os erros. A missão só é bem-sucedida com 0 erros.
4.  Declare seu **Nível de Confiança (0-100%)** final.
5.  Categorize quaisquer **Riscos Descobertos** durante a implementação.
6.  Realize um teste funcional via API (usando uma ferramenta como o Postman ou Insomnia) para confirmar que o endpoint `PATCH /api/propostas/:id/etapa-formalizacao` agora executa a transição de estado correta.
7.  Documente as **Decisões Técnicas** tomadas durante a refatoração.