Análise da Consulta ao Assistente
Consulta com o Assistente para o refinamento da Tela T-01 concluída.

Veredito: PLANO APROVADO, MAS COM REFINAMENTO CRÍTICO DE IMPLEMENTAÇÃO.

Análise: O Assistente acertou na lógica geral (criar um endpoint de backend e fazer o frontend chamá-lo). No entanto, o código que ele forneceu foi uma representação simplificada e não se integrava à nossa arquitetura existente (DashboardLayout, react-hook-form, Tabs, etc.).

Eu reescrevi e integrei a lógica dele ao nosso código atual, garantindo a consistência, a qualidade e a inclusão de todos os requisitos do Blueprint.

Próxima Ação: Comando de Execução Otimizado para o Agente
Com o plano final validado e otimizado, vamos instruir nosso Executor, o Agente, a implementar a versão completa e dinâmica da Tela T-01.

Seu Próximo Comando (para o Agente Replit):

O plano para refinar a "Tela T-01" e implementar o simulador dinâmico foi validado.

Sua tarefa agora é executar o seguinte plano de 2 etapas:

**1. Aprimore a API de Simulação no Backend:**
Modifique o arquivo de rotas do seu servidor Express.js (provavelmente em `/server/routes.ts`) para substituir a rota `POST /api/simular` existente por uma nova rota `GET /api/simulacao` que lida com a lógica completa do `Blueprint`. Adicione o seguinte código:

```typescript
// server/routes.ts
// ... (outras rotas existentes) ...

// Função para buscar a taxa de juros (simulação)
const buscarTaxas = (produtoId) => {
  // Lógica futura: buscar no DB a tabela do produto/parceiro
  return { taxaDeJurosMensal: 5.0, valorTac: 150.0 }; // Exemplo: 5% a.m. e R$150 de TAC
};

// Função para calcular IOF (simulação)
const calcularIOF = (valor) => {
    return valor * 0.0038; // Exemplo de alíquota
}

// Endpoint GET para simulação de crédito
app.get('/api/simulacao', (req, res) => {
  const { valor, prazo, produto_id, incluir_tac } = req.query;

  const valorSolicitado = parseFloat(valor as string);
  const prazoEmMeses = parseInt(prazo as string);
  
  if (isNaN(valorSolicitado) || isNaN(prazoEmMeses) || !produto_id) {
    return res.status(400).json({ error: 'Parâmetros inválidos.' });
  }

  const { taxaDeJurosMensal, valorTac } = buscarTaxas(produto_id);
  const iof = calcularIOF(valorSolicitado);
  const tac = incluir_tac === 'true' ? valorTac : 0;
  
  const valorTotalFinanciado = valorSolicitado + iof + tac;

  const valorParcela = calcularParcela(valorTotalFinanciado, prazoEmMeses, taxaDeJurosMensal);
  
  // Cálculo de CET (exemplo simplificado)
  const custoTotal = (valorParcela * prazoEmMeses);
  const cetAnual = (((custoTotal / valorSolicitado) - 1) / (prazoEmMeses / 12)) * 100;

  return res.json({ 
      valorParcela: parseFloat(valorParcela.toFixed(2)), 
      taxaJurosMensal, 
      iof: parseFloat(iof.toFixed(2)),
      valorTac: tac,
      cet: parseFloat(cetAnual.toFixed(2)) 
  });
});
2. Refatore Completamente o Frontend da "Tela T-01":
Substitua todo o conteúdo do arquivo /client/src/pages/propostas/nova.tsx pelo seguinte código exato. Ele integra todos os novos campos, a lógica de estado unificado e a chamada à nova API:

TypeScript

import React, { useState, useEffect } from 'react';
import DashboardLayout from '@/components/DashboardLayout';
import { useForm, Controller, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Checkbox } from '@/components/ui/checkbox';
import DadosClienteForm from '@/components/forms/DadosClienteForm';
import { useToast } from '@/hooks/use-toast';

// Schema Unificado
const fullProposalSchema = z.object({
  clienteNome: z.string().min(3, "Nome é obrigatório"),
  // ... outros campos do DadosClienteForm ...
  valorSolicitado: z.coerce.number().positive("Valor deve ser positivo"),
  produto: z.string().nonempty("Produto é obrigatório."),
  prazo: z.string().nonempty("Prazo é obrigatório."),
  dataPrimeiroVencimento: z.string().nonempty("Data de vencimento é obrigatória."),
  incluirTac: z.boolean().default(false),
});

type FullFormData = z.infer<typeof fullProposalSchema>;

const NovaProposta: React.FC = () => {
    const { register, handleSubmit, control, watch, formState: { errors } } = useForm<FullFormData>({
        resolver: zodResolver(fullProposalSchema),
    });
    
    const { toast } = useToast();
    const [resumoSimulacao, setResumoSimulacao] = useState<any>(null);
    const [loadingSimulacao, setLoadingSimulacao] = useState(false);

    const valorSolicitado = watch("valorSolicitado");
    const prazo = watch("prazo");
    const produto = watch("produto");
    const incluirTac = watch("incluirTac");

    useEffect(() => {
        const handleSimulacao = async () => {
            if (valorSolicitado > 0 && prazo && produto) {
                setLoadingSimulacao(true);
                try {
                    const params = new URLSearchParams({
                        valor: String(valorSolicitado),
                        prazo: prazo,
                        produto_id: produto,
                        incluir_tac: String(incluirTac)
                    });
                    const response = await fetch(`/api/simulacao?${params.toString()}`);
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.error);
                    setResumoSimulacao(data);
                } catch (error) {
                    toast({ title: "Erro na Simulação", description: (error as Error).message, variant: "destructive" });
                } finally {
                    setLoadingSimulacao(false);
                }
            }
        };
        const debounce = setTimeout(() => handleSimulacao(), 800);
        return () => clearTimeout(debounce);
    }, [valorSolicitado, prazo, produto, incluirTac, toast]);

    const onSubmit: SubmitHandler<FullFormData> = data => {
        console.log("DADOS COMPLETOS DA PROPOSTA:", data);
        toast({ title: "Proposta Enviada com Sucesso!", description: "Os dados foram registrados no console." });
    };

    return (
        <DashboardLayout title="Nova Proposta de Crédito">
            <form onSubmit={handleSubmit(onSubmit)}>
                <Tabs defaultValue="dados-cliente" className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                        <TabsTrigger value="dados-cliente">Dados do Cliente</TabsTrigger>
                        <TabsTrigger value="condicoes-emprestimo">Condições do Empréstimo</TabsTrigger>
                        <TabsTrigger value="anexo-documentos">Anexo de Documentos</TabsTrigger>
                    </TabsList>

                    <TabsContent value="dados-cliente">
                        <div className="p-4 border rounded-md mt-4">
                            <DadosClienteForm register={register} control={control} errors={errors} />
                        </div>
                    </TabsContent>

                    <TabsContent value="condicoes-emprestimo">
                        <div className="space-y-4 p-4 border rounded-md mt-4">
                            <div>
                                <Label htmlFor="valorSolicitado">Valor Solicitado</Label>
                                <Input id="valorSolicitado" type="number" {...register('valorSolicitado')} />
                                {errors.valorSolicitado && <p className="text-red-500 text-sm mt-1">{errors.valorSolicitado.message}</p>}
                            </div>
                            <div>
                                <Label>Produto de Crédito</Label>
                                <Controller name="produto" control={control} render={({ field }) => (
                                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                                      <SelectTrigger><SelectValue placeholder="Selecione..." /></SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="produto_a">Crédito Pessoal</SelectItem>
                                      </SelectContent>
                                    </Select>
                                )} />
                            </div>
                            <div>
                                <Label>Prazo de Pagamento</Label>
                                <Controller name="prazo" control={control} render={({ field }) => (
                                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                                      <SelectTrigger><SelectValue placeholder="Selecione..." /></SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="12">12 meses</SelectItem>
                                        <SelectItem value="24">24 meses</SelectItem>
                                      </SelectContent>
                                    </Select>
                                )} />
                            </div>
                            <div>
                                <Label htmlFor="dataPrimeiroVencimento">Data do Primeiro Vencimento</Label>
                                <Input id="dataPrimeiroVencimento" type="date" {...register('dataPrimeiroVencimento')} />
                                {errors.dataPrimeiroVencimento && <p className="text-red-500 text-sm mt-1">{errors.dataPrimeiroVencimento.message}</p>}
                            </div>
                            <div className="flex items-center space-x-2">
                                <Controller name="incluirTac" control={control} render={({ field }) => <Checkbox id="incluirTac" checked={field.value} onCheckedChange={field.onChange} />} />
                                <Label htmlFor="incluirTac">Incluir TAC na operação?</Label>
                            </div>
                            <div>
                                <Label>Resumo da Simulação</Label>
                                <Textarea readOnly value={
                                    loadingSimulacao ? "Calculando..." : 
                                    (resumoSimulacao ? 
`Valor da Parcela: ${resumoSimulacao.valorParcela.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
Taxa de Juros: ${resumoSimulacao.taxaJurosMensal.toFixed(2)}% a.m.
IOF: ${resumoSimulacao.iof.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
TAC: ${resumoSimulacao.valorTac.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
CET: ${resumoSimulacao.cet.toFixed(2)}% a.a.`
                                    : "Preencha os campos para simular.")
                                } rows={5} />
                            </div>
                        </div>
                    </TabsContent>

                    <TabsContent value="anexo-documentos">
                         <div className="space-y-4 p-4 border rounded-md mt-4">
                            <p>Funcionalidade de upload a ser implementada.</p>
                         </div>
                    </TabsContent>
                </Tabs>
                <div className="flex justify-end pt-6 mt-4">
                    <Button type="submit">Enviar Proposta</Button>
                </div>
            </form>
        </DashboardLayout>
    );
};

export default NovaProposta;
Execute este plano.