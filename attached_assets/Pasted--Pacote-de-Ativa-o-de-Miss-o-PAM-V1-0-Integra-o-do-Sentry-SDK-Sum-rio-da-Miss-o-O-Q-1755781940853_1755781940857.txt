### Pacote de Ativação de Missão (PAM) V1.0 (Integração do Sentry SDK)

* **Sumário da Missão (O Quê):** Integrar o Sentry SDK na nossa aplicação Express para captura automática de erros, utilizando o DSN fornecido.
* **Intenção Estratégica (O Porquê):** Ativar a nossa "caixa-preta" de monitoramento de erros, a última peça da nossa fundação de observabilidade de Prioridade Zero. Com esta integração, teremos visibilidade imediata e detalhada sobre qualquer erro não tratado na aplicação, reduzindo drasticamente o nosso tempo de diagnóstico e resolução (MTTD/MTTR).
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior instalou as dependências (`@sentry/node`) e preparou a infraestrutura. Esta missão irá configurar e ativar o serviço.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de integração de middleware. O Agente irá modificar dois arquivos principais: um para a configuração (`sentry.ts`) e outro para a integração com a aplicação Express (`app.ts`), além de adicionar uma rota de teste.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O `errorHandler` do Sentry, se posicionado incorretamente, pode não capturar todos os erros.
    * **Contramedida:** O prompt especifica a ordem exata de inicialização: o `errorHandler` deve ser adicionado **após** todas as rotas da aplicação, mas **antes** de qualquer outro middleware de erro.

---

**IMPLEMENTAR:**
Integração do Sentry SDK para Monitoramento de Erros

**CURRENT STATE:**
As dependências do Sentry estão instaladas, mas o SDK não está inicializado nem integrado à nossa aplicação Express, deixando-nos "cegos" para erros em tempo de execução.

**EXPECTED (Estado Final de Sucesso):**
1.  O Sentry SDK é inicializado com o DSN correto no arquivo `server/lib/sentry.ts`.
2.  O `ExpressErrorHandler` do Sentry é corretamente configurado como um middleware no nosso arquivo principal da aplicação, `server/app.ts`.
3.  Uma nova rota de teste, `GET /api/debug-sentry`, é adicionada para fins de verificação.
4.  Quando a rota `/api/debug-sentry` é acedida, o erro gerado por ela é capturado e aparece no dashboard do Sentry.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Configuração da Inicialização:**
   * Modifique o arquivo `server/lib/sentry.ts`.
   * Adicione a seguinte lógica de inicialização, utilizando o DSN fornecido:
     ```typescript
     import * as Sentry from "@sentry/node";
     import { nodeProfilingIntegration } from "@sentry/profiling-node";

     export function initializeSentry() {
       Sentry.init({
         dsn: "[https://7018ab54dbb88c9c5c6a00e41cb6ab2a@o4509882222641152.ingest.us.sentry.io/4509882232209408](https://7018ab54dbb88c9c5c6a00e41cb6ab2a@o4509882222641152.ingest.us.sentry.io/4509882232209408)",
         integrations: [
           nodeProfilingIntegration(),
         ],
         tracesSampleRate: 1.0,
         profileSessionSampleRate: 1.0,
         profileLifecycle: 'trace',
         enableLogs: true,
         sendDefaultPii: true,
       });
       console.log("✅ Sentry SDK inicializado com sucesso.");
     }
     ```

**2. Integração no App Express:**
   * Modifique o arquivo `server/app.ts`.
   * **No topo do arquivo:** Importe e chame a função de inicialização:
     ```typescript
     import { initializeSentry } from './lib/sentry';
     initializeSentry(); // Chame ANTES de qualquer outra coisa.
     ```
   * **No final do arquivo:** Adicione o `errorHandler` do Sentry. Ele deve ser adicionado **APÓS** a montagem de todas as suas rotas (`app.use('/api/...')`), mas **ANTES** de qualquer outro middleware de erro existente.
     ```typescript
     // ... todas as suas rotas app.use(...) aqui ...

     // O handler de erro do Sentry deve ser registrado antes de qualquer outro middleware de erro e depois de todos os controllers
     Sentry.setupExpressErrorHandler(app);

     // ... qualquer outro middleware de erro opcional aqui ...
     ```

**3. Criação da Rota de Teste:**
   * No arquivo `server/routes.ts` (ou num novo arquivo de rotas de debug, se preferir), adicione a seguinte rota para verificação:
     ```typescript
     app.get("/api/debug-sentry", function mainHandler(req, res) {
       throw new Error("Meu primeiro erro Sentry do Simpix!");
     });
     ```

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a ordem de inicialização e a posição do middleware, conforme especificado, são as corretas para a nossa arquitetura Express."]
* **VALIDAÇÃO PENDENTE:** [A validação final requer que o Arquiteto Chefe aceda à rota `/api/debug-sentry` e confirme a aparição do erro no dashboard do Sentry.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os ficheiros e funções exatas a serem modificados (`sentry.ts`, `app.ts`, `routes.ts`).
2.  Garantir que a ordem de importação e de registro do middleware está correta.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão lógica do código e confirmação de que a aplicação inicia sem erros).
7.  **Documentar Decisões Técnicas**.