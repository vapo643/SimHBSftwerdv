### Pacote de Ativação de Missão (PAM) V1.0 - Operação "Certificação de Produção" / Missão 1: Remediação de Autenticação

* **Sumário da Missão (O Quê):** Realizar uma auditoria de causa raiz e, em seguida, remediar os estrangulamentos no sistema de autenticação que estão a causar falhas de *rate limiting* (`429`) e de validação de token (`401`) sob carga concorrente.
* **Intenção Estratégica (O Porquê):** Desbloquear a capacidade do sistema de servir múltiplos utilizadores simultaneamente. A estabilidade da autenticação sob carga é o *quality gate* P0 que precede todos os outros testes de performance e funcionalidade.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de segurança (AppSec) e de performance (SRE) a diagnosticar e a resolver um problema complexo de concorrência na camada de autenticação.

---
### **DOUTRINA DE EXECUÇÃO OBRIGATÓRIA: PEO V2.0**
* **MODO DE OPERAÇÃO:** Esta missão começa em **MODO_PLANEJAMENTO** (para a auditoria) e depois transita para **MODO_EXECUÇÃO** (para a remediação).
* **PERSONA:** "Arquiteto Documentador", depois "Executor de Elite".
* **VALIDAÇÃO (7-CHECK ADAPTATIVO):** O risco desta missão é **CRÍTICO**. Execute o **"7-CHECK FULL"** na validação final.
---

**IMPLEMENTAR (Plano de Auditoria e Remediação):**

**FASE 1: AUDITORIA (MODO_PLANEJAMENTO)**

**Passo 1.1: Auditoria do Rate Limiting Duplo**
* Inspecione os ficheiros `server/lib/security-config.ts` (para o `authApiLimiter`) e `server/lib/jwt-auth-middleware.ts` (para o `checkAuthRateLimit`).
* Analise como estas duas camadas de *rate limiting* interagem. Elas são redundantes? O *rate limit* distribuído no Redis está a funcionar como esperado?
* **Entregável:** Um diagnóstico sobre a causa da falha do *rate limiting* e uma proposta de solução (ex: remover uma das camadas ou ajustar os *thresholds*).

**Passo 1.2: Análise Profunda da Validação de Token**
* Inspecione o fluxo de validação de token no `jwt-auth-middleware.ts`, focando na chamada a `supabase.auth.getUser(token)` e na interação com o cache Redis.
* **Entregável:** Uma hipótese tecnicamente fundamentada sobre por que tokens válidos estão a ser rejeitados intermitentemente sob carga (ex: *race conditions*, problemas de *cache invalidation*, expiração de token).

**FASE 2: REMEDIAÇÃO (MODO_EXECUÇÃO)**

**Passo 2.1: Implementar as Correções**
* Com base no seu diagnóstico da Fase 1, implemente as correções necessárias no código para resolver os problemas de *rate limiting* e validação de token.

**Passo 2.2: Validação Final (Execução do 7-CHECK FULL)**
* Execute o checklist completo do 7-CHECK FULL, incluindo um teste funcional (um `curl` bem-sucedido no fluxo de login) e a documentação das decisões tomadas.
* Gere o "Relatório de Execução V2 com Prova".

---
### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**
Apresente a lista exaustiva de TODAS as suas descobertas, hipóteses e o plano de remediação.