### Pacote de Ativação de Missão (PAM) V1.0 (Hotfix de Autorização de Teste - RLS)

* **Sumário da Missão (O Quê):** Refatorar o helper de setup de teste (`setupTestEnvironment`) para garantir que o usuário de teste criado possua os atributos e as relações (ex: associação a uma `loja`) necessários para satisfazer as políticas de Row Level Security (RLS) da tabela `propostas`.
* **Intenção Estratégica (O Porquê):** Resolver o bloqueador final (`403 Forbidden`) da nossa suíte de testes de integração, garantindo que os nossos testes possam operar num ambiente seguro e realista que espelha as permissões de produção.
* **Histórico Relevante (Consulta Obrigatória):** A sua missão anterior confirmou que a infraestrutura de teste está funcional, mas os testes falham com erros `403 Forbidden` porque o usuário de teste não satisfaz as políticas de RLS ao tentar criar propostas.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Segurança de Testes. Sua tarefa é modificar a forma como os dados de teste são criados (`setup`) para que eles cumpram as regras de segurança do sistema que está a ser testado.

---

**IMPLEMENTAR:**
Correção do Setup de Usuário de Teste para Conformidade com RLS

**CURRENT STATE:**
A função `setupTestEnvironment` cria um usuário de teste, mas este usuário não possui as associações necessárias (como pertencer a uma `loja`) para passar nas verificações de RLS ao tentar criar uma `proposta`, resultando em erros `403 Forbidden`.

**EXPECTED (Estado Final de Sucesso):**
1.  **Auditoria das Políticas RLS:** Primeiro, inspecione as políticas de RLS na tabela `propostas` (provavelmente definidas em um script de migração SQL) para entender exatamente quais condições um usuário deve satisfazer para poder inserir um novo registro.
2.  **Refatoração do `setupTestEnvironment`:** Modifique a função em `tests/lib/db-helper.ts` para que, além de criar o usuário, ela também crie os registros associados necessários (ex: uma `loja`, um `parceiro`, e a associação do usuário a essa loja).
3.  **Validação Final Irrefutável:** A execução do comando `npx vitest run tests/integration/proposal-api.test.ts` agora resulta na passagem de **TODOS** os testes, provando que o bloqueio de autorização foi resolvido.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Auditoria Primeiro:** Comece por encontrar e apresentar a política de RLS de `INSERT` na tabela `propostas`.
2.  **Setup Completo:** Garanta que o `setupTestEnvironment` crie todos os dados pai necessários para satisfazer as chaves estrangeiras (`foreign keys`) E as políticas de RLS.
3.  **Validação Final Mandatória:** A prova de sucesso é o output do `vitest` a mostrar todos os testes da suíte `proposal-api.test.ts` a passar.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a política de RLS exige que um usuário esteja associado a uma `loja` para poder criar uma proposta."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. O sucesso é definido pela passagem de 100% dos testes de integração.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os ficheiros e políticas a serem analisados e modificados.
2.  Garantir que a lógica de criação de dados no `setupTestEnvironment` satisfaz as políticas de RLS.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar a suíte de testes completa e garantir que todos passem).
7.  **Documentar Decisões Técnicas**.