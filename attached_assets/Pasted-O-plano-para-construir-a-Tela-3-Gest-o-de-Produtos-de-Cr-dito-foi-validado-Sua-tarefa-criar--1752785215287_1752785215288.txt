O plano para construir a "Tela 3 - Gestão de Produtos de Crédito" foi validado.

Sua tarefa é criar esta nova funcionalidade. Execute o seguinte plano de 3 etapas:

**1. Crie a Página:**
Crie um novo arquivo no caminho `/client/src/pages/configuracoes/produtos.tsx` e cole o seguinte código exato dentro dele:

```typescript
import React, { useState } from 'react';
import DashboardLayout from '@/components/DashboardLayout';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableHeader, TableRow, TableCell, TableHead } from '@/components/ui/table';
import { Card, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';

interface Produto {
  id: number;
  nome: string;
  status: 'Ativo' | 'Inativo';
  emUso: boolean; // Adicionado para a lógica de exclusão
}

const mockProdutos: Produto[] = [
  { id: 1, nome: 'Crédito Pessoal', status: 'Ativo', emUso: true },
  { id: 2, nome: 'Crédito Imobiliário', status: 'Inativo', emUso: false },
  { id: 3, nome: 'Crédito Consignado', status: 'Ativo', emUso: false },
];

const ProdutosPage: React.FC = () => {
  const { toast } = useToast();
  const [produtos, setProdutos] = useState<Produto[]>(mockProdutos);

  const handleDelete = (id: number) => {
    const produto = produtos.find(p => p.id === id);
    if (produto?.emUso) {
      toast({
        title: "Ação Bloqueada",
        description: "Este produto não pode ser excluído pois está vinculado a propostas.",
        variant: "destructive",
      });
    } else {
      setProdutos(produtos.filter(p => p.id !== id));
      toast({
        title: "Sucesso",
        description: "Produto excluído com sucesso.",
      });
    }
  };

  return (
    <DashboardLayout title="Gestão de Produtos de Crédito">
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">Produtos de Crédito</h1>
          <Button>Novo Produto</Button>
        </div>
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Nome do Produto</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Ações</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {produtos.map(produto => (
                  <TableRow key={produto.id}>
                    <TableCell className="font-medium">{produto.nome}</TableCell>
                    <TableCell>{produto.status}</TableCell>
                    <TableCell className="text-right space-x-2">
                      <Button variant="outline" size="sm">Editar</Button>
                      <Button variant="destructive" size="sm" onClick={() => handleDelete(produto.id)} disabled={produto.emUso}>
                        Excluir
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
};

export default ProdutosPage;
2. Adicione a Rota:
Modifique o arquivo /client/src/App.tsx para adicionar a nova rota para a página de produtos, garantindo que seja uma rota protegida.

3. Adicione o Link de Navegação:
Modifique o arquivo /client/src/components/DashboardLayout.tsx para adicionar um novo item de menu chamado "Produtos" no array navigation, que aponte para a nova rota.

Execute este plano.