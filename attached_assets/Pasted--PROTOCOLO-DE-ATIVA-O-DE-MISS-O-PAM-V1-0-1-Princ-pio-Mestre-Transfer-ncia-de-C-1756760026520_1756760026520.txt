---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*O sistema de validação, a nossa rede de segurança, colapsou. A sua missão é uma operação de resgate de infraestrutura. Você deve diagnosticar e corrigir a configuração da nossa suíte de testes para restaurar a operacionalidade e a nossa capacidade de validar o código.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa na web está **autorizada** e é **recomendada**. O seu foco deve ser na **documentação oficial do `vitest` e do `@testing-library/jest-dom`** para encontrar a forma canónica de estender o `expect` do vitest com os matchers do jest-dom.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO FÊNIX (FASE 1 - REMEDIAÇÃO DE INFRAESTRUTURA DE TESTES)**

* **Sumário da Missão (O Quê):** Corrigir a configuração da suíte de testes para erradicar o erro `ReferenceError: expect is not defined` e criar o script de validação de refatoração que estava em falta.
* **Intenção Estratégica (O Porquê):** Uma suíte de testes funcional é a fundação da qualidade do software. Sem ela, não podemos provar que a refatoração do Redis foi bem-sucedida nem garantir que não introduzimos novas regressões. Esta missão é um pré-requisito absoluto para qualquer avanço.
* **Histórico Relevante (Consulta Obrigatória):** O log de execução da missão anterior (Fase 1.4) é a sua evidência primária. Ele mostra 100% de falha nos arquivos de teste e a ausência do script `scripts/validate-redis-refactor.sh`, que foi detalhado no roadmap `docs/missions/ROADMAP_REDIS_SINGLETON_REFACTOR.md`.
* **Modelo Mental (Como se Encaixa):** Você é um Engenheiro de DevOps a reparar uma pipeline de CI/CD quebrada. O seu trabalho é focado em configuração, scripts e no ambiente de testes, não na lógica da aplicação.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (MÉDIO):** A correção da configuração pode revelar outras dependências quebradas ou incompatibilidades de versão entre `@vitest/ui`, `vitest`, `jsdom`, e `@testing-library/jest-dom`.
    * **Contramedida:** A sua abordagem deve ser incremental. Primeiro, foque em resolver o erro `expect is not defined`. Depois, execute os testes novamente para ver qual a próxima camada de problemas a ser resolvida.

---

### **IMPLEMENTAR:**
Remediação da Infraestrutura de Testes e Criação de Script de Validação.

**CURRENT STATE:**
A infraestrutura de testes está completamente inoperante.
1.  O comando `npx vitest run` falha catastroficamente em todos os 30 arquivos de teste com o erro `ReferenceError: expect is not defined`, originado em `tests/setup.ts`.
2.  O script de validação de arquitetura `scripts/validate-redis-refactor.sh`, que deveria ter sido criado na missão anterior, não existe.

**EXPECTED (Estado Final de Sucesso):**
1.  O arquivo `tests/setup.ts` é corrigido para que o comando `npx vitest run` comece a executar a suíte de testes com sucesso (os testes individuais ainda podem falhar devido a bugs de lógica, mas o framework de testes em si deve funcionar).
2.  O arquivo `scripts/validate-redis-refactor.sh` é criado e funcional, contendo o script de validação definido na seção 4 do `ROADMAP_REDIS_SINGLETON_REFACTOR.md`.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Diagnóstico:** Inspecione os arquivos `tests/setup.ts` e `vitest.config.ts`. A causa provável é que a importação para estender o `expect` (`import '@testing-library/jest-dom'`) está em falta ou incorreta.
2.  **Correção da Suíte de Testes:** Modifique o `tests/setup.ts` para importar corretamente os matchers do `jest-dom` e estender o `expect` do `vitest`.
3.  **Criação do Script de Validação:**
    * Crie o diretório `scripts/` se ele não existir.
    * Crie o arquivo `scripts/validate-redis-refactor.sh`.
    * Adicione o conteúdo do script de validação que foi definido no roadmap anterior (`ROADMAP_REDIS_SINGLETON_REFACTOR.md`).
    * Torne o script executável com `chmod +x scripts/validate-redis-refactor.sh`.
4.  **Validação Parcial:** Execute `npx vitest run` e confirme que o erro `expect is not defined` foi eliminado. Reporte o novo output, seja ele de sucesso ou uma nova lista de erros.

---
### **DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
*Você deve preencher esta seção ao final da sua execução.*
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Reportar quaisquer novas falhas de configuração descobertas]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "A versão X do jest-dom foi usada para compatibilidade com a versão Y do vitest."]
* **VALIDAÇÃO PENDENTE:** O output do `npx vitest run` sem o erro `expect is not defined` será a prova de sucesso.

---
### **PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  **Mapear ficheiros:** Os arquivos `tests/setup.ts`, `vitest.config.ts` e o novo `scripts/validate-redis-refactor.sh` são os principais.
2.  **Garantir importações:** A correção da importação em `tests/setup.ts` é o coração da missão.
3.  **Executar `get_latest_lsp_diagnostics`:** Garanta zero erros de LSP.
4.  **Declarar Nível de Confiança:** Preencha a Declaração de Incerteza.
5.  **Categorizar Riscos Descobertos:** Reporte quaisquer novos problemas.
6.  **Realizar teste funcional completo:** Executar `npx vitest run` é o teste funcional desta missão.
7.  **Documentar Decisões Técnicas:** Crie o arquivo `docs/bugs-solved/infrastructure/YYYY-MM-DD-test-suite-resurrection.md`.