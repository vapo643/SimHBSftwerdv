**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Construir a base da "Tela de Cobranças", garantindo que ela exiba a lista correta de propostas e forneça as ferramentas de visualização essenciais (Carnê PDF, PIX, Linha Digitável) para a equipe.
* **Intenção Estratégica (O Porquê):** A equipe de cobranças precisa de um dashboard central para gerenciar seu trabalho. Esta primeira fase visa fornecer a visão de dados fundamental sobre a qual construiremos as funcionalidades de tempo real e de ação.
* **Histórico Relevante (Consulta Obrigatória):** Já implementamos com sucesso a geração de boletos em lote e o download de carnês. Agora vamos consumir esses artefatos em uma nova tela operacional. O endpoint que gera a URL do carnê já existe e deve ser reutilizado.
* **Modelo Mental (Como se Encaixa):** Esta nova tela (`/cobrancas`) será um dashboard operacional. O backend fornecerá uma lista de propostas que estão oficialmente "em cobrança". O frontend renderizará isso em uma tabela, onde cada linha representa um cliente/proposta e oferece as ferramentas necessárias para a cobrança.
* **Riscos Antecipados:** **Risco:** A query para definir uma proposta como "em cobrança" pode ser complexa. **Contramedida:** A regra de negócio será definida de forma explícita e inequívoca neste prompt.

---

**IMPLEMENTAR:**
A fundação da "Tela de Cobranças", incluindo o backend para buscar os dados corretos e o frontend para exibi-los em uma tabela com as ferramentas de visualização.

**CURRENT STATE:**
A "Tela de Cobranças" não existe ou é um placeholder.

**EXPECTED (Estado Final de Sucesso):**
1.  Uma nova página/rota segura (`/cobrancas`) acessível apenas para as roles `COBRANCA` e `ADMIN`.
2.  A página exibe uma tabela com todas as propostas que atendem à regra de negócio para "em cobrança".
3.  A tabela possui colunas como `Nº da Proposta`, `Nome do Cliente`, `Status Geral da Dívida`.
4.  Cada linha da tabela possui um menu de "Ações" com botões/links para:
    - "Ver/Baixar Carnê" (usando a funcionalidade já implementada).
    - "Copiar PIX" (da primeira parcela pendente).
    - "Copiar Linha Digitável" (da primeira parcela pendente).

**CONSTRAINTS (Roadmap de Implementação):**

**1. Backend - A Query Principal:**
    - **Ação:** Crie um novo endpoint `GET /api/cobrancas`.
    - **Regra de Negócio:** A query Drizzle para este endpoint deve buscar todas as propostas que atendam a **AMBAS** as seguintes condições:
        a. `assinaturaEletronicaConcluida` na tabela `propostas` é `true`.
        b. `EXISTS` um registro correspondente na tabela `inter_collections` para aquela proposta.

**2. Frontend - A Tabela de Cobranças:**
    - **Ação:** Crie o componente React para a nova página `/cobrancas`.
    - **Implementação:** Use `TanStack Query` para chamar o novo endpoint. Renderize os dados em uma tabela com paginação. Proteja a rota para que apenas as roles autorizadas possam acessá-la.

**3. Frontend - As Ferramentas de Ação:**
    - **Ação:** Implemente a lógica para os botões de ação de visualização.
    - **Implementação:** O botão "Ver/Baixar Carnê" deve chamar o endpoint que já criamos para isso. Os botões de "Copiar" devem copiar para a área de transferência do usuário as informações relevantes da primeira parcela em aberto.

**PROTOCOLO OBRIGATÓRIO 5-CHECK:**
1.  Mapear todos os arquivos (backend e frontend) a serem criados/modificados.
2.  Implementar primeiro a lógica do backend (query e endpoint) e depois o frontend.
3.  Executar `get_latest_lsp_diagnostics`.
4.  Realizar testes com um usuário `COBRANCA` (acesso permitido) e um `ATENDENTE` (acesso negado).
5.  O critério final de sucesso é uma tela funcional que exibe a lista correta de propostas e cujos botões de visualização funcionam perfeitamente.