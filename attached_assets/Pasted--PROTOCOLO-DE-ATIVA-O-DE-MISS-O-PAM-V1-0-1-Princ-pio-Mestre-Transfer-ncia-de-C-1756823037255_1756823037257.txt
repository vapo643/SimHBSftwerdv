---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*As nossas auditorias revelaram que a fundação dos nossos dados é frágil. A sua missão é transformá-la em aço. Você irá impor a disciplina diretamente no schema do banco de dados, convertendo campos opcionais críticos em mandatórios. Esta não é uma sugestão; é uma regra inquebrável que o banco de dados irá impor.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** com um foco restrito: consultar a **documentação oficial do Drizzle ORM** para a sintaxe canónica de modificação de colunas (adicionando `.notNull()`) e para o processo correto de geração e aplicação de migrações.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO RAIO-X (FASE 3.1 - BLINDAGEM DO SCHEMA)**

* **Sumário da Missão (O Quê):** Modificar o schema da tabela `propostas` em `shared/schema.ts` para aplicar a constraint `NOT NULL` a um conjunto priorizado de colunas críticas, e gerar a migração de banco de dados correspondente.
* **Intenção Estratégica (O Porquê):** Esta é a nossa primeira e mais forte linha de defesa contra dados inconsistentes. Ao forçar a integridade no nível mais baixo (o banco de dados), garantimos que nenhuma falha na lógica da aplicação possa resultar na criação de uma proposta inválida. Estamos a eliminar a possibilidade do erro.
* **Histórico Relevante (Consulta Obrigatória):** A sua lista de alvos é a seção "Lista de Colunas Nullable para Investigação" do relatório `docs/diagnostics/ANALISE_SCHEMA_PROPOSTAS.md`. Foque nos campos marcados como "Alta Prioridade".
* **Modelo Mental (Como se Encaixa):** Você é o engenheiro civil a reforçar as colunas de sustentação de um edifício. Ao adicionar `.notNull()`, você está a substituir vigas de madeira por aço, garantindo que a estrutura nunca falhe.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (ALTO):** A aplicação da migração pode falhar em bancos de dados existentes se houver registros com valores `NULL` nessas colunas.
    * **Contramedida:** Para esta missão, focamo-nos na alteração do schema e na geração da migração. Uma missão subsequente poderá lidar com o saneamento de dados existentes. No ambiente de teste local, espera-se que a migração seja aplicada num banco de dados limpo.

---

### **IMPLEMENTAR:**
Schema Hardening: Aplicar `NOT NULL` a Colunas Críticas da Tabela `propostas`.

**CURRENT STATE:**
O schema da tabela `propostas` permite que 80 de 87 colunas sejam `NULL`, incluindo campos críticos como `produtoId`, `tabelaComercialId`, `clienteNome`, `clienteCpf` e `valor`. Isto representa um risco inaceitável para a integridade dos dados.

**EXPECTED (Estado Final de Sucesso):**
1.  O arquivo `shared/schema.ts` é modificado. As colunas críticas de alta prioridade, identificadas no relatório de diagnóstico, agora incluem a constraint `.notNull()`.
2.  Um novo arquivo de migração é gerado com sucesso no diretório `drizzle/migrations/` através do comando `npx drizzle-kit generate:pg`.
3.  A nova migração é aplicada com sucesso ao banco de dados de desenvolvimento/teste através do comando `npm run migrate`.

**CONSTRAINTS (Roadmap de Implementação):**

1.  **Modificar Schema (`shared/schema.ts`):**
    * Com base no relatório `ANALISE_SCHEMA_PROPOSTAS.md`, adicione `.notNull()` às seguintes colunas (no mínimo):
        * `produtoId`
        * `tabelaComercialId`
        * `clienteNome`
        * `clienteCpf`
        * `valor`
        * `prazo`
        * `valorTac`
        * `valorIof`
        * `valorSeguro`
        * `valorTotalFinanciado`
        * `valorParcela`
        * `taxaJurosMensal`
        * `taxaJurosAnual`
        * `cetMensal`
        * `cetAnual`
        * `dataPrimeiroVencimento`

2.  **Gerar Migração:**
    * Execute o comando `npx drizzle-kit generate:pg`.
    * Inspecione o arquivo SQL gerado para confirmar que ele contém os comandos `ALTER TABLE "propostas" SET NOT NULL...` para as colunas modificadas.

3.  **Aplicar Migração:**
    * Execute `npm run migrate`.
    * Reporte o output de sucesso da aplicação da migração.