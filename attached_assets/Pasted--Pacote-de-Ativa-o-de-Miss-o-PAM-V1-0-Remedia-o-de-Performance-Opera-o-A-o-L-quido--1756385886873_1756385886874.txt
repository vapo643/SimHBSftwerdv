### Pacote de Ativação de Missão (PAM) V1.0 - Remediação de Performance (Operação Aço Líquido)

* **Sumário da Missão (O Quê):** Refatorar o fluxo de negócio crítico de aprovação de propostas para uma arquitetura orientada a eventos e assíncrona, e implementar os índices de base de dados em falta para otimizar as queries de listagem.
* **Intenção Estratégica (O Porquê):** Eliminar os estrangulamentos de performance P1 (Processamento Síncrono) e P2 (Queries Ineficientes) identificados na auditoria. O objetivo é garantir que o sistema possa escalar para 50 propostas/dia, removendo operações bloqueantes do fluxo de resposta HTTP e otimizando o acesso à base de dados.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de software sênior a aplicar os padrões de "Event-Driven Architecture" e otimização de base de dados. A sua tarefa é desacoplar operações pesadas do fluxo principal e garantir que as queries sejam executadas com a máxima eficiência.

---

**IMPLEMENTAR (Plano de Remediação):**
Execute a seguinte sequência de ações de refatoração e otimização.

**CURRENT STATE:**
Operações pesadas (geração de PDF, chamadas a APIs externas como ClickSign) são executadas de forma síncrona dentro dos *use cases*. As queries de listagem de propostas não utilizam índices compostos, levando a *full table scans*.

**EXPECTED (Estado Final de Sucesso):**
1.  Os índices de performance críticos (`idx_propostas_status_performance`, `idx_propostas_cpf_status`) existem na base de dados.
2.  O `ApproveProposalUseCase` foi refatorado para apenas emitir um `ProposalApprovedEvent` e não executar mais operações pesadas.
3.  Um novo *worker* BullMQ existe e é responsável por consumir o `ProposalApprovedEvent` e orquestrar as operações assíncronas de geração de CCB e envio para o ClickSign.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Otimização da Base de Dados (Remediação P2)**
1.1. Crie e execute um novo ficheiro de migração Drizzle que adicione os seguintes índices compostos especializados à tabela `propostas`:
    ```sql
    CREATE INDEX IF NOT EXISTS idx_propostas_status_performance 
    ON public.propostas (status, created_at DESC, deleted_at) 
    WHERE deleted_at IS NULL;

    CREATE INDEX IF NOT EXISTS idx_propostas_cpf_status 
    ON public.propostas (cliente_cpf, status) 
    WHERE deleted_at IS NULL;
    ```
1.2. Confirme que a migração foi gerada e aplicada com sucesso.

**Passo 2: Implementar Arquitetura Assíncrona (Remediação P1)**
2.1. **Refatorar o Use Case Síncrono:**
    * No `ApproveProposalUseCase.ts`, remova qualquer lógica relacionada com a geração de CCB ou chamadas ao ClickSign.
    * A única responsabilidade deste *use case* após a aprovação da proposta no agregado é emitir o evento `ProposalApprovedEvent`.

2.2. **Criar o Worker Assíncrono:**
    * Crie um novo ficheiro para o worker BullMQ, por exemplo, `server/workers/formalizationWorker.ts`.
    * Implemente a lógica do *worker* para "ouvir" a fila correspondente aos eventos de formalização.
    * Dentro do *handler* do *worker*, implemente a lógica que antes estava no *use case*: consumir o evento `ProposalApprovedEvent`, chamar o `GenerateCcbUseCase` e, subsequentemente, o serviço de envio para o ClickSign.

2.3. **Criar o Dispatcher de Eventos:**
    * Crie um serviço `EventDispatcher` que seja responsável por receber os eventos de domínio dos agregados e publicá-los na fila BullMQ apropriada.
    * Integre este `EventDispatcher` no `UnitOfWork` ou nos *use cases* para que, após uma transação bem-sucedida, os eventos registados sejam despachados para a fila.

**Passo 3: Validação Final**
3.1. Apresente o conteúdo do novo ficheiro de migração SQL com os índices.
3.2. Mostre o código refatorado do `ApproveProposalUseCase.ts`, evidenciando a sua simplicidade e a emissão do evento.
3.3. Apresente o código do novo `formalizationWorker.ts`, mostrando como ele consome o evento e executa as operações pesadas.
3.4. Execute `get_latest_lsp_diagnostics` para garantir que a refatoração não introduziu erros de compilação.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** ALTO. A introdução de uma arquitetura orientada a eventos é uma mudança estrutural significativa. Os principais riscos são: a garantia da entrega de eventos (exactly-once delivery), o tratamento de falhas no *worker* (políticas de *retry*, *dead-letter queue*) e a gestão do estado distribuído.
* **DECISÕES TÉCNICAS ASSUMIDAS:** O `EventDispatcher` será implementado para garantir que os eventos só sejam enviados para a fila BullMQ após o `commit` bem-sucedido da transação da base de dados, para evitar inconsistências.
* **VALIDAÇÃO PENDENTE:** A robustez do novo fluxo assíncrono (incluindo tratamento de erros e retentativas) deve ser validada com testes de integração rigorosos.