O plano para construir o formulário "Dados do Cliente" foi validado e o código final, gerado pelo Assistente. Sua tarefa agora é implementar este código no projeto.

Execute o seguinte plano de 2 etapas:

1.  **Crie o Componente do Formulário:** Crie um novo arquivo no caminho `/client/src/components/forms/DadosClienteForm.tsx` e cole exatamente o seguinte código dentro dele:
    ```typescript
    import React from 'react';
    import { useForm } from 'react-hook-form';
    import { zodResolver } from '@hookform/resolvers/zod';
    import { z } from 'zod';
    import { Input } from '@/components/ui/input';
    import { Label } from '@/components/ui/label';
    import { Button } from '@/components/ui/button';

    // Definindo um componente simples para mensagens de erro para sermos auto-contidos
    const FormMessage = ({ children }: { children: React.ReactNode }) => {
      if (!children) return null;
      return <p className="text-sm font-medium text-red-500">{children}</p>;
    };
    
    const clienteSchema = z.object({
      clienteNome: z.string().min(2, "Nome deve ter pelo menos 2 caracteres"),
      clienteCpf: z.string().min(11, "CPF deve ter 11 dígitos"),
      clienteDataNascimento: z.string().min(1, "Data de nascimento é obrigatória"),
      clienteTelefone: z.string().min(10, "Telefone inválido"),
      clienteEmail: z.string().email("Email inválido"),
    });

    const DadosClienteForm: React.FC = () => {
      const { register, handleSubmit, formState: { errors } } = useForm({
        resolver: zodResolver(clienteSchema),
      });

      const onSubmit = (data: any) => {
        console.log(data);
        // Lógica para enviar os dados do formulário será implementada depois
      };

      return (
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="clienteNome">Nome Completo</Label>
            <Input id="clienteNome" {...register("clienteNome")} />
            {errors.clienteNome && <FormMessage>{errors.clienteNome.message as string}</FormMessage>}
          </div>
          <div>
            <Label htmlFor="clienteCpf">CPF</Label>
            <Input id="clienteCpf" {...register("clienteCpf")} />
            {errors.clienteCpf && <FormMessage>{errors.clienteCpf.message as string}</FormMessage>}
          </div>
          <div>
            <Label htmlFor="clienteDataNascimento">Data de Nascimento</Label>
            <Input type="date" id="clienteDataNascimento" {...register("clienteDataNascimento")} />
            {errors.clienteDataNascimento && <FormMessage>{errors.clienteDataNascimento.message as string}</FormMessage>}
          </div>
          <div>
            <Label htmlFor="clienteTelefone">Celular</Label>
            <Input id="clienteTelefone" {...register("clienteTelefone")} />
            {errors.clienteTelefone && <FormMessage>{errors.clienteTelefone.message as string}</FormMessage>}
          </div>
          <div>
            <Label htmlFor="clienteEmail">E-mail</Label>
            <Input type="email" id="clienteEmail" {...register("clienteEmail")} />
            {errors.clienteEmail && <FormMessage>{errors.clienteEmail.message as string}</FormMessage>}
          </div>
          <Button type="submit">Próximo</Button>
        </form>
      );
    };

    export default DadosClienteForm;
    ```

2.  **Integre o Formulário na Página:** Modifique o arquivo `/client/src/pages/propostas/nova.tsx`. Importe o novo componente `DadosClienteForm` e use-o para substituir o texto de placeholder dentro da primeira aba ("Dados do Cliente").

Execute este plano e reporte a conclusão.