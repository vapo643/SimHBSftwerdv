### Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA FORENSE E DEBATE TÉCNICO

* **Sumário da Missão:** Realizar uma auditoria forense completa do fluxo de integração com a ClickSign. O objetivo é mapear o estado atual do sistema, identificar todos os componentes de software envolvidos (desde o serviço de backend até os componentes de UI) e, através de pesquisa na documentação oficial, formular um plano de debate sobre a melhor estratégia para implementar um sistema de webhooks resiliente e em tempo real.
* **Intenção Estratégica:** O sistema atualmente não reflete o status real das assinaturas da ClickSign, causando quebras de fluxo e desconfiança do usuário. Antes de implementar a solução de webhook, precisamos de um mapa detalhado do "terreno" para garantir que a nova arquitetura se integre perfeitamente, sem causar regressões, e resolva todas as falhas conhecidas, como o botão de "Confirmar Veracidade".

---

**[DIRETRIZ DE PESQUISA WEB (MANDATÓRIA)]**

*Você está autorizado a utilizar a sua capacidade de pesquisa na web em TODAS as etapas desta auditoria. A sua adesão à Doutrina de Engenharia de Contexto Dinâmico (DECD) é inegociável:*

* ***1. Prioridade às Fontes Primárias:*** Sua busca deve focar **exclusivamente** na **Documentação Oficial da ClickSign para Desenvolvedores** (api.clicksign.com, docs.clicksign.com) e seus repositórios oficiais no GitHub.
* ***2. Justificativa Estratégica:*** Assegurar que nossa implementação seja um espelho 1:1 da especificação do provedor para garantir máxima estabilidade e conformidade.

---

**CONSTRAINTS (Roadmap de Auditoria Forense e Pontos de Debate):**

**NÃO modifique nenhum código.** Sua missão é investigar, analisar e relatar.

**1. Mapeamento do Estado Atual (Backend):**
    * **Serviço Principal:** Localize e apresente o código completo do `server/services/clickSignServiceV3.ts`.
    * **Rota de Webhook:** Verifique a existência de uma rota de webhook para a ClickSign (provavelmente em `server/routes/webhooks.ts` ou `server/routes/integracao/clicksign.ts`). Se existir, apresente o código. Se não existir, declare-o explicitamente.
    * **Validação de Segurança:** Com base na documentação oficial da ClickSign (pesquise por "validar webhook", "assinatura de webhook"), qual é o método recomendado para validar a autenticidade de uma notificação de webhook? (Ex: verificação de um header `HMAC-SHA256`).

**2. Mapeamento do Estado Atual (Frontend):**
    * **Timeline de Formalização:** Localize o componente React (`.tsx`) que renderiza a timeline na tela de formalização e apresente o trecho de código que exibe o status da assinatura.
    * **Tela de Pagamentos:** Localize e apresente o código do botão "Confirmar Veracidade" na tela de pagamentos (`/financeiro/pagamentos`). Qual chamada de API ele dispara? Qual lógica ele utiliza para determinar se a CCB foi assinada?

**3. Análise de Lacunas e Proposta de Debate:**
    * **Diagnóstico de Falha:** Com base na sua análise, por que o botão "Confirmar Veracidade" está falhando? A lógica atual faz uma chamada síncrona para a ClickSign ou depende de um campo no nosso banco de dados que não está sendo atualizado?
    * **Estratégia de Atualização de UI (Ponto de Debate):** Uma vez que o webhook atualize nosso banco de dados, qual a melhor estratégia para refletir essa mudança no frontend em tempo real?
        * **Opção A (Polling/Refetch):** Devemos usar o `refetch` do TanStack Query em intervalos regulares?
        * **Opção B (WebSockets):** Devemos implementar uma solução com WebSockets (Supabase Realtime) para "empurrar" a atualização para o cliente?
        * **Opção C (Invalidação de Cache):** Podemos invalidar a query do TanStack Query de forma mais inteligente quando o usuário realiza outra ação na página?
    * **Pesquisa de Eventos:** Consulte a documentação oficial da ClickSign e liste todos os eventos de webhook disponíveis (ex: `upload`, `add_signer`, `close`, `auto_close`). Qual evento representa inequivocamente a finalização completa do processo de assinatura?

**EXPECTED (Entregável Final):**
Um relatório de auditoria detalhado contendo todos os trechos de código solicitados e respostas claras para cada ponto de investigação, pesquisa e debate. Este relatório será a base para a **Fase 3: Arquitetura da Solução**.