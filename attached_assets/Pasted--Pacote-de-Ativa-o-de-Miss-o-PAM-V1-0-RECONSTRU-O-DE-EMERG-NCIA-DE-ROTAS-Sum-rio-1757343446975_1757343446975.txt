### **Pacote de Ativação de Missão (PAM) V1.0 - RECONSTRUÇÃO DE EMERGÊNCIA DE ROTAS**

* **Sumário da Missão:** Realizar uma substituição cirúrggica de código no ficheiro corrompido `server/routes.ts` para restaurar a funcionalidade da rota `GET /api/propostas/:id`, eliminando o código legado e conectando-a corretamente ao `proposalController` da arquitetura DDD.

* **Intenção Estratégica:** Estabilizar o sistema e eliminar os ~299 erros de compilação para que a missão de correção principal possa ser retomada. Esta é uma operação de controle de danos.

* **Contexto Crítico:** A auditoria anterior identificou corretamente que a rota `GET /api/propostas/:id` estava a ser tratada por um código legado, ignorando a nova arquitetura DDD e o `ProposalRepository` corrigido. Uma tentativa falha de corrigir isso corrompeu o ficheiro `server/routes.ts` com código duplicado e sintaxe inválida.

---

**IMPLEMENTAR:**
Reconstrução da Rota de Busca de Proposta Individual

**CURRENT STATE:**
O ficheiro `server/routes.ts` está severamente corrompido e inoperável, contendo múltiplos erros de sintaxe e lógica de roteamento duplicada.

**EXPECTED (Estado Final de Sucesso):**
1.  O ficheiro `server/routes.ts` é restaurado para um estado funcional, sem erros de compilação (`get_latest_lsp_diagnostics` deve retornar zero erros).
2.  A rota `GET /api/propostas/:id` deve ser **exclusivamente** tratada pelo método `show` do `proposalController`.
3.  Todo o código legado associado à rota antiga `app.get('/api/propostas/:id', ...)` que chama diretamente o `storage.ts` é completamente removido.
4.  Como resultado, a tela de Análise de Proposta (`/credito/analise/:id`) deve começar a receber o payload de dados completo, pois a rota agora utilizará o método `findById` corrigido do `ProposalRepository`.

**CONSTRAINTS (Roadmap de Implementação Cirúrgica):**
1.  **Abra** o ficheiro `server/routes.ts`.
2.  **Localize e DELETE** todo o bloco de código defeituoso que define a rota `GET /api/propostas/:id`. Este bloco provavelmente começa na linha ~1181 e contém uma chamada direta para `storage.getPropostaById(...)`. A tentativa de correção anterior pode ter duplicado ou corrompido esta secção inteira. Remova todas as versões desta rota.
3.  **Localize** a secção de rotas que já utiliza o `proposalController` (você pode procurar por `proposalController.list`).
4.  **INSIRA** o seguinte código **exato** nesta secção, para garantir que a nova rota siga o padrão DDD já estabelecido:
    ```typescript
    // Busca uma proposta individual pelo ID (Rota DDD Canônica)
    app.get(
      '/api/propostas/:id',
      jwtAuthMiddleware, // Garante a segurança do endpoint
      (req, res, next) => {
        // Log para auditoria do fluxo de dados
        logger.info(`[DDD ROUTE] Rota GET /api/propostas/:id acessada`);
        proposalController.show(req, res, next);
      }
    );
    ```
5.  **Validação Final:** Imediatamente após a edição, execute `get_latest_lsp_diagnostics`. O número de erros deve ser zero. Se não for, pare e reporte. Não prossiga com um ficheiro corrompido.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90% (A confiança é na precisão da instrução, mas a instabilidade do agente introduz risco).
* **RISCOS IDENTIFICADOS:** **ALTO** - O agente pode interpretar mal a instrução de "deletar" e remover código em excesso, ou falhar em inserir o novo bloco corretamente, perpetuando a corrupção do ficheiro. A supervisão humana durante a aplicação desta correção é mandatória.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que a instância `proposalController` já está corretamente inicializada e disponível no escopo do ficheiro `routes.ts`. Assume-se que o `jwtAuthMiddleware` é o middleware correto para proteger esta rota.
* **VALIDAÇÃO PENDENTE:** Após a execução bem-sucedida, o QA (GEM 03) deve validar imediatamente se a tela de Análise de Proposta (`/credito/analise/:id`) agora exibe **TODOS** os campos financeiros que estavam em falta.