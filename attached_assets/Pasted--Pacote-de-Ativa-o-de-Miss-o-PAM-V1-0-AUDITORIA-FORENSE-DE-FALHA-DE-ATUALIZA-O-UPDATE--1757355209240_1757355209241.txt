### **Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA FORENSE DE FALHA DE ATUALIZAÇÃO (UPDATE)**

* **Sumário da Missão:** Realizar uma auditoria forense de "causa raiz" no fluxo de atualização de propostas (`PUT /api/propostas/:id`) para identificar a origem exata do erro `500 Internal Server Error` que ocorre ao tentar salvar alterações em uma proposta pendente.

* **Cenário de Negócio (O "Caso de Teste"):** Um `ATENDENTE` abre uma proposta com status `PENDENCIADO`, modifica um ou mais campos, e clica em "Reenviar para Análise". O frontend primeiro tenta salvar as alterações enviando um request `PUT` para a API, que falha com um erro `500`, exibindo a mensagem "não foi possivel salvar as alterações antes do reenvio."

* **Vetor de Ataque / Ponto de Falha (Hipóteses):**
    1.  **Controller (`proposalController.ts`):** O método que trata a rota `PUT` está a processar mal os dados do request (`req.body`) antes de passá-los para o `UseCase`.
    2.  **UseCase (`UpdateProposalUseCase.ts` ou similar):** A lógica de negócio para carregar a proposta, aplicar as mudanças e chamar o repositório está a gerar uma exceção não tratada.
    3.  **Repository (`ProposalRepository.ts`):** O método `save` (na sua lógica de `UPDATE`) está a construir uma query Drizzle ORM inválida, ou está a tentar inserir dados que violam uma constraint do banco de dados (ex: tipo de dado incorreto, valor nulo em coluna não-nula).
    4.  **Payload de Dados (Frontend):** O objeto enviado pelo frontend em `editar.tsx` pode ter uma estrutura que o backend não espera, causando uma falha de desserialização ou processamento.

* **Evidência de Conformidade Requerida (A "Prova Irrefutável"):**

1.  **Análise da Rota e Controller:**
    * Navegue até o ficheiro de rotas (`server/routes.ts` ou similar) e apresente a definição da rota `PUT /api/propostas/:id`.
    * Identifique e apresente o código completo do método do `proposalController` que é acionado por esta rota.

2.  **Análise do UseCase e Domínio:**
    * Siga o fluxo a partir do controller para o `UseCase` responsável pela atualização. Apresente o código completo deste `UseCase`.
    * Verifique como os dados (`payload`) são aplicados à entidade de domínio `Proposal`.

3.  **Análise da Camada de Persistência (Repositório):**
    * Navegue até `server/modules/proposal/infrastructure/ProposalRepository.ts` e apresente o código completo do método `save`.
    * Foque na lógica de **UPDATE** (o bloco `else` que trata propostas existentes). Apresente o objeto de dados que é passado para a query `db.update(...).set(...)`.

4.  **Diagnóstico do Erro 500:**
    * Inspecione os logs do servidor (não apenas do navegador) que são gerados no momento exato em que o erro `500` ocorre. Procure por `stack traces` ou mensagens de erro detalhadas que não são enviadas para o cliente.
    * Com base em todas as evidências, forneça um veredito final explicando a causa exata do `Internal Server Error`. Onde o código está a quebrar e porquê?