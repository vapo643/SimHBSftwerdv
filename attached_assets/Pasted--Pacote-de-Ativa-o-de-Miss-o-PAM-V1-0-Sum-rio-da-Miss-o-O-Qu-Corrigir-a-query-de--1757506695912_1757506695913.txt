### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Corrigir a query de busca de proposta no `ProposalRepository` para que ela inclua e retorne o histórico completo de comunicações (observações) associado a uma proposta.
* **Intenção Estratégica (O Porquê):** O fluxo de análise de propostas está paralisado porque analistas e atendentes não conseguem visualizar o histórico de comunicação, que é essencial para a tomada de decisão. Restaurar esta pipeline de dados é crítico para a operacionalidade do negócio.
* **Histórico Relevante (Consulta Obrigatória):** A sua própria auditoria anterior confirmou que o método `findById` no arquivo `server/modules/proposal/infrastructure/ProposalRepository.ts` não realiza o `LEFT JOIN` com a tabela `observacoes`. A falha está isolada nesta função.

---

**IMPLEMENTAR:**
Correção de Query para Inclusão de Histórico de Comunicação.

**CURRENT STATE:**
A função `findById` no arquivo `server/modules/proposal/infrastructure/ProposalRepository.ts` executa uma query que busca os detalhes de uma proposta, mas omite o histórico de comunicação.

**Evidência Bruta (Lógica Falha):**
A query Drizzle ORM atual não contém a cláusula `.leftJoin(observacoes, eq(observacoes.proposta_id, propostas.id))`, resultando em dados de comunicação ausentes.

**EXPECTED (Estado Final de Sucesso):**
1.  A função `findById` em `server/modules/proposal/infrastructure/ProposalRepository.ts` deve ser modificada.
2.  A query Drizzle ORM dentro desta função deve ser atualizada para incluir um `LEFT JOIN` com a tabela `observacoes`, relacionando `observacoes.proposta_id` com `propostas.id`.
3.  O resultado da query deve ser processado (provavelmente no método `mapToDomain`) para agregar todas as observações encontradas em um array dentro do objeto de domínio `Proposal`.
4.  Como resultado, a API `GET /api/propostas/:id` passará a retornar o objeto da proposta com um campo `observacoes` devidamente populado, resolvendo o bug no frontend.

**CONSTRAINTS (Roadmap de Implementação):**
1.  Abra o arquivo `server/modules/proposal/infrastructure/ProposalRepository.ts`.
2.  Localize a função `async findById(id: string)`.
3.  Modifique a query Drizzle ORM. Adicione a seguinte cláusula à sua construção de query:
    ```typescript
    .leftJoin(observacoes, eq(propostas.id, observacoes.propostaId))
    ```
4.  **Agregação de Dados:** Como um `LEFT JOIN` pode retornar múltiplas linhas para a mesma proposta (uma para cada observação), você precisará processar o resultado bruto. Utilize um método de agregação (como um loop `reduce`) sobre o `result` da query para construir um único objeto de proposta que contém um array de todas as observações associadas.
5.  Passe este array de observações para o método `this.mapToDomain` para que ele possa ser corretamente instanciado no objeto de domínio `Proposal`.
6.  Execute o protocolo 7-CHECK, descrevendo como você validaria que a API agora retorna os dados de observações corretamente.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Listar decisões, ex: "Assumido que a relação entre propostas e observacoes é de um-para-muitos e que a agregação dos resultados é a abordagem correta."]
* **VALIDAÇÃO PENDENTE:** [Listar ações, ex: "O Orquestrador deve revisar a lógica de agregação de dados pós-query para garantir que não haja perda de dados."]
---