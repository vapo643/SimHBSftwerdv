**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Realizar uma auditoria de diagnóstico ponta-a-ponta para descobrir por que os dados completos da proposta (cliente, valores, etc.) não estão a ser exibidos na "Tela de Cobranças" e por que a "Ficha do Cliente" está bugada.
* **Intenção Estratégica (O Porquê):** A equipe de cobranças não pode operar com uma tela que exibe propostas "vazias" ou dados de boletos desatualizados. Precisamos de um diagnóstico preciso para restaurar a funcionalidade completa e a confiança nesta ferramenta crítica.
* **Histórico Relevante (Consulta Obrigatória):** Já refatoramos a lógica de filtro desta tela para garantir que as propostas corretas apareçam na lista. O bug atual não é sobre *quais* propostas aparecem, mas sobre a *integridade dos dados* exibidos para elas.
* **Modelo Mental (Como se Encaixa):** Você é um detetive de dados. O "crime" é a "perda de informação" entre o banco de dados e a UI. Sua missão é seguir a trilha dos dados, desde a query no backend até a renderização nos componentes React, e encontrar onde os dados da proposta se perdem ou são corrompidos.
* **Riscos Antecipados:** **Risco:** Uma análise superficial pode levar a uma correção incompleta. **Contramedida:** Sua missão não é corrigir. É **produzir um relatório de diagnóstico** com evidências de código em cada camada (backend, frontend tabela, frontend modal).

---

**IMPLEMENTAR:**
Auditoria de diagnóstico completa. **NÃO FAÇA MODIFICAções DE LÓGICA.**

**CURRENT STATE:**
A "Tela de Cobranças" lista as propostas corretas, mas sem os dados do cliente/proposta (elas aparecem "vazias"). A "Ficha do Cliente" (modal) exibe informações de boletos de forma bugada e desatualizada.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria detalhado que identifique a causa raiz para cada um dos sintomas reportados.

**CONSTRAINTS (Roadmap de Auditoria Forense):**

**1. Auditoria do Backend (`GET /api/cobrancas`):**
    - **Ação:** Localize a query Drizzle neste endpoint.
    - **Análise Crítica:** Inspecione a cláusula `.select()` da query. Ela está a selecionar apenas o `id` da proposta, ou está a selecionar todos os campos necessários (ex: `clienteNome`, `clienteCpf`, `valorTotal`, etc.) através de `joins` com outras tabelas se necessário?
    - **Relatório:** Apresente a cláusula `.select()` completa da query. Formule uma hipótese clara: a perda de dados começa aqui, com o backend a não enviar os dados completos?

**2. Auditoria da Tabela Principal (Frontend - `CobrancasPage.tsx`):**
    - **Ação:** Analise a forma como os dados recebidos da API são mapeados para as colunas da tabela principal.
    - **Análise Crítica:** O componente da tabela está a tentar aceder aos campos corretos (ex: `proposta.clienteNome`)? Adicione um `console.log` para mostrar a estrutura de um dos objetos `proposta` que o componente recebe da API.
    - **Relatório:** Apresente o resultado do `console.log` dos dados que chegam ao componente da tabela.

**3. Auditoria do Modal "Ficha do Cliente" (Frontend):**
    - **Ação:** Analise o componente do modal "Ficha do Cliente".
    - **Análise Crítica:** Como este modal busca ou recebe os dados do boleto? Ele faz uma nova chamada de API (ex: `/api/cobrancas/:id/ficha`) ou recebe os dados da linha da tabela? A lógica está a buscar dados em tempo real ou a usar dados potencialmente desatualizados?
    - **Relatório:** Descreva o fluxo de dados para o modal e formule uma hipótese para explicar por que a visualização do boleto está "bugada e desatualizada".

**Relatório Final:**
O critério de sucesso é um relatório de diagnóstico que nos dê um entendimento completo do fluxo de dados e aponte os pontos exatos de falha.