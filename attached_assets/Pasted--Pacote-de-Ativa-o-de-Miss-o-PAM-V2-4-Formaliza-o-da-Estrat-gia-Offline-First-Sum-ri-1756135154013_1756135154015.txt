### Pacote de Ativação de Missão (PAM) V2.4 (Formalização da Estratégia Offline-First)

* **Sumário da Missão (O Quê):** Gerar um Architecture Decision Record (ADR) que defina a nossa estratégia para a implementação de capacidades **Offline-First** no frontend, com base no "Subtópico Obrigatório" do Ponto 60.
* **Intenção Estratégica (O Porquê):** Aumentar a resiliência e a confiabilidade da nossa aplicação para o usuário final. Uma estratégia Offline-First garante que a aplicação permaneça funcional mesmo em condições de rede instáveis ou inexistentes, melhorando drasticamente a experiência do usuário em campo.
* **Histórico Relevante (Consulta Obrigatória):** A auditoria de conformidade identificou a ausência de uma estratégia Offline-First. A nossa arquitetura de frontend (Ponto 56) e de gestão de estado (Ponto 59) já estabeleceram as bases (PWA, `LocalStorage`) para esta funcionalidade.
* **Modelo Mental (Como se Encaixa):** Aja como um Arquiteto de Frontend focado em resiliência. A sua tarefa é projetar o "sistema de suporte de vida" da nossa aplicação, definindo como ela irá armazenar dados localmente e sincronizá-los com o servidor quando a conexão for restaurada.

---

**IMPLEMENTAR:**
ADR: Estratégia de Arquitetura Offline-First

**CURRENT STATE:**
A aplicação depende de uma conexão de rede constante para funcionar. Uma perda de conectividade resulta numa experiência de usuário degradada ou inoperante.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/02-technical/offline-first-architecture.md`, é criado. O arquivo deve conter um ADR completo, incluindo as seguintes seções:

1.  **Decisão:** Uma declaração clara, por exemplo: "Adotaremos uma estratégia de `Cache-First, Network-Second` para dados de leitura e um padrão de `Fila de Sincronização` para operações de escrita, utilizando **Service Workers** e **IndexedDB** para implementar a funcionalidade Offline-First."
2.  **Justificativa:** A justificação para a decisão (melhora da UX, aumento da resiliência, fiabilidade em campo).
3.  **Arquitetura de Implementação:**
    * **Service Workers:** Descrever como os Service Workers irão interceptar as requisições de rede para servir dados a partir do cache.
    * **IndexedDB:** Descrever como iremos usar o IndexedDB para o armazenamento estruturado de dados no cliente.
    * **Fila de Sincronização (Sync Queue):** Um diagrama de sequência (Mermaid) e uma descrição do fluxo para operações de escrita: (1) a ação é guardada numa fila no IndexedDB; (2) o Service Worker tenta sincronizar em segundo plano; (3) a UI é atualizada de forma otimista.
4.  **Estratégia de Resolução de Conflitos:** Descrever a nossa estratégia para lidar com conflitos de dados quando a sincronização ocorre (ex: "Last Write Wins", "Merge Lógico").

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO. Ex: Risco de complexidade na lógica de sincronização e resolução de conflitos.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o IndexedDB é a tecnologia de armazenamento no cliente mais robusta para as nossas necessidades, em vez de `LocalStorage`."]
* **VALIDAÇÃO PENDENTE:** [O ADR gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que todas as seções obrigatórias do ADR estão completas.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.