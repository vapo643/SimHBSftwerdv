PROMPT 1 de 2: Auditoria de Lógica de Backend (Passo 1)
Markdown

### Pacote de Ativação de Missão (PAM) V1.0 - Padrão PACN V1.0

* **Sumário da Missão:** Auditar a lógica do endpoint de busca de cliente por CPF para validar seu comportamento em um cenário de "não encontrado".

* **Cenário de Negócio (O "Caso de Teste"):** Um usuário no frontend aciona uma busca por um CPF que não existe no banco de dados. O backend recebe uma requisição em `GET /api/clientes/cpf/:cpf`. A regra de negócio dita que, se o cliente não for encontrado, a API deve retornar um status HTTP `404 Not Found` com uma mensagem clara, como `{ "error": "Cliente não encontrado" }`.

* **Vetor de Ataque / Ponto de Falha (O "Risco"):** O risco é que o endpoint, em vez de retornar um 404 controlado, esteja lançando uma exceção não tratada, o que poderia causar um erro 500 (Internal Server Error) e mascarar a verdadeira causa raiz do problema, que é a ausência de dados.

* **Evidência de Conformidade Requerida (A "Prova Irrefutável"):**
    1.  Localize o arquivo de rotas e o controller/service que implementa a lógica para o endpoint `GET /api/clientes/cpf/:cpf`.
    2.  Apresente o trecho de código exato que executa a busca no banco de dados (provavelmente usando Drizzle ORM).
    3.  Apresente e **explique em detalhe o bloco de código condicional (ex: `if (!cliente) { ... }`) que trata o caso onde o cliente não é encontrado.** Confirme inequivocamente que este bloco retorna um status `404` e uma mensagem de erro JSON. Se este tratamento não existir, declare a falha explicitamente.

PROMPT 2 de 2: Auditoria de Tratamento de Erro no Frontend (Passo 2)
Markdown

### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão:** Rastrear a chamada de API de busca de cliente no frontend e auditar seu mecanismo de tratamento de erros para encontrar a causa do crash da interface.

* **Intenção Estratégica (O Porquê):** Uma falha `404 Not Found` no backend está causando um crash completo da aplicação React. Isso indica uma falha na resiliência da interface. Precisamos identificar o ponto exato onde o erro não está sendo tratado para torná-lo robusto.

* **Roadmap de Rastreamento (Constraints):**
    1.  **Identifique o Gatilho:** Comece pelo componente do formulário que contém o campo "Estado Civil". A busca por CPF provavelmente é acionada ao preencher um campo de CPF ou ao avançar para esta etapa do formulário.
    2.  **Localize a Chamada de Dados:** Encontre o hook (`useQuery` do TanStack Query ou uma chamada `fetch` direta) que executa a requisição para `GET /api/clientes/cpf/:cpf`. Aponte o nome do arquivo e do hook/função.
    3.  **Audite o Tratamento de Erro:** Inspecione detalhadamente o código que envolve esta chamada. Procure por:
        * Um bloco `catch` em uma função `async/await`.
        * A opção `onError` em uma chamada `useQuery`.
        * Qualquer lógica que deveria capturar o erro da API.
    4.  **Apresente o Veredito:** Apresente o trecho de código relevante e **declare explicitamente se existe ou não um tratamento de erro para a resposta 404.** Se houver um tratamento, explique por que ele está falhando e não prevenindo o crash do componente React.
