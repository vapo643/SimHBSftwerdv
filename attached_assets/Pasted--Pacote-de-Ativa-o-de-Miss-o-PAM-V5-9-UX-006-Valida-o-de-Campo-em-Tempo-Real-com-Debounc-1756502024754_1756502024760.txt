### **Pacote de Ativação de Missão (PAM) V5.9 - UX-006 (Validação de Campo em Tempo Real com Debounce)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Refatorar o componente `ClientDataStep.tsx` para ativar a validação em tempo real para os campos de CPF e CEP, utilizando um `debounce` para a busca de endereço (CEP) para evitar chamadas excessivas à API.
* **Intenção Estratégica (O Porquê):** Melhorar drasticamente a eficiência e a experiência do usuário no preenchimento do formulário. A validação instantânea do CPF e o preenchimento automático do endereço a partir do CEP reduzem o esforço manual, minimizam erros e fornecem um feedback interativo que torna o preenchimento mais rápido e agradável.
* **Histórico Relevante (Consulta Obrigatória):** A análise heurística (`GL-002`) identificou a validação tardia (apenas no `submit`) como um ponto de atrito de severidade **ALTA**. O código em `ClientDataStep.tsx` já possui a estrutura para a busca de CEP, mas ela precisa ser ativada e otimizada.

---

**IMPLEMENTAR:**
User Story UX-006: Ativar Validação e Busca de CEP em Tempo Real

**CONTEXT:**
Nossa auditoria de UX destacou que campos críticos como CPF e CEP no formulário de nova proposta só são validados após o usuário tentar avançar de passo. Isso leva a um ciclo de "tentativa e erro" frustrante. Para criar uma experiência de nível superior, precisamos fornecer feedback instantâneo enquanto o usuário digita.

**CURRENT STATE:**
No componente `client/src/components/propostas/ClientDataStep.tsx`, a validação de CPF e a chamada à API de CEP acontecem principalmente após a perda de foco (`onBlur`) ou no `submit` do passo, e não de forma contínua durante a digitação.

**EXPECTED (Estado Final de Sucesso):**
1.  **Validação de CPF Instantânea:**
    * Conforme o usuário digita o CPF, o campo deve exibir um feedback visual imediato sobre sua validade (ex: uma borda verde/vermelha ou um ícone de "check"/"x").
    * A validação deve usar a lógica já presente em nosso `CPF` Value Object.
2.  **Busca de CEP com Debounce:**
    * Quando o usuário digita no campo CEP, uma chamada à API de busca de endereço deve ser disparada automaticamente após um breve intervalo sem digitação (ex: 500ms). Isso é crucial para evitar uma chamada de API a cada tecla pressionada.
    * Após a API retornar com sucesso, os campos de endereço (Logradouro, Bairro, Cidade, Estado) devem ser preenchidos automaticamente.
3.  **Feedback Visual de Carregamento:** Durante a busca do CEP (após o debounce e antes da resposta da API), um indicador de carregamento (spinner) deve ser exibido próximo ao campo CEP.
4.  **Prova de Sucesso:** Você deve fornecer um GIF ou screenshots que demonstrem:
    * A validação do CPF mudando de inválido para válido em tempo real.
    * O spinner aparecendo no campo CEP durante a busca e os campos de endereço sendo preenchidos automaticamente.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localizar Componente Alvo:** O foco principal da implementação será no arquivo `client/src/components/propostas/ClientDataStep.tsx`.
2.  **Utilizar Hook `useDebounce`:** A base de código já possui um hook `useDebounce` em `client/src/hooks/use-debounce.ts`. Utilize-o para criar um valor "debounceado" do campo CEP.
3.  **Implementar Efeito para Busca de CEP:** Crie um `useEffect` que tenha o valor debounceado do CEP como dependência. Dentro deste efeito, acione a função de busca de endereço se o CEP for válido.
4.  **Implementar Validação de CPF no `onChange`:** Modifique o `onChange` do campo CPF para acionar a validação do `CPF` Value Object a cada mudança e atualizar o estado da UI para refletir a validade.
5.  **Adicionar Indicador de Loading:** Adicione um estado (`isCepLoading`). Defina-o como `true` antes da chamada da API de CEP e como `false` após a conclusão. Use este estado para renderizar condicionalmente um ícone de `Loader2` do `lucide-react`.
6.  **Validar e Apresentar Evidência:** Teste o fluxo completo, digitando um CPF e um CEP. Capture e apresente o GIF ou os screenshots que demonstrem a funcionalidade completa.
7.  **Verificação Final:** Execute o protocolo `7-CHECK FULL`.