**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Refatorar a "Tela de Cobranças" (backend e frontend) para que ela passe a ler e exibir o status da proposta a partir da nova tabela `status_contextuais`, abandonando a leitura da coluna `status` legada.
* **Intenção Estratégica (O Porquê):** Este é o primeiro passo para ativar nossa nova arquitetura de status. Ao fazer com que a Tela de Cobranças consuma a nova fonte da verdade, garantimos que a informação exibida seja contextual, precisa e alinhada com o domínio de negócio específico da cobrança.
* **Histórico Relevante (Consulta Obrigatória):** A arquitetura de "dupla escrita" está completa e validada. A tabela `status_contextuais` está a ser populada corretamente. Sua missão agora é mudar a lógica de *leitura*.
* **Modelo Mental (Como se Encaixa):** Você é um Engenheiro Full-Stack a executar a primeira fase de uma migração de dados. A tarefa envolve modificar a query de `JOIN` no backend para buscar o novo dado e ajustar a UI no frontend para exibi-lo.
* **Riscos Antecipados:** **Risco:** A nova query com `JOIN` pode ser complexa ou ter um impacto na performance. **Contramedida:** A query deve ser otimizada, e o "Dry Run Tático" deve incluir uma análise do plano de execução da nova query.

---

**IMPLEMENTAR:**
A refatoração do fluxo de leitura de dados da "Tela de Cobranças".

**CURRENT STATE:**
A "Tela de Cobranças" ainda lê o status da coluna `status` legada na tabela `propostas`.

**EXPECTED (Estado Final de Sucesso):**
A "Tela de Cobranças" agora busca e exibe o `status` mais recente da tabela `status_contextuais`, onde o `contexto` é `'cobrancas'`, tornando-a a primeira tela do sistema a operar 100% com a nova arquitetura de status.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Refatoração do Backend (`GET /api/cobrancas`):**
    - **Ação:** Modifique a query Drizzle principal neste endpoint.
    - **Implementação:**
        a. Adicione um `LEFT JOIN` da tabela `propostas` para a tabela `status_contextuais`, com a condição `ON propostas.id = status_contextuais.proposta_id AND status_contextuais.contexto = 'cobrancas'`.
        b. Modifique a cláusula `.select()` para que o campo de status retornado para a UI venha da tabela `status_contextuais`, e não mais da tabela `propostas`.

**2. Refatoração do Frontend (`CobrancasPage.tsx`):**
    - **Ação:** Ajuste a UI para consumir o novo campo de status.
    - **Implementação:** Garanta que os componentes que exibem o status (a coluna na tabela, os filtros) estejam a usar o novo campo de status contextual retornado pela API.

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
Siga o protocolo completo. O teste funcional consistirá em modificar manualmente um status na nova tabela `status_contextuais` (simulando uma dupla escrita) e validar que a "Tela de Cobranças" reflete esta mudança imediatamente (após um refetch), provando que ela está a ler da nova fonte.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
Preencha a declaração completa, com foco em qualquer impacto de performance da nova query com `JOIN`.
---