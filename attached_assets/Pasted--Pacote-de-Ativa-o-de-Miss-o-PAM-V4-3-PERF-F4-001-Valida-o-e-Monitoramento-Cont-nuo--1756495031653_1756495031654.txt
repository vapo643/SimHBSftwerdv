### **Pacote de Ativação de Missão (PAM) V4.3 - PERF-F4-001 (Validação e Monitoramento Contínuo)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Validar o cumprimento do SLA de performance `P95 < 500ms` através de testes de carga e, em seguida, estabelecer um sistema de monitoramento contínuo com alertas proativos para garantir a sustentabilidade da performance em produção.
* **Intenção Estratégica (O Porquê):** Mover o estado do sistema de "otimizado em teoria" para "validado sob pressão". Este é o quality gate final que nos dá a confiança para o deploy. O monitoramento contínuo garante que a performance, uma vez alcançada, seja mantida, transformando-a de um projeto pontual em uma característica permanente do sistema.
* **Histórico Relevante (Consulta Obrigatória):** O alinhamento estratégico (QAE) definiu o SLA, os endpoints críticos, e a necessidade de alertas proativos. As missões `PERF-F1` a `F3` implementaram as otimizações que agora serão validadas.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **ALTO** - O teste de carga pode falhar, revelando que as otimizações foram insuficientes ou que novos gargalos surgem sob concorrência (ex: "connection pool exhaustion", "race conditions").
    * **Contramedida:** A execução do teste de carga será faseada, começando com uma carga baixa e aumentando gradualmente (ramp-up). Os recursos do sistema (CPU, memória, conexões de banco) serão monitorados durante o teste para identificar o ponto de saturação.
    * **Risco:** **MÉDIO** - Alertas de performance mal configurados podem levar a "fadiga de alertas" ou falhar em detectar degradações reais.
    * **Contramedida:** A configuração dos alertas seguirá o princípio de "alertar sobre o sintoma, não sobre a causa", focando na experiência do usuário (latência P95) e com um limiar de tempo (ex: por mais de 5 minutos) para evitar falsos positivos.

---

**IMPLEMENTAR:**
User Story S6-004 e S6-002: Executar Testes de Carga e Configurar Monitoramento Contínuo

**CONTEXT:**
As otimizações de banco de dados e caching foram implementadas. Agora, precisamos provar que elas são eficazes sob uma carga que simule o uso em produção. Após a validação, precisamos configurar sistemas que nos alertem proativamente se a performance degradar no futuro, garantindo a longevidade de nossos esforços.

**CURRENT STATE:**
O sistema está otimizado, mas sua performance sob carga é desconhecida. O Sentry está configurado para monitoramento de erros, mas não para alertas de performance.

**EXPECTED (Estado Final de Sucesso):**
1.  **Script de Teste de Carga Criado:** Um script de teste de carga utilizando a ferramenta `k6` deve ser criado (`scripts/load-test/critical-endpoints.js`).
2.  **SLA Validado:** A execução do script de teste de carga deve produzir um relatório que demonstre, inequivocamente, que a latência `p(95)` para os endpoints críticos está abaixo de `500ms`.
3.  **Alertas de Performance Configurados:** Uma regra de alerta deve ser configurada no Sentry (ou um guia para tal deve ser produzido) para notificar a equipe de operações se a latência `p(95)` de qualquer um dos endpoints críticos exceder `750ms` por mais de 5 minutos.
4.  **Plano de Monitoramento Documentado:** Um documento (`docs/performance/continuous-monitoring-plan.md`) deve ser criado, formalizando quais endpoints são monitorados, seus SLAs, os limiares de alerta e o plano de ação em caso de alerta.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Instalar `k6`:** Verifique se o `k6` está disponível no ambiente. Se não, instrua o Executor Humano sobre como instalá-lo.
2.  **Criar Script de Teste de Carga:** Crie o arquivo `scripts/load-test/critical-endpoints.js`. O script deve:
    * Importar o cliente `http` do `k6`.
    * Definir os `options` do teste, incluindo um "ramp-up" de usuários virtuais (ex: de 1 a 50 VUs ao longo de 1 minuto) e uma duração total.
    * Definir um `group` para cada endpoint crítico (`GET /api/propostas`, `POST /api/simulacao-credito`, etc.).
    * Dentro de cada grupo, fazer a requisição HTTP correspondente, incluindo headers necessários (como um token de autenticação de teste).
3.  **Executar Teste de Carga:** Execute o teste com o comando `k6 run scripts/load-test/critical-endpoints.js`.
4.  **Apresentar e Analisar Resultados:** Cole o output completo do sumário do `k6`. Destaque a métrica `http_req_duration...: p(95)=...` para cada endpoint e declare se o SLA foi ou não cumprido.
5.  **Criar Guia de Alertas Sentry:** Gere um guia em markdown explicando como o Executor Humano pode, manualmente, configurar os alertas de performance no dashboard do Sentry, especificando o projeto, a condição (ex: `p95(transaction.duration) > 750ms`), o filtro por endpoint, e a ação (ex: notificar Slack).
6.  **Criar Plano de Monitoramento:** Crie o arquivo `docs/performance/continuous-monitoring-plan.md` e preencha-o com as informações definidas no QAE e nesta missão.
7.  **Verificação Final:** Execute o protocolo `7-CHECK FULL` e preencha a declaração de incerteza.

---