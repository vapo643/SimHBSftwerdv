### Pacote de Ativação de Missão (PAM) V1.0 - [MODIFICAÇÃO DE NÚCLEO]

* **Sumário da Missão (O Quê):** Corrigir uma falha crítica de configuração no *container* de Injeção de Dependência para injetar corretamente o `DocumentsRepository` no `ApproveProposalUseCase`, resolvendo o `TypeError` que impede a aprovação de propostas.
* **Intenção Estratégica (O Porquê):** Para restaurar a funcionalidade mais crítica do fluxo de análise — a aprovação de propostas — é imperativo corrigir a fundação da nossa arquitetura de serviços, garantindo que todos os componentes recebam as dependências de que necessitam para operar. Esta correção desbloqueia o fluxo de negócio.
* **Histórico Relevante (Consulta Obrigatória):** A sua própria auditoria forense anterior confirmou inequivocamente que o *factory* para o `ApproveProposalUseCase` em `ServiceRegistry.ts` está a passar apenas uma das duas dependências necessárias. A sua missão é corrigir esta instanciação.

---

**IMPLEMENTAR:**
Correção de Configuração de Injeção de Dependência.

**CURRENT STATE:**
O arquivo `server/modules/shared/infrastructure/ServiceRegistry.ts` (ou `server/modules/dependencies.ts`) contém o registo do `ApproveProposalUseCase` com uma dependência em falta.

**Evidência Bruta (Lógica Falha):**
```typescript
// Em ServiceRegistry.ts ou dependencies.ts
container.registerFactory(
  TOKENS.APPROVE_PROPOSAL_USE_CASE,
  () => new ApproveProposalUseCase(container.resolve(TOKENS.PROPOSAL_REPOSITORY)) // <-- FALHA: Apenas 1 de 2 dependências está a ser passada.
);
EXPECTED (Estado Final de Sucesso):

O DocumentsRepository será registado como um serviço singleton no container de DI.

A instanciação do ApproveProposalUseCase será corrigida para receber as suas duas dependências: ProposalRepository e DocumentsRepository.

A aplicação deve compilar e reiniciar com sucesso, com a árvore de dependências corretamente resolvida.

CONSTRAINTS (Roadmap de Implementação Faseado):

Fase 1: Registo do Repositório de Documentos

Abra o arquivo server/modules/dependencies.ts (ou ServiceRegistry.ts).

Adicione a importação para DocumentsRepository de ../repositories/documents.repository.

Crie uma instância singleton do repositório: const documentsRepository = new DocumentsRepository(db);.

Registe esta instância no container: container.register(TOKENS.DOCUMENTS_REPOSITORY, documentsRepository);. (Adicione DOCUMENTS_REPOSITORY ao objeto TOKENS se ele não existir).

Fase 2: Correção do Factory do Use Case

No mesmo arquivo, localize a linha container.registerFactory(TOKENS.APPROVE_PROPOSAL_USE_CASE, ...).

Modifique a função de factory para injetar ambas as dependências.

DE:

TypeScript

() => new ApproveProposalUseCase(container.resolve(TOKENS.PROPOSAL_REPOSITORY))
PARA:

TypeScript

() => new ApproveProposalUseCase(
  container.resolve(TOKENS.PROPOSAL_REPOSITORY),
  container.resolve(TOKENS.DOCUMENTS_REPOSITORY)
)
Fase 3: Validação

Execute o protocolo 7-CHECK. A sua validação deve focar-se no reinício bem-sucedido da aplicação, o que prova que o container de DI conseguiu resolver a árvore de dependências completa sem erros.

DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):

CONFIANÇA NA IMPLEMENTAÇÃO: 98%

RISCOS IDENTIFICADOS: BAIXO. A correção é lógica e baseada num diagnóstico sólido. O único risco é um erro de digitação ou de importação que impeça a aplicação de iniciar, o que será imediatamente detetado.

DECISÕES TÉCNICAS ASSUMIDAS: Assumo que TOKENS.DOCUMENTS_REPOSITORY ou existe ou pode ser adicionado ao enum TOKENS e que DocumentsRepository tem uma dependência db no seu construtor.

VALIDAÇÃO PENDENTE: O Orquestrador irá auditar o código final de dependencies.ts e solicitar um teste funcional de ponta a ponta do fluxo de aprovação após a implementação bem-sucedida.