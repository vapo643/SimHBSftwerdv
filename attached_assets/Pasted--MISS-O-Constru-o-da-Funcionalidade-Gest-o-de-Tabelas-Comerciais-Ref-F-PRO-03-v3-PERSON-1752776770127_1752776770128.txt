# MISSÃO: Construção da Funcionalidade "Gestão de Tabelas Comerciais" (Ref. F-PRO-03) - v3

**PERSONA:** Você é um Engenheiro de Software Full-Stack Sênior, especialista em criar interfaces de gerenciamento de dados (CRUD) robustas, testáveis e acessíveis com React, TypeScript e Tailwind CSS.

**CONTEXTO:** Estamos expandindo o sistema "simpix" com uma tela administrativa para gerenciar tabelas de juros e prazos. A qualidade, robustez e testabilidade desta funcionalidade são cruciais.

**AÇÃO:** Crie uma nova funcionalidade completa de CRUD (Criar, Ler, Atualizar, Excluir) para "Tabelas Comerciais", seguindo estritamente todos os requisitos detalhados abaixo.

---
### **REQUISITOS FUNCIONAIS:**
1.  **Leitura (Read):** A tela principal deve exibir uma tabela com todas as tabelas comerciais cadastradas.
2.  **Criação (Create):** Deve haver um botão "Nova Tabela Comercial" que abre um formulário em um modal.
3.  **Atualização (Update):** Cada linha da tabela deve ter um botão "Editar" que abre o mesmo formulário modal, pré-preenchido.
4.  **Exclusão (Delete):** Cada linha da tabela deve ter um botão "Excluir" que abre um modal de confirmação.

---
### **COMPONENTES DE UI:**

1.  **Página Principal (`/configuracoes/tabelas`):**
    * Título: "Gestão de Tabelas Comerciais".
    * Botão: "Nova Tabela Comercial".
    * Tabela com colunas: "Nome da Tabela", "Taxa de Juros Mensal (%)", "Prazos Permitidos", "Ações".

2.  **Formulário de Criação/Edição (Modal):**
    * **Nome da Tabela:** Campo de texto.
    * **Taxa de Juros Mensal (%):** Campo de texto numérico.
    * **Prazos Permitidos (meses):** Componente de input de "tags" ou "multi-select".
    * **Botões:** "Salvar" e "Cancelar".

---
### **LÓGICA DE NEGÓCIO E VALIDAÇÃO:**

1.  **Validação de Formulário (com `zod`):** Implemente a validação no formulário utilizando `react-hook-form` e o seguinte schema `zod`:
    ```typescript
    import { z } from 'zod';

    const tabelaSchema = z.object({
      nomeTabela: z.string().min(3, "Nome da Tabela deve ter pelo menos 3 caracteres."),
      taxaJuros: z.number().positive("Taxa de Juros deve ser um número positivo."),
      prazosPermitidos: z.array(z.number()).min(1, "Deve conter ao menos um prazo."),
    });
    ```
2.  **Lógica de Exclusão:** O botão "Excluir" deve estar desabilitado se a tabela estiver em uso por algum parceiro.

---
### **EXEMPLO DE CÓDIGO E ESTRUTURA**

Para garantir a implementação correta, use a estrutura abaixo como referência para a página e o modal.

* **Exemplo da Página (`tabelas.tsx`):**
    ```typescript
    import React, { useState } from "react";
    import { Table, TableHeader, TableBody, TableHead, TableRow, TableCell } from '@/components/ui/table';
    import { Button } from '@/components/ui/button';
    import { Dialog } from '@/components/ui/dialog';
    import DashboardLayout from '@/components/DashboardLayout'; 
    
    const TabelasComerciais: React.FC = () => {
      const [tabelas, setTabelas] = useState([]);
      const [isModalOpen, setIsModalOpen] = useState(false);
    
      return (
        <DashboardLayout title="Gestão de Tabelas Comerciais">
          <div className="flex justify-between items-center mb-4">
            <h1 className="text-2xl font-bold">Tabelas Comerciais</h1>
            <Button onClick={() => setIsModalOpen(true)}>Nova Tabela Comercial</Button>
          </div>
          <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
            {/* O componente do formulário de criação/edição será renderizado aqui */}
          </Dialog>
          <Table>
            {/* Estrutura da tabela aqui */}
          </Table>
        </DashboardLayout>
      );
    };
    export default TabelasComerciais;
    ```
* **Exemplo do Modal com Formulário:**
    ```typescript
    <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
      <form onSubmit={handleSubmit(onSubmit)}>
        <input {...register("nomeTabela")} />
        {errors.nomeTabela && <span>{errors.nomeTabela.message}</span>}
        
        {/* Outros campos do formulário */}
        
        <button type="submit">Salvar</button>
      </form>
    </Dialog>
    ```

---
### **CONSIDERAÇÕES DE QUALIDADE:**

1.  **Acessibilidade:** Garanta que todos os campos de formulário tenham `labels` associadas e que os modais tenham navegação por teclado facilitada. Exiba mensagens de erro de forma clara e acessível.
2.  **Estratégia de Testes:** Crie um arquivo de teste para o componente principal desta página, incluindo um teste unitário básico para garantir que ele renderiza corretamente.
    ```typescript
    // Em um arquivo como TabelasComerciais.test.tsx
    import { render, screen } from '@testing-library/react';
    import TabelasComerciais from './TabelasComerciais';

    test('renderiza o botão Nova Tabela Comercial', () => {
      render(<TabelasComerciais />);
      const buttonElement = screen.getByText(/Nova Tabela Comercial/i);
      expect(buttonElement).toBeInTheDocument();
    });
    ```

---
### **FORMATO (Estrutura de Arquivos):**
* Crie a nova página em `/client/src/pages/configuracoes/tabelas.tsx`.
* Crie os componentes específicos em `/client/src/components/tabelas-comerciais/`.
* Adicione a nova rota no arquivo `/client/src/App.tsx`.

Execute este plano detalhado.