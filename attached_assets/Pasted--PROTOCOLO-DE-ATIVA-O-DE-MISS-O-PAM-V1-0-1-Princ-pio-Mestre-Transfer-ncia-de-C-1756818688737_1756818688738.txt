---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*A fundação está estável, mas a casa ainda tem fantasmas. A sua missão é uma análise forense para mapear e categorizar cada um dos 30 "fantasmas" (bugs) que assombram a nossa suíte de testes. Você não vai corrigir nada; a sua função é criar um "mapa do assombro" que nos guiará na erradicação final.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** para investigar mensagens de erro específicas do `vitest`, `supertest`, ou `drizzle` que não sejam imediatamente óbvias, a fim de enriquecer a sua categorização.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO CAÇA-FANTASMAS (PASSO 1 - DIAGNÓSTICO E TRIAGEM)**

* **Sumário da Missão (O Quê):** Analisar o output detalhado da última execução do `vitest`, categorizar as 30 falhas de teste em grupos lógicos e produzir um relatório de triagem priorizado que servirá como base para o roadmap de correção final.
* **Intenção Estratégica (O Porquê):** Corrigir 30 bugs individuais sem um plano é ineficiente. Esta análise vai revelar padrões, mostrando se 5 bugs diferentes são, na verdade, causados por um único problema de mock, por exemplo. O objetivo é a eficiência: encontrar as causas raiz que resolvem múltiplas falhas de uma só vez.
* **Histórico Relevante (Consulta Obrigatória):** O output `verbose` do comando `npx vitest run` da "Operação Veredito Final (Terceira Execução)" é a sua única fonte de evidências.
* **Modelo Mental (Como se Encaixa):** Você é um caçador de fantasmas a usar equipamento de deteção (os logs de teste) para classificar as assombrações por tipo (ex: "Poltergeist de Mock", "Aparição de API 500", "Fantasma de Lógica de Negócio") antes de planear a captura.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (MÉDIO):** O volume de logs pode ser grande e confuso, tornando difícil a identificação de padrões.
    * **Contramedida:** A sua abordagem deve ser sistemática. Processe um arquivo de teste falhado de cada vez, extraia a causa raiz e depois agrupe as causas semelhantes.

---

### **ANALISAR E DIAGNOSTICAR:**
Relatório de Triagem de Falhas da Suíte de Testes.

**CURRENT STATE:**
A auditoria final (`Operação Veredito Final`) confirmou que a infraestrutura (LSP, Redis, DB Schema) está estável. No entanto, a suíte de testes ainda reporta 30 falhas em 20 arquivos, bloqueando o deploy. O erro `proposta_logs does not exist` foi eliminado, mas outras falhas, como problemas de mock do Redis e erros 500 em APIs, persistem.

**EXPECTED (Estado Final de Sucesso):**
A geração de um novo documento Markdown em `docs/diagnostics/OPERACAO_CACA_FANTASMAS_TRIAGEM.md`. Este relatório deve conter:

1.  **Sumário Executivo:** Uma visão geral das categorias de bugs encontradas (ex: 50% dos erros são de Mock, 30% são erros de API, 20% são asserções de lógica falhadas).
2.  **Categorias de Falhas Detalhadas:**
    * Para cada categoria de bug que você identificar (ex: `Redis Mock Error`, `API 500 Tabela Comercial`, `Lógica de Proposta Incorreta`):
        * **Descrição:** Uma explicação da causa raiz do problema.
        * **Lista de Testes Afetados:** Uma lista de todos os testes que falham devido a este problema específico.
3.  **Roadmap de Remediação Sugerido e Priorizado:**
    * Uma lista de "missões de correção" priorizadas (P1, P2, P3).
    * Cada missão deve agrupar uma categoria de falha (ex: "P1: Corrigir Mock do Redis", que resolverá 15 testes).
    * Justifique a sua priorização (ex: "Corrigir o mock primeiro, pois ele desbloqueia a validação de múltiplos módulos").

**CONSTRAINTS (Roadmap de Análise):**
1.  **Análise de Logs:** Processe o output do `npx vitest run --reporter=verbose` da execução anterior.
2.  **Agrupamento:** Identifique testes que falham com `stack traces` ou mensagens de erro semelhantes.
3.  **Categorização:** Crie nomes descritivos para cada grupo de falhas.
4.  **Relatório:** Estruture as suas descobertas no documento Markdown conforme especificado acima. **Não implemente nenhuma correção.**