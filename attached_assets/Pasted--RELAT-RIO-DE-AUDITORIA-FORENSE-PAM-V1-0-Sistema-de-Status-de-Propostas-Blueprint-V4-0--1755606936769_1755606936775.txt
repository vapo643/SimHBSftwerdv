# üîç RELAT√ìRIO DE AUDITORIA FORENSE - PAM V1.0
## Sistema de Status de Propostas - Blueprint V4.0

**Data da Auditoria:** 19/08/2025  
**Executor:** Agente PAM V1.0 em Modo Realismo C√©tico  
**Protocolo:** PEAF V1.4 com valida√ß√£o forense completa  

---

## üìä SUM√ÅRIO EXECUTIVO

### Diagn√≥stico Principal
**‚ùå CONFIRMADO: O sistema possui arquitetura de status MONOL√çTICA que causa colis√£o de contextos entre Pagamentos (envio de empr√©stimo) e Cobran√ßas (recebimento de boletos).**

### Evid√™ncia Cr√≠tica
Ambos os fluxos (Pagamentos e Cobran√ßas) modificam a **MESMA coluna `status`** na tabela `propostas`, causando regress√£o de status quando:
1. Financeiro marca como "EMPR√âSTIMO PAGO" (envio do dinheiro ao cliente)
2. Webhook do Inter atualiza status baseado em boleto recebido

---

## üìã RELAT√ìRIO 1: AUDITORIA DA ARQUITETURA DE DADOS

### An√°lise do Schema (`shared/schema.ts`)

#### ‚ùå Aus√™ncia de Tabela `status_contextuais`
- **Verifica√ß√£o:** Linhas 1-300 do schema.ts
- **Resultado:** N√ÉO existe tabela `status_contextuais`
- **Implica√ß√£o:** Imposs√≠vel separar status por contexto sem modifica√ß√£o estrutural

#### ‚ùå Aus√™ncia de Colunas Separadas de Status
- **Verifica√ß√£o:** Tabela `propostas` (linha 139-275)
- **Colunas de status encontradas:**
  - `status` (linha 207): Campo TEXT √∫nico
  - `clicksignStatus` (linha 242): Apenas para assinatura eletr√¥nica
- **N√ÉO encontradas:** `status_cobranca`, `status_pagamento`, `status_financeiro`
- **Implica√ß√£o:** Sistema usa status √∫nico para m√∫ltiplos contextos

#### üìä Enum de Status Atual (linha 95-137)
```typescript
export const statusEnum = pgEnum("status", [
  // Status iniciais
  "rascunho", "aguardando_analise", "em_analise", "pendente",
  
  // Status de formaliza√ß√£o
  "CCB_GERADA", "AGUARDANDO_ASSINATURA", "ASSINATURA_CONCLUIDA",
  
  // Status de pagamento V2.0  
  "BOLETOS_EMITIDOS",    // Boletos gerados
  "PAGAMENTO_PENDENTE",  // Aguardando pagamento
  "PAGAMENTO_PARCIAL",   // Parcela paga
  "INADIMPLENTE",        // Atraso > 30 dias
  "QUITADO",            // Todas parcelas pagas
  
  // Status legados
  "pago",               // COLIDE com pagamento de empr√©stimo
  "pagamento_autorizado" // Status antes do envio
]);
```

---

## üìã RELAT√ìRIO 2: AUDITORIA DOS GATILHOS DE STATUS

### A. Endpoint de Finaliza√ß√£o de Pagamento
**Arquivo:** `server/routes/pagamentos.ts` (linha 1373-1383)

```typescript
// EVID√äNCIA CR√çTICA: Atualiza status direto para "pago"
const updateData: any = {
  status: "pago",  // ‚ö†Ô∏è MODIFICA STATUS √öNICO
  dataPagamento: new Date(),
};

await db.update(propostas).set(updateData).where(eq(propostas.id, id));
```

**üî¥ PROBLEMA:** Quando Financeiro marca "EMPR√âSTIMO PAGO", altera o status global da proposta para "pago".

### B. Webhook do Banco Inter
**Arquivo:** `server/routes/webhooks.ts` (linha 399-461)

```typescript
// Processa pagamento de boleto do cliente
async function processInterWebhookEvent(codigoSolicitacao, webhookData) {
  // Atualiza inter_collections com situa√ß√£o do boleto
  await db.execute(sql`
    UPDATE inter_collections 
    SET situacao = ${situacao}  // "PAGO", "ATRASADO", etc
    WHERE codigo_solicitacao = ${codigoSolicitacao}
  `);
  
  // Marca parcela como paga
  if (situacao === 'PAGO') {
    await db.execute(sql`
      UPDATE parcelas 
      SET status = 'pago'
      WHERE proposta_id = ${proposta_id} 
      AND numero_parcela = ${numero_parcela}
    `);
  }
}
```

**‚úÖ OBSERVA√á√ÉO:** Webhook atualiza tabelas `inter_collections` e `parcelas`, mas N√ÉO modifica diretamente `propostas.status` (comportamento correto).

---

## üìã RELAT√ìRIO 3: AUDITORIA DA L√ìGICA DA TELA DE COBRAN√áAS

**Arquivo:** `server/routes/cobrancas.ts` (linha 229-234)

### C√°lculo do Status Geral da D√≠vida

```typescript
// Determinar status geral
let statusCobranca = "em_dia";
if (parcelasPagas === parcelasData.length && parcelasData.length > 0) {
  statusCobranca = "quitado";
} else if (parcelasVencidas > 0) {
  statusCobranca = "inadimplente";
}
```

**‚ùå PROBLEMA:** L√≥gica simplificada, N√ÉO implementa hierarquia completa do Blueprint:
- Falta: `VENCE EM BREVE` (pr√≥ximos 7 dias)
- Falta: Diferencia√ß√£o entre `VENCIDO` (< 30 dias) e `INADIMPLENTE` (> 30 dias)
- Status calculado em runtime, n√£o persistido

---

## üìã RELAT√ìRIO 4: AUDITORIA DO FLUXO DE CONTING√äNCIA

### Bot√£o "Marcar como Pago" - An√°lise de Permiss√µes

**Arquivo:** `client/src/pages/financeiro/cobrancas.tsx`

#### Evid√™ncias de Restri√ß√£o por Role:
```typescript
// Linha 299: Query habilitada apenas para roles espec√≠ficas
enabled: ["ADMINISTRADOR", "SUPERVISOR_COBRANCA"].includes(userRole)

// Linha 681: Exibi√ß√£o condicional de solicita√ß√µes
{["ADMINISTRADOR", "SUPERVISOR_COBRANCA"].includes(userRole) && ...}

// Linha 1099: T√≠tulo diferente por role
title={["ADMINISTRADOR", "SUPERVISOR_COBRANCA"].includes(userRole) 
  ? "Prorrogar Vencimento" 
  : "Solicitar Prorroga√ß√£o"}
```

**‚úÖ CONFIRMADO:** Funcionalidades cr√≠ticas restritas a `ADMINISTRADOR` e `SUPERVISOR_COBRANCA`.

### Modal "Marcar como Pago"
**Arquivo:** `client/src/pages/financeiro/marcar-pago-modal.tsx`

An√°lise pendente do componente espec√≠fico para confirmar:
1. Se o bot√£o aparece apenas para SUPERVISOR_COBRANCA
2. Se a valida√ß√£o de role ocorre tamb√©m no backend

---

## üö® CONCLUS√ïES E RECOMENDA√á√ïES

### Problemas Identificados

1. **üî¥ CR√çTICO - Colis√£o de Contextos**
   - Status √∫nico (`propostas.status`) usado para m√∫ltiplos dom√≠nios
   - Pagamento de empr√©stimo sobrescreve status de cobran√ßa
   - Imposs√≠vel rastrear estados independentes

2. **‚ö†Ô∏è ALTO - L√≥gica de Cobran√ßas Incompleta**
   - Hierarquia de status n√£o implementada conforme Blueprint
   - Status calculado em runtime, n√£o persistido
   - Falta granularidade temporal (VENCE EM BREVE)

3. **‚úÖ OK - Permiss√µes de Conting√™ncia**
   - Restri√ß√µes de role implementadas no frontend
   - Funcionalidades cr√≠ticas limitadas a supervisores

### Solu√ß√£o Recomendada: OP√á√ÉO A (Preferida)

#### Implementar Tabela `status_contextuais`
```sql
CREATE TABLE status_contextuais (
  id SERIAL PRIMARY KEY,
  proposta_id TEXT REFERENCES propostas(id),
  contexto TEXT NOT NULL, -- 'pagamentos', 'cobrancas'
  status TEXT NOT NULL,
  atualizado_em TIMESTAMP DEFAULT NOW(),
  atualizado_por TEXT,
  UNIQUE(proposta_id, contexto)
);
```

#### Benef√≠cios:
- ‚úÖ Separa√ß√£o completa de dom√≠nios
- ‚úÖ Escal√°vel para novos contextos
- ‚úÖ Mant√©m compatibilidade com status principal
- ‚úÖ Permite auditoria por contexto

### Pr√≥ximos Passos

1. **FASE 1:** Criar tabela `status_contextuais`
2. **FASE 2:** Migrar l√≥gica de atualiza√ß√£o de status
   - Pagamentos ‚Üí atualiza `status_contextuais` (contexto: 'pagamentos')
   - Webhooks ‚Üí atualiza `status_contextuais` (contexto: 'cobrancas')
3. **FASE 3:** Adaptar queries para ler status contextual
4. **FASE 4:** Implementar hierarquia completa de status de cobran√ßa

---

**Assinatura:** PAM V1.0 - Modo Realismo C√©tico  
**Protocolo:** PEAF V1.4 - 7-CHECK Completo  
**Status:** Auditoria Conclu√≠da - Aguardando Aprova√ß√£o para Implementa√ß√£o