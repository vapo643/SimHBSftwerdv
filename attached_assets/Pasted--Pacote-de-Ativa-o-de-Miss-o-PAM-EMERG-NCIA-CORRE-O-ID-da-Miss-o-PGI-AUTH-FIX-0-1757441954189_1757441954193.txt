### Pacote de Ativação de Missão (PAM) - EMERGÊNCIA (CORREÇÃO)

* **ID da Missão:** PGI-AUTH-FIX-01
* **Nome da Missão:** Restauração da Soberania de Autenticação
* **Sumário da Missão (O Quê):** Executar o seu plano de correção de 3 fases para resolver a falha de autenticação em cascata, garantindo que o backend valide corretamente os tokens JWT específicos de cada ambiente.
* **Intenção Estratégica (O Porquê):** Sem uma autenticação funcional no ambiente de desenvolvimento, todo o progresso do projeto está paralisado. Esta missão visa restaurar a funcionalidade completa do ambiente de preview, permitindo que os desenvolvedores trabalhem de forma segura e eficiente, ao mesmo tempo que reforça a separação de segredos entre os ambientes, um pilar da nossa segurança.

---

**IMPLEMENTAR:**
Correção da Cadeia de Validação de JWT

**CURRENT STATE:**
O middleware de autenticação em `server/lib/jwt-auth-middleware.ts` falha ao validar tokens do Supabase de desenvolvimento. A tentativa primária de validação via API do Supabase resulta em timeout, e o mecanismo de fallback secundário utiliza um `JWT_SECRET` incorreto e genérico, causando um erro `401 Unauthorized` e impedindo qualquer acesso a rotas protegidas.

**EXPECTED (Estado Final de Sucesso):**
1.  O login no ambiente de preview funciona perfeitamente, sem erros no console.
2.  O acesso a rotas protegidas (como `/api/debug/me`) após o login retorna um status `200 OK` com os dados do usuário.
3.  O código em `server/lib/jwt-auth-middleware.ts` foi refatorado para carregar o `JWT_SECRET` correto (`DEV_SUPABASE_JWT_SECRET` ou `PROD_SUPABASE_JWT_SECRET`) com base no `NODE_ENV`.
4.  O problema de timeout na validação primária com o Supabase Admin Client foi investigado e, se possível, resolvido.

**CONSTRAINTS (Roadmap de Execução):**
Execute o seu próprio plano de 3 fases com precisão militar:

1.  **FASE 1: CORREÇÃO EMERGENCIAL (Lógica de Fallback)**
    * Modifique o arquivo `server/lib/jwt-auth-middleware.ts`.
    * Na lógica de fallback (em torno da linha 436), substitua a linha `const JWT_SECRET = process.env.JWT_SECRET...` pela lógica correta que seleciona o segredo com base no ambiente:
        ```typescript
        const JWT_SECRET = process.env.NODE_ENV === 'production' 
          ? process.env.PROD_SUPABASE_JWT_SECRET 
          : process.env.DEV_SUPABASE_JWT_SECRET;
        ```
    * Adicione uma verificação de segurança: se o `JWT_SECRET` resultante for nulo ou indefinido, lance um erro explícito para evitar o uso de uma chave insegura.

2.  **FASE 2: INVESTIGAÇÃO DO TIMEOUT (Causa Primária)**
    * Investigue por que a chamada `supabase.auth.getUser(token)` (em torno da linha 347) está a resultar em timeout.
    * Verifique se a inicialização do `createServerSupabaseAdminClient()` está a utilizar as credenciais corretas (`SUPABASE_URL` e `SUPABASE_SERVICE_ROLE_KEY`) para o ambiente de desenvolvimento. Suspeitamos que ele possa estar a tentar conectar-se ao URL de produção com as credenciais de desenvolvimento.
    * Valide a conectividade e reporte qualquer descoberta.

3.  **FASE 3: VALIDAÇÃO FINAL**
    * Após aplicar as correções, reinicie o servidor.
    * Realize um login de ponta a ponta no preview da aplicação.
    * Verifique se o erro 401 desapareceu e se os dados do dashboard são carregados.
    * Execute o 7-CHECK expandido e apresente o seu relatório final.

---
**[PGI ATIVO | LEMBRETE DE ESTADO DO ROADMAP]**
-   **Roadmap em Standby:** N/A
-   **Próximo Passo a ser Retomado:** Início da próxima campanha de refinamento.
-   **Missão de Emergência Atual:** "Restauração da Soberania de Autenticação (PGI-AUTH-FIX-01)"
---