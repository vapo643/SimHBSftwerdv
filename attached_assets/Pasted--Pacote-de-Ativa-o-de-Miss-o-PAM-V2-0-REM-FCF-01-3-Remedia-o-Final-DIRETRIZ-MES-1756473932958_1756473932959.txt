### **Pacote de Ativa√ß√£o de Miss√£o (PAM) V2.0 - REM-FCF-01.3 (Remedia√ß√£o Final)**

**[DIRETRIZ MESTRA DE DIVULGA√á√ÉO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade t√©cnica sem omiss√µes. A transpar√™ncia radical √© mandat√≥ria.*

* **Sum√°rio da Miss√£o (O Qu√™):** Implementar uma corre√ß√£o de duas camadas no frontend: primeiro, garantir que o token de autentica√ß√£o JWT seja corretamente anexado a todas as requisi√ß√µes da API; segundo, refatorar o `ProposalContext` para usar memoiza√ß√£o (`useCallback`/`useMemo`) e quebrar o loop de renderiza√ß√£o infinito.
* **Inten√ß√£o Estrat√©gica (O Porqu√™):** Restaurar a funcionalidade completa e a estabilidade da aplica√ß√£o. A corre√ß√£o n√£o deve ser apenas superficial; devemos tornar o frontend resiliente, de modo que uma falha de API futura n√£o possa mais desencadear um loop de renderiza√ß√£o catastr√≥fico.
* **Hist√≥rico Relevante (Consulta Obrigat√≥ria):** As duas miss√µes de diagn√≥stico anteriores (`REM-FCF-01.1` e `REM-FCF-01.2`) forneceram a localiza√ß√£o exata das duas falhas: a l√≥gica de anexo de token no `apiClient` e a falta de memoiza√ß√£o em `ProposalContext.tsx`.
* **Modelo Mental (Como se Encaixa):** Voc√™ √© um engenheiro full-stack executando uma corre√ß√£o de P0. A precis√£o √© fundamental. Voc√™ aplicar√° duas corre√ß√µes cir√∫rgicas em pontos distintos do frontend para restaurar a integridade da autentica√ß√£o e a estabilidade do ciclo de vida do componente React.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **ALTO** - A altera√ß√£o na l√≥gica de autentica√ß√£o do `apiClient` pode impactar outras partes do aplicativo. A memoiza√ß√£o, se aplicada incorretamente, pode levar a "stale closures" e outros bugs subtis no React.
    * **Contramedida:** A valida√ß√£o ser√° rigorosa. Ap√≥s a corre√ß√£o, voc√™ deve n√£o apenas recarregar a p√°gina da "Nova Proposta", mas tamb√©m navegar para pelo menos duas outras se√ß√µes protegidas do aplicativo para garantir que n√£o houve regress√£o.

---

**IMPLEMENTAR:**
User Story REM-FCF-01.3: Corre√ß√£o Dupla de Autentica√ß√£o e Loop de Renderiza√ß√£o

**CONTEXT:**
Nossas investiga√ß√µes forenses revelaram duas falhas no frontend: ele n√£o est√° enviando o token de autentica√ß√£o para a API, e a forma como ele lida com a falha resultante causa um loop infinito. Precisamos consertar ambos os problemas para restaurar o sistema.

**CURRENT STATE:**
1.  O `apiClient` (ou servi√ßo HTTP equivalente) n√£o est√° configurado corretamente para injetar o `Authorization: Bearer <token>` em todas as requisi√ß√µes.
2.  As fun√ß√µes de action em `client/src/contexts/ProposalContext.tsx` n√£o s√£o memoizadas, e o `useEffect` em `client/src/hooks/useProposalEffects.ts` as inclui como depend√™ncias, causando um loop infinito quando o estado muda.

**EXPECTED (Estado Final de Sucesso):**
1.  **Autentica√ß√£o Corrigida:** O `apiClient` deve ser refatorado para usar um interceptor que, antes de cada requisi√ß√£o, obt√©m o token JWT do `AuthContext` (ou de onde ele estiver armazenado) e o anexa ao header `Authorization`.
2.  **Loop Eliminado:** O custom hook `useProposalActions` em `ProposalContext.tsx` deve ser refatorado para que as fun√ß√µes retornadas sejam envolvidas em `useCallback` ou `useMemo`, garantindo que suas refer√™ncias sejam est√°veis entre renderiza√ß√µes.
3.  **Aplica√ß√£o Funcional:**
    * Ao carregar a p√°gina "Nova Proposta", a mensagem "Erro ao carregar dados necess√°rios" **n√£o deve mais aparecer**.
    * O console do navegador **n√£o deve mais apresentar** erros `401 Unauthorized` para as chamadas de API ou o erro `Maximum update depth exceeded`.
    * A navega√ß√£o para outras p√°ginas da aplica√ß√£o deve continuar funcionando normalmente.
4.  **Prova de Sucesso:** Voc√™ deve fornecer um screenshot da p√°gina "Nova Proposta" carregada corretamente e sem erros no console.

**CONSTRAINTS (Roadmap de Implementa√ß√£o):**
1.  **Investigar `apiClient`:** Localize o arquivo que instancia o `axios` ou `fetch` (`client/src/lib/apiClient.ts`). Analise sua configura√ß√£o.
2.  **Implementar Interceptor de Auth:** Adicione um `interceptor` de requisi√ß√£o ao `apiClient`. Dentro do interceptor, obtenha o token de sess√£o do Supabase (ou do seu provedor de auth) e defina o header `Authorization`.
3.  **Refatorar `ProposalContext`:** Edite `client/src/contexts/ProposalContext.tsx`. Envolva o objeto retornado por `useProposalActions` em um `useMemo`, com `dispatch` como sua √∫nica depend√™ncia.
4.  **Valida√ß√£o Funcional:** Reinicie a aplica√ß√£o e navegue para a p√°gina `/propostas/nova`.
5.  **Coletar Evid√™ncia:** Tire um screenshot da p√°gina funcionando corretamente, com o console do navegador vis√≠vel e livre de erros cr√≠ticos.
6.  **Verifica√ß√£o Final:** Execute o protocolo `7-CHECK FULL` e preencha a declara√ß√£o de incerteza.

---

**DECLARA√á√ÉO DE INCERTEZA (OBRIGAT√ìRIO):**
* **CONFIAN√áA NA IMPLEMENTA√á√ÉO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/M√âDIO/ALTO/CR√çTICO e uma breve descri√ß√£o]
* **DECIS√ïES T√âCNICAS ASSUMIDAS:** [Listar decis√µes tomadas que podem ter implica√ß√µes futuras]
* **VALIDA√á√ÉO PENDENTE:** [Listar a√ß√µes que o Orquestrador (GEM 02) ou o QA (GEM 03) devem validar]
---
---
[PGI ATIVO | LEMBRETE DE ESTADO DO ROADMAP]
- **Roadmap em Standby:** "üöÄ ROADMAP MESTRE DE IMPLEMENTA√á√ÉO_ OPERA√á√ÉO A√áO L√çQUIDO.md"
- **Pr√≥ximo Passo a ser Retomado:** Milestone M3: Core Business Logic
- **Miss√£o de Emerg√™ncia Atual:** "Roadmap de Remedia√ß√£o de Falha Cr√≠tica de Frontend (REM-FCF-01)"
---