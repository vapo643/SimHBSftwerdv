### **Pacote de Ativação de Missão (PAM) V1.0 - BLINDAGEM AUTOMATIZADA DE REGRESSÃO**

* **Sumário da Missão:** Desenvolver uma suíte de testes automatizados para (1) validar o contrato de dados do endpoint `GET /api/propostas/:id` e (2) validar o fluxo de negócio de ponta-a-ponta para a correção e reenvio de uma proposta pendente.

* **Intenção Estratégica:** Garantir a sustentabilidade e a confiabilidade a longo prazo das correções implementadas, criando uma rede de segurança automatizada que detectará imediatamente qualquer regressão futura, em conformidade com a estratégia de testes definida no `02-blueprint-arquitetural.md`.

* **Contexto Técnico:** As falhas recentes de "dados ausentes" foram causadas por quebras no contrato de dados entre o backend e o frontend. Um teste de integração focado no *shape* da resposta da API irá prevenir isso. A falha no fluxo de reenvio de propostas era um bug de múltiplas camadas (UI, API, Estado) que só pode ser garantido por um teste de ponta-a-ponta (E2E) que simule as ações reais do usuário.

---

**IMPLEMENTAR:**
Suíte de Testes de Contrato (Vitest) e de Fluxo de Negócio (Playwright)

**CURRENT STATE:**
As correções recentes foram validadas manualmente. O projeto carece de testes automatizados que cubram especificamente a integridade do payload da API de propostas e o fluxo de negócio de correção.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo ficheiro de teste de integração, `server/tests/integration/proposal-contract.test.ts`, é criado.
2.  Este teste utiliza `vitest` e `supertest` para fazer uma chamada real ao endpoint `GET /api/propostas/:id`, validar que a resposta é `HTTP 200 OK`, e usar `zod` para garantir que o corpo da resposta corresponde ao `ProposalOutputSchema` completo, incluindo todos os campos de cliente e condições.
3.  Um novo ficheiro de teste E2E, `tests/e2e/correct-pending-proposal.spec.ts`, é criado.
4.  Este teste utiliza `Playwright` para simular um usuário `ATENDENTE` a realizar o seguinte fluxo:
    a.  Fazer login no sistema.
    b.  Navegar para a Fila de Análise.
    c.  Localizar uma proposta com status `PENDENTE` e clicar para corrigi-la.
    d.  Modificar um campo no formulário de edição.
    e.  Clicar no botão "Reenviar para Análise".
    f.  Verificar se a aplicação redireciona para o dashboard.
    g.  Verificar se a proposta atualizada agora aparece no dashboard com o status `EM_ANALISE` e com os dados modificados.

**CONSTRAINTS (Roadmap de Implementação):**

**FASE 1: TESTE DE INTEGRAÇÃO DE CONTRATO (VITEST)**
1.  **Crie o Ficheiro de Teste:** Crie o ficheiro `server/tests/integration/proposal-contract.test.ts`.
2.  **Setup do Teste:** Utilize o `db-helper.ts` para popular a base de dados de teste com uma proposta completa (incluindo todos os dados de cliente e condições).
3.  **Implemente o Teste:**
    * Faça uma chamada `GET` para `/api/propostas/:id` usando `supertest`.
    * Valide se `response.status` é `200`.
    * Utilize `ProposalOutputSchema.safeParse(response.body)` do Zod para validar o *shape* da resposta.
    * Verifique se `parsed.success` é `true`. Se for `false`, logue `parsed.error` para um diagnóstico claro.
    * Adicione asserções (`expect`) para verificar valores específicos na resposta, confirmando que os dados não estão apenas presentes, mas corretos.

**FASE 2: TESTE DE FLUXO DE NEGÓCIO E2E (PLAYWRIGHT)**
1.  **Crie o Ficheiro de Teste E2E:** Crie o ficheiro `tests/e2e/correct-pending-proposal.spec.ts`.
2.  **Setup do Teste:** Utilize um `test.beforeEach` para popular a base de dados com um usuário `ATENDENTE` e uma proposta com o status `PENDENTE`.
3.  **Implemente os Passos do Teste:** Use os comandos do Playwright (`page.goto`, `page.getByTestId`, `page.fill`, `page.click`, `expect(page).toHaveURL`) para replicar o fluxo de usuário descrito na secção "EXPECTED".
4.  **Asserções Críticas:** As asserções mais importantes são:
    * `expect(page).toHaveURL('/dashboard')` após a submissão.
    * `expect(page.locator('[data-testid="proposal-row-STATUS"]')).toContainText('em_analise')`.
    * `expect(page.locator('[data-testid="proposal-row-CLIENT_NAME"]')).toContainText('Novo Nome Editado')`.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** **MÉDIO** - A configuração do ambiente para testes E2E com Playwright (ex: login programático, gestão de estado do DB de teste) pode ser complexa e requerer ajustes. A estabilidade dos seletores de UI (`data-testid`) é crucial; se não existirem, precisam ser adicionados.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que a infraestrutura de testes com Vitest e Playwright já está configurada no projeto. Assume-se a existência de `test-ids` nos elementos de UI relevantes para seletores E2E estáveis.
* **VALIDAÇÃO PENDENTE:** O meu papel (Arquiteto Principal) será revisar o código dos testes para garantir que eles sejam robustos, legíveis e que cubram adequadamente os cenários de falha, servindo como uma verdadeira blindagem contra regressões.