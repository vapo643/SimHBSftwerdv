**Contexto, Intenção e Expectativa:**
A equipe de engenharia está enfrentando uma crise técnica intratável com a integração da API do Banco Inter, resultando em um erro `400 Bad Request` persistente e com corpo vazio. Nossas tentativas de depuração falharam.

Sua missão é gerar um "Super Mega Prompt de Socorro". Este prompt será enviado por um engenheiro humano para uma IA externa de máxima potência (especificamente, **Claude 3 Opus**) para obter um diagnóstico definitivo e uma solução robusta.

Seu trabalho é consolidar TODO o nosso conhecimento e código relevante em um único prompt perfeitamente estruturado. Não poupe detalhes. O objetivo é fornecer à IA externa todo o contexto necessário para resolver este problema em uma única interação.

**Roadmap de Geração do "Super Mega Prompt de Socorro":**

**1. Estruture o prompt final com as seguintes seções em Markdown:**
    - `###  Diagnóstico de Emergência: Erro 400 na API do Banco Inter`
    - `### Persona e Objetivo`
    - `### Contexto Crítico do Problema`
    - `### Evidência Bruta 1: Código-Fonte da Implementação Atual`
    - `### Evidência Bruta 2: Exemplo de Payload e Headers Enviados`
    - `### MISSÃO DE ANÁLISE E REFATORAÇÃO (Seu Roadmap de Ação)`
    - `### Formato de Resposta Esperado`

**2. Preencha cada seção do prompt final com o seguinte conteúdo:**

* **Na seção "Persona e Objetivo":**
    * Defina a persona da IA externa: "Você é um Engenheiro de Integrações Sênior, especialista em APIs bancárias brasileiras, com foco em segurança (OAuth2/mTLS) e em depuração de erros complexos. Sua missão é analisar a implementação fornecida, identificar a causa raiz do erro `400 Bad Request` com corpo vazio na API do Banco Inter e fornecer uma solução completa e refatorada."

* **Na seção "Contexto Crítico do Problema":**
    * Copie e cole o seguinte texto:
        > Estamos tentando integrar a API v3 de Cobranças do Banco Inter e estamos recebendo um erro `400 Bad Request` com corpo de resposta vazio. Já esgotamos múltiplas vias de depuração, incluindo: validação de todos os campos obrigatórios do payload conforme a documentação, formatação dos certificados mTLS, testes de autenticação OAuth2 e alternância entre as versões v2 e v3 da API. O erro persistente e a falta de uma mensagem de erro detalhada sugerem um problema fundamental na requisição.

* **Na seção "Evidência Bruta 1: Código-Fonte da Implementação Atual":**
    * Insira o código-fonte completo dos 4 ficheiros fornecidos, cada um dentro de um bloco de código `typescript` devidamente identificado:
        1.  `#### 1. SERVIÇO COMPLETO - server/services/interBankService.ts`
        2.  `#### 2. ROTAS PRINCIPAIS - server/routes/inter.ts`
        3.  `#### 3. ROTAS DE COLEÇÕES - server/routes/inter-collections.ts`
        4.  `#### 4. SCHEMAS RELEVANTES - shared/schema.ts (fragmento)`

* **Na seção "Evidência Bruta 2: Exemplo de Payload e Headers Enviados":**
    * Insira o JSON do payload de exemplo e dos headers, cada um em seu bloco de código `json`.

* **Na seção "MISSÃO DE ANÁLISE E REFATORAÇÃO (Seu Roadmap de Ação)":**
    * Copie e cole a seguinte lista de tarefas para a IA externa:
        > 1.  **Análise de Causa Raiz (Hipótese Principal: mTLS/Handshake):** O erro `400` com corpo vazio é frequentemente um sintoma de falha no handshake mTLS ou na camada de WAF/Firewall da API, antes que a aplicação retorne um erro JSON. Analise CUIDADOSAMENTE a lógica de formatação de certificados (`-----BEGIN...`) e a configuração do agente `undici` em `interBankService.ts`. Existem incompatibilidades conhecidas ou "gotchas" com a implementação mTLS do Node.js ou do Banco Inter que possam estar a ser negligenciadas?
        > 2.  **Auditoria Detalhada do Payload vs. Documentação:** Compare CADA CAMPO do payload de exemplo com a documentação oficial da API de Cobranças v3 do Banco Inter (https://developers.inter.co/references/cobranca-bolepix). Procure por:
        >     - Tipos de dados incorretos (ex: `valorNominal` enviado como `number` quando deveria ser `string` com formato específico, ou vice-versa). Preste atenção especial à nossa função `customStringify`.
        >     - Formatos de data ou CPF/CNPJ inválidos.
        >     - Enumerações com valores incorretos (`desconto.codigo`, `multa.codigo`, `mora.codigo`).
        >     - Campos condicionais ou obrigatórios que faltam.
        > 3.  **Análise dos Headers:** Verifique os headers enviados. O `x-conta-corrente` está correto? Existe algum outro header não-padrão exigido pelo Banco Inter que está em falta?
        > 4.  **Refatoração para Resiliência e Depuração:** Refatore o ficheiro `interBankService.ts` com as seguintes melhorias:
        >     - **Melhor Tratamento de Erros:** Modifique o `catch` no `makeRequest` para extrair e logar o máximo de informação possível dos headers de resposta em caso de erro (como `traceparent`, `server`, etc.), mesmo que o corpo seja vazio.
        >     - **Isolamento da Lógica de Certificados:** Crie uma função utilitária separada e pura para a formatação dos certificados, facilitando testes unitários.
        >     - **Clareza e Boas Práticas:** Aplique quaisquer outras melhorias que você, como especialista, considere pertinentes.
        > 5.  **Plano de Ação de Diagnóstico:** Se a causa raiz não for óbvia apenas pelo código, forneça um plano de ação passo a passo para depuração avançada, incluindo um exemplo de comando `curl` COMPLETO que possamos executar a partir do nosso terminal para replicar a requisição, usando os certificados e chaves (com placeholders, ex: ` --cert cert.pem --key key.pem`).

* **Na seção "Formato de Resposta Esperado":**
    * Defina o formato da resposta: "Por favor, estruture sua resposta em três seções principais: `1. Análise da Causa Raiz`, `2. Código Refatorado` (com comentários explicando as mudanças), e `3. Plano de Ação de Diagnóstico`."

**Conclua a sua tarefa gerando APENAS o "Super Mega Prompt de Socorro" final, pronto para ser copiado.**