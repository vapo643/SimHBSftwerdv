O plano para corrigir o bug de perda de estado no formulário da "Tela T-01" foi validado. Sua tarefa é executar uma refatoração arquitetural.

Execute o seguinte plano de 2 etapas:

**1. Refatore o Formulário Filho (`DadosClienteForm.tsx`):**
Modifique o arquivo `/client/src/components/forms/DadosClienteForm.tsx`. Ele não deve mais gerenciar seu próprio estado. Altere-o para receber o método `register` via props. O código final deve ficar assim:

```typescript
import React from 'react';
import { useForm, Controller } from 'react-hook-form';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

const DadosClienteForm: React.FC<{ register: any, errors: any }> = ({ register, errors }) => {
  return (
    <div className="space-y-4">
      <div>
        <Label htmlFor="clienteNome">Nome Completo</Label>
        <Input id="clienteNome" {...register("clienteNome")} />
        {errors.clienteNome && <p className="text-red-500 text-sm mt-1">{errors.clienteNome.message}</p>}
      </div>
      <div>
        <Label htmlFor="clienteCpf">CPF</Label>
        <Input id="clienteCpf" {...register("clienteCpf")} />
        {errors.clienteCpf && <p className="text-red-500 text-sm mt-1">{errors.clienteCpf.message}</p>}
      </div>
      {/* Adicionar outros campos de dados do cliente aqui */}
    </div>
  );
};

export default DadosClienteForm;
2. Refatore a Página Principal (nova.tsx):
Agora, substitua todo o conteúdo do arquivo /client/src/pages/propostas/nova.tsx pelo código abaixo. Ele agora centraliza o estado do formulário, passando os métodos para as abas filhas.

TypeScript

import React from 'react';
import { useForm, Controller, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import DashboardLayout from '@/components/DashboardLayout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import DadosClienteForm from '@/components/forms/DadosClienteForm';

// Schema Unificado para o formulário completo
const fullProposalSchema = z.object({
  clienteNome: z.string().min(3, "Nome é obrigatório"),
  clienteCpf: z.string().length(14, "CPF inválido"),
  valorSolicitado: z.coerce.number().positive("Valor deve ser positivo"),
  produto: z.string().nonempty("Produto é obrigatório"),
  prazo: z.string().nonempty("Prazo é obrigatório"),
});

type FullFormData = z.infer<typeof fullProposalSchema>;

const NovaProposta: React.FC = () => {
    const { register, handleSubmit, control, formState: { errors } } = useForm<FullFormData>({
        resolver: zodResolver(fullProposalSchema),
    });

    const onSubmit: SubmitHandler<FullFormData> = data => {
        console.log("DADOS COMPLETOS DO FORMULÁRIO:", data);
        alert("Proposta enviada! Verifique o console.");
    };

    return (
        <DashboardLayout title="Nova Proposta de Crédito">
            <form onSubmit={handleSubmit(onSubmit)}>
                <Tabs defaultValue="dados-cliente" className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                        <TabsTrigger value="dados-cliente">Dados do Cliente</TabsTrigger>
                        <TabsTrigger value="condicoes-emprestimo">Condições do Empréstimo</TabsTrigger>
                        <TabsTrigger value="anexo-documentos">Anexo de Documentos</TabsTrigger>
                    </TabsList>

                    <TabsContent value="dados-cliente">
                        <div className="p-4 border rounded-md mt-4">
                            <DadosClienteForm register={register} errors={errors} />
                        </div>
                    </TabsContent>

                    <TabsContent value="condicoes-emprestimo">
                         <div className="space-y-4 p-4 border rounded-md mt-4">
                            <div>
                                <Label htmlFor="valor-solicitado">Valor Solicitado</Label>
                                <Input id="valor-solicitado" type="number" {...register('valorSolicitado')} />
                                 {errors.valorSolicitado && <p className="text-red-500 text-sm mt-1">{errors.valorSolicitado.message}</p>}
                            </div>
                            <div>
                                <Label>Produto</Label>
                                <Controller
                                  name="produto"
                                  control={control}
                                  render={({ field }) => (
                                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                                      <SelectTrigger><SelectValue placeholder="Selecione..." /></SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="pessoal">Crédito Pessoal</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  )}
                                />
                                {errors.produto && <p className="text-red-500 text-sm mt-1">{errors.produto.message}</p>}
                            </div>
                             <div>
                                <Label>Prazo</Label>
                                <Controller
                                  name="prazo"
                                  control={control}
                                  render={({ field }) => (
                                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                                      <SelectTrigger><SelectValue placeholder="Selecione..." /></SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="12">12 meses</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  )}
                                />
                                {errors.prazo && <p className="text-red-500 text-sm mt-1">{errors.prazo.message}</p>}
                            </div>
                        </div>
                    </TabsContent>

                    <TabsContent value="anexo-documentos">
                         <div className="space-y-4 p-4 border rounded-md mt-4">
                            <p>Funcionalidade de upload a ser implementada.</p>
                         </div>
                    </TabsContent>
                </Tabs>
                <div className="flex justify-end pt-6 mt-4">
                    <Button type="submit">Enviar Proposta</Button>
                </div>
            </form>
        </DashboardLayout>
    );
};

export default NovaProposta;
Execute este plano de refatoração.