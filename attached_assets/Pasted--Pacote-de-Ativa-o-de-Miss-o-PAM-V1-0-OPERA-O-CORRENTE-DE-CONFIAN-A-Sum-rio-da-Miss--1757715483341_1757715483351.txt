### Pacote de Ativação de Missão (PAM) V1.0 - OPERAÇÃO CORRENTE DE CONFIANÇA

* **Sumário da Missão:** Restaurar a funcionalidade da tela de pagamentos corrigindo a falha crítica de autenticação no frontend, validando a integridade dos dados da proposta no banco de dados e blindando a lógica de query do backend.
* **Intenção Estratégica:** A falha de autenticação é uma vulnerabilidade de Nível 1 que paralisa fluxos de negócio críticos. A resolução deve ser imediata e definitiva para restaurar a confiança na plataforma e reabilitar as operações financeiras.
* **Modelo Mental (Como se Encaixa):** A falha ocorre na camada mais externa: a obtenção da sessão do usuário. Ao consertar o `TokenManager` em `client/src/lib/apiClient.ts`, restabelecemos o fluxo de dados. A `useQuery` em `pagamentos.tsx` poderá então enviar a requisição autenticada. O backend, que já foi corrigido, responderá com os dados corretos, preenchendo a tela. Os passos subsequentes são para garantir que não haja outras falhas à espreita.

---

**IMPLEMENTAR:**
Plano de Correção Definitivo para a Falha de Autenticação e a Tela de Pagamentos.

**CURRENT STATE:**
O frontend falha em reconhecer a sessão do usuário (`hasSession: false`), impedindo chamadas à API. A tela de `/financeiro/pagamentos` permanece vazia. Há um erro de tipo conhecido em `client/src/lib/apiClient.ts`.

**EXPECTED (Estado Final de Sucesso):**
1.  O usuário logado mantém sua sessão ativa no frontend.
2.  A chamada `GET /api/pagamentos` é executada com sucesso após o login.
3.  A proposta `#6206c1e3-686a-4084-b28f-d999ef0a0e9f` é exibida corretamente na tela de pagamentos.
4.  O sistema opera sem erros de LSP ou de console.

**CONSTRAINTS (Roadmap de Implementação Faseado):**

**Passo 1: [P0 - CRÍTICO] Reparo do Núcleo de Autenticação**
1.  Abra o arquivo `client/src/lib/apiClient.ts`.
2.  Localize o método `getValidToken` dentro da classe `TokenManager`.
3.  **Resolva o erro de LSP:** Corrija a linha `212` para tratar corretamente o tipo `string | null`. Adicione uma verificação explícita para o `access_token` antes de retorná-lo.
    ```typescript
    // SUGESTÃO DE CORREÇÃO:
    if (!session || !session.access_token) {
      console.error('[AUTH] Falha Crítica: Sessão ou Token de Acesso Nulo. Redirecionando para login.');
      window.location.href = '/login'; 
      throw new Error('Sessão inválida ou expirada.');
    }
    return session.access_token;
    ```
4.  Adicione logging detalhado dentro do `TokenManager` para registrar o status da sessão (`hasSession`, presença de `access_token`) sempre que `getValidToken` for chamado. Isso nos dará visibilidade futura.

**Passo 2: [P1 - ALTO] Verificação da Integridade dos Dados (Após Passo 1)**
1.  **Valide no Frontend:** Após aplicar a correção do Passo 1, faça login na aplicação e navegue para a tela `/financeiro/pagamentos`. Observe o console do navegador e a aba de rede para confirmar que a chamada `GET /api/pagamentos` agora é disparada e retorna um status `200 OK`.
2.  **Se a tela ainda estiver vazia:** Execute um script para se conectar ao banco de dados de **PRODUÇÃO** e verificar o valor exato do campo `status` para a proposta com `id = '6206c1e3-686a-4084-b28f-d999ef0a0e9f'`. Confirme se ele corresponde **exatamente** a `'ASSINATURA_CONCLUIDA'`, sem acentos, espaços ou diferenças de caixa. Apresente o resultado da query.

**Passo 3: [P2 - MÉDIO] Blindagem da Query de Pagamentos**
1.  Abra o arquivo `server/repositories/pagamento.repository.ts`.
2.  Na função `getProposalsReadyForPayment`, refatore a lógica de aplicação de filtros para ser mais robusta.
    ```typescript
    // SUGESTÃO DE REATORAÇÃO:
    const conditions = [
      sql`${propostas.deletedAt} IS NULL`,
      eq(propostas.status, 'ASSINATURA_CONCLUIDA'), // Condição base sempre presente
    ];

    if (filters.periodo && filters.periodo !== 'todos') {
      // Adicionar lógica de período aqui
    }
    
    // O filtro 'incluir_pagos' deve ser tratado após a query principal ou com uma subquery, 
    // não como uma condição 'where' que pode entrar em conflito.
    // Avalie a melhor abordagem. Por agora, garanta que o filtro de status base não seja sobrescrito.
    ```

**Passo 4: [P3 - BAIXO] Validação Final**
1.  Execute `get_latest_lsp_diagnostics` em todo o projeto. O resultado deve ser **ZERO** erros.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]
* **VALIDAÇÃO PENDENTE:** O Executor Humano deve realizar um teste funcional completo do login e do fluxo de pagamentos em produção.
---