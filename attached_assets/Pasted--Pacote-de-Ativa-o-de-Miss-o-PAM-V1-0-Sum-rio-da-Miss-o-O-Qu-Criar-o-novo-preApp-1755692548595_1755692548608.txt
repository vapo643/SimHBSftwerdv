### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão (O Quê):** Criar o novo `preApprovalService.ts` e implementar a lógica de negócio de negação automática por comprometimento de renda, conforme a arquitetura definida em nosso debate de planejamento.
* **Intenção Estratégica (O Porquê):** Automatizar a primeira camada de análise de risco, aumentando a eficiência operacional ao rejeitar propostas inviáveis sem intervenção humana e garantindo que a lógica de negócio seja centralizada, robusta e resiliente.
* **Histórico Relevante (Consulta Obrigatória):** A arquitetura para este serviço foi exaustivamente detalhada na Interação 3 do nosso Debate de Planejamento. O pseudocódigo e as regras de tratamento de casos de borda definidos naquela interação são a fonte da verdade para esta implementação.
* **Modelo Mental (Como se Encaixa):** Este serviço atuará como um motor de decisão. Ele receberá dados de uma proposta, executará cálculos financeiros, aplicará uma regra de negócio e retornará um resultado estruturado (`PreApprovalResult`) que informará o próximo passo do fluxo, incluindo a transição de estado via FSM.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** Um erro de cálculo na fórmula de comprometimento de renda pode levar a aprovações ou rejeições incorretas.
    * **Contramedida:** O serviço deve incluir logging detalhado de todos os inputs e resultados do cálculo para garantir a auditabilidade. O tratamento de erro deve ser gracioso, direcionando para análise manual em caso de falha.

---

**IMPLEMENTAR:**
Serviço de Pré-Aprovação Automática

**CURRENT STATE:**
O schema do banco de dados agora suporta os campos necessários (`clienteRenda`, `clienteDividasExistentes`), mas a lógica de negócio para a regra de 25% de comprometimento de renda não existe.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo `server/services/preApprovalService.ts` é criado.
2.  O arquivo implementa e exporta uma classe `PreApprovalService` contendo a lógica detalhada no pseudocódigo da nossa sessão de planejamento.
3.  A lógica principal na função `checkIncomeCommitment` deve:
    * Validar se os dados financeiros necessários (`clienteRenda`, `clienteDividasExistentes`) existem. Se não, retornar um resultado indicando `pendingData: true` e o status `pendente`.
    * Calcular o percentual de comprometimento de renda, somando as dívidas existentes com a parcela da nova proposta.
    * Se o percentual for > 25%, retornar um resultado indicando `rejected: true` e o status `rejeitado`.
    * Se o percentual for <= 25%, retornar um resultado indicando `approved: true`.
    * Toda a lógica deve ser encapsulada em um bloco `try/catch`. Em caso de erro de cálculo, deve retornar um resultado indicando `error: true` e o status `aguardando_analise`.
4.  O serviço **NÃO** deve chamar diretamente a FSM. Ele deve retornar o resultado estruturado (`PreApprovalResult`) para que o `controller` que o chamou possa orquestrar a chamada à FSM.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Novo Serviço:** Crie o arquivo `server/services/preApprovalService.ts`.
2.  **Implemente a Classe:** Utilize o pseudocódigo da Interação 3 do nosso debate como o blueprint exato para a implementação da classe `PreApprovalService` e seus métodos (`checkIncomeCommitment`, `calculateMonthlyPayment`, `validateRequiredFinancialData`, `logPreApprovalDecision`).
3.  **Tipagem:** Defina e utilize as interfaces `PreApprovalResult` e `ValidationResult` dentro do arquivo para garantir a clareza e a segurança de tipos.
4.  **Ação Restrita:** Esta missão é focada **exclusivamente** na criação do serviço de lógica de negócio. **Não** o integre ainda no fluxo de `createProposal` em `propostas/core.ts`. A integração será o Passo 2.2.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a fórmula de cálculo de parcela (Price) fornecida no debate está correta."]
* **VALIDAÇÃO PENDENTE:** [A criação de testes unitários para este novo serviço é mandatória antes da integração em produção.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas (criação de `preApprovalService.ts`).
2.  Garantir que todas as importações e tipos estão corretos.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros no novo arquivo.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão lógica do código gerado para garantir que ele corresponde 100% à arquitetura que planejamos).
7.  **Documentar Decisões Técnicas**.