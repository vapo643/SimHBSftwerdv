### Pacote de Ativação de Missão (PAM) V1.0

* **Sumário da Missão:** Rastrear e auditar o fluxo de dados de frontend responsável por popular as listas de seleção de "Produtos" e "Tabelas Comerciais" na tela de criação de propostas.

* **Intenção Estratégica (O Porquê):** A role `ADMINISTRADOR` está atualmente bloqueada e não consegue criar propostas. Suspeitamos que o bloqueio ocorra porque a UI não consegue carregar os produtos e tabelas comerciais para este perfil. Precisamos mapear a cadeia de chamadas da API para confirmar a origem da falha e planejar a correção.

* **Histórico Relevante (Consulta Obrigatória):** A funcionalidade está operante para usuários com a role `ATENDENTE`, que possuem um `loja_id` associado. A falha é específica para roles sem `loja_id`, como `ADMINISTRADOR`.

---

**IMPLEMENTAR:**
Auditoria Forense do Fluxo de Dados do Formulário de Proposta.

**CURRENT STATE:**
Na tela de "Nova Proposta", os campos de seleção para "Produto" e "Tabela Comercial" não são populados quando o usuário logado é um `ADMINISTRADOR`.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria detalhado que apresente:
1.  O nome do componente React principal responsável pela etapa de "Condições de Empréstimo" (provavelmente `LoanConditionsStep.tsx`).
2.  Os nomes exatos dos hooks (`useQuery`) e as `queryKey` utilizadas para buscar a lista de **produtos**.
3.  O endpoint da API que é consumido para buscar os **produtos**.
4.  Os nomes exatos dos hooks (`useQuery`) e as `queryKey` utilizadas para buscar a lista de **tabelas comerciais**.
5.  O endpoint da API que é consumido para buscar as **tabelas comerciais**.
6.  Uma análise do código que faz essas chamadas, explicando se o `loja_id` do usuário é um parâmetro mandatório para a execução dessas queries.

**CONSTRAINTS (Roadmap de Auditoria):**
1.  Inicie a análise pelo arquivo `client/src/pages/propostas/nova.tsx` e seus componentes filhos.
2.  Foque no componente `client/src/components/propostas/LoanConditionsStep.tsx`.
3.  Dentro deste componente, localize todas as instâncias de `useQuery`.
4.  Para cada `useQuery` relevante, documente a `queryKey` e a função de `fetch` associada.
5.  Siga a função de `fetch` até o `apiClient.ts` para identificar o endpoint exato da API e os parâmetros que são enviados na requisição.