### Pacote de Ativação de Missão (PAM) V1.0 (Formalização da Estratégia de Testes)

* **Sumário da Missão (O Quê):** Gerar o documento `testing-strategy.md`, detalhando a nossa estratégia de testes formal para o projeto Simpix, com base nos "Subtópicos Obrigatórios" do Ponto 101 da nossa Doutrina Arquitetural.
* **Intenção Estratégica (O Porquê):** Criar uma "fonte da verdade" única para a nossa abordagem à qualidade de software. Este documento irá alinhar toda a equipa sobre como, o quê e quanto testar, garantindo que a nossa base de código se torne progressivamente mais robusta e à prova de regressões.
* **Histórico Relevante (Consulta Obrigatória):** A infraestrutura de testes (Vitest, Supertest, `db-helper`) está agora estável e funcional. Já temos exemplos de testes unitários e de integração de alta qualidade que servirão de base para esta estratégia.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de QA Líder (Lead QA Engineer). Sua tarefa é documentar a filosofia e a política de testes da empresa, transformando práticas ad-hoc em uma doutrina de engenharia formal.

---

**IMPLEMENTAR:**
Documento de Estratégia de Testes do Projeto Simpix

**CURRENT STATE:**
Temos uma infraestrutura de testes funcional, mas não temos uma estratégia documentada que defina as nossas metas, padrões e a distribuição de esforços de teste.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/08-quality/testing-strategy.md`, é criado. O arquivo deve conter, no mínimo, as seguintes seções, conforme o Ponto 101 da nossa doutrina:

1.  **A Pirâmide de Testes Simpix:** Uma seção que descreve a nossa adoção da pirâmide de testes, detalhando o propósito de cada camada:
    * **Testes Unitários:** O que são, quando os usamos (ex: `services`, lógica de domínio pura), e qual a ferramenta (`vitest`).
    * **Testes de Integração:** O que são, quando os usamos (ex: endpoints de API, interações com o banco de dados), e quais as ferramentas (`vitest`, `supertest`).
    * **Testes de Ponta a Ponta (E2E):** O que são e qual a nossa estratégia futura para eles (ex: `Playwright` ou `Cypress`).
2.  **Metas de Cobertura de Código (Code Coverage):** Uma definição das nossas metas de cobertura mínimas para o novo código (ex: `>80%` para testes unitários, `>70%` para testes de integração).
3.  **Estratégia de Testes de Contrato:** Uma seção que descreve a importância dos testes de contrato (CDC - Consumer-Driven Contracts) para as nossas integrações externas (Banco Inter, ClickSign) e a nossa intenção de adotar uma ferramenta como o `Pact`.
4.  **Estratégia de Testes de Mutação:** Uma breve seção que introduz o conceito de Testes de Mutação como um objetivo futuro para validar a eficácia da nossa suíte de testes.
5.  **Estratégia de Testes em Produção:** Uma seção que discute a nossa abordagem futura para Testes em Produção, utilizando as *Feature Flags* que já implementamos para realizar *canary releases* e validações seguras no ambiente de produção.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Arquivo:** Crie o arquivo `architecture/08-quality/testing-strategy.md`.
2.  **Use a Doutrina como Guia:** A estrutura do seu documento deve seguir os "Subtópicos Obrigatórios" do Ponto 101.
3.  **Seja Pragmático:** As estratégias para testes de contrato, mutação e em produção devem ser apresentadas como a nossa visão de futuro, reconhecendo que a implementação imediata se focará nos testes unitários e de integração.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que as metas de cobertura propostas são um ponto de partida realista para o nosso projeto."]
* **VALIDAÇÃO PENDENTE:** [O documento gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que todas as 5 seções obrigatórias são criadas no documento.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.