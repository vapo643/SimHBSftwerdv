### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria de Verificação Final)

* **Sumário da Missão (O Quê):** Gerar uma representação completa da árvore de diretórios do projeto e uma análise final da separação de responsabilidades (frontend/backend/database).
* **Intenção Estratégica (O Porquê):** Verificar e validar que a "Missão de Refatoração Estrutural V1" foi concluída com sucesso e que a arquitetura de pastas resultante é limpa, lógica e promove uma clara separação de responsabilidades, conforme os padrões de mercado.
* **Histórico Relevante (Consulta Obrigatória):** O projeto passou por uma refatoração massiva onde centenas de arquivos foram movidos para uma pasta de quarentena, e novas pastas como `public/` e `docs/` foram criadas. Esta missão verifica o resultado final de todas essas operações.
* **Modelo Mental (Como se Encaixa):** Esta é a "foto" final do projeto após a batalha. O Agente deve atuar como um topógrafo, mapeando o terreno final para a inspeção do Arquiteto Chefe.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O output pode ser muito "ruidoso", incluindo diretórios irrelevantes.
    * **Contramedida:** O prompt exige explicitamente a exclusão de diretórios de alto ruído como `node_modules` e `_legacy_diagnostics`.

---

**IMPLEMENTAR:**
Relatório Final de Estrutura de Arquivos e Análise de Arquitetura

**CURRENT STATE:**
O projeto foi extensivamente reorganizado. Uma avaliação final é necessária para confirmar se a nova estrutura está clara e bem definida.

**EXPECTED (Estado Final de Sucesso):**
Um relatório em formato Markdown contendo duas seções:

**1. Árvore de Diretórios Completa:**
   * Uma representação em formato de árvore (`tree`) da estrutura completa de arquivos e pastas do projeto.
   * A árvore deve ter uma profundidade suficiente (pelo menos 3 níveis) para mostrar os arquivos-chave dentro de cada diretório principal.
   * Os seguintes diretórios devem ser **excluídos** do output para manter a clareza: `node_modules`, `.git`, `_legacy_diagnostics`, `dist`.

**2. Análise da Separação de Responsabilidades:**
   * Com base na árvore de diretórios gerada, forneça uma análise concisa respondendo à seguinte pergunta:
   * "A nova estrutura de pastas deixa claro o que é **Frontend**, o que é **Backend**, o que é **Banco de Dados** e o que são as **demais responsabilidades (ex: código compartilhado, testes, scripts)**?"
   * Justifique sua resposta, apontando os diretórios-chave que definem cada uma dessas camadas (ex: `client/` para frontend, `server/` para backend, etc.).

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Use uma Ferramenta de Árvore:** Utilize um comando de terminal como `tree -L 3 -I "node_modules|.git|_legacy_diagnostics|dist"` ou um script equivalente para gerar a estrutura de diretórios.
2.  **Análise Objetiva:** A sua análise na Seção 2 deve ser baseada estritamente na estrutura de pastas apresentada na Seção 1.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que uma profundidade de 3 níveis é suficiente para a análise arquitetural."]
* **VALIDAÇÃO PENDENTE:** [A análise final e o selo de aprovação serão dados pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os ficheiros e diretórios a serem listados.
2.  Garantir que o comando para gerar a árvore e as exclusões estão corretos.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)** na precisão do relatório.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisar o relatório gerado para precisão e completude).
7.  **Documentar Decisões Técnicas** e a análise final de separação de responsabilidades.