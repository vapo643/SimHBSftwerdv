### Pacote de Ativação de Missão (PAM) V1.0 (Verificação de Ponta a Ponta do Fluxo de Dados)

* **Sumário da Missão (O Quê):** Validar se os dados de negócio (`parceiros`, `produtos`, `tabelas_comerciais`) que foram restaurados no banco de dados estão a ser corretamente buscados pela API e exibidos na interface do usuário.
* **Intenção Estratégica (O Porquê):** Confirmar que o problema de "telas vazias" foi completamente resolvido, validando a integridade de todo o fluxo de dados, desde o banco de dados até a renderização no navegador do usuário.
* **Histórico Relevante (Consulta Obrigatória):** A sua missão anterior restaurou com sucesso os dados no backend e confirmou que as APIs estão a retornar dados. Esta missão verifica se o frontend está a consumir esses dados corretamente.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de Quality Assurance (QA) de ponta a ponta. O Agente deve agir como um usuário final e um desenvolvedor frontend, verificando o comportamento da aplicação e inspecionando o código se necessário.

---

**IMPLEMENTAR:**
Relatório de Verificação de Exibição de Dados no Frontend

**CURRENT STATE:**
O banco de dados foi repopulado com dados de negócio essenciais. As APIs do backend estão a funcionar e a retornar estes dados. A interface do usuário estava anteriormente a exibir telas vazias.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de verificação conciso contendo:
1.  **Validação Visual:** Uma confirmação (Sim/Não) para cada uma das seguintes telas, indicando se os dados restaurados estão a aparecer corretamente:
    * Tela de listagem de Parceiros
    * Tela de listagem de Produtos
    * Tela de listagem de Tabelas Comerciais
    * Dropdowns/Seletores na tela de "Nova Proposta" que dependem destes dados.
2.  **Prova Visual:** Pelo menos uma captura de tela de uma das telas principais (ex: a de Produtos ou Tabelas Comerciais) mostrando os dados a serem exibidos em uma tabela ou lista.
3.  **Análise Final:** Se alguma tela ainda estiver vazia, execute uma análise de causa raiz rápida (inspecionando a `queryKey` do `useQuery` no componente relevante e o resultado no painel de "Network" do navegador) para identificar a desconexão.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Interaja com a UI:** Navegue pela aplicação como um usuário faria para aceder às diferentes telas.
2.  **Use as Ferramentas de Desenvolvedor:** Se encontrar uma tela vazia, abra o painel de "Network" nas ferramentas de desenvolvedor do navegador para verificar se a chamada de API correspondente está a ser feita e qual é a sua resposta.
3.  **Foco na Verificação:** O objetivo principal é verificar. Apenas investigue o código se a verificação visual falhar.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100% de confiança na sua verificação]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que as rotas do frontend para visualizar estes dados estão acessíveis e não foram afetadas."]
* **VALIDAÇÃO PENDENTE:** [Nenhuma. Esta missão é a própria validação.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear os componentes e telas exatas a serem verificados.
2.  Garantir que a verificação cobre todas as 4 entidades de dados.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (navegar pelas telas e capturar a prova visual).
7.  **Documentar Decisões Técnicas** e a análise final.