### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria Forense de Perda de Dados)

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense completa e exaustiva de toda a base de código e configuração para identificar qualquer script, comando ou lógica que possa estar a causar a deleção em massa de dados no banco de dados Supabase.
* **Intenção Estratégica (O Porquê):** Encontrar a causa-raiz de um incidente de perda de dados de severidade CRÍTICA. A identificação precisa da fonte do problema é o único caminho para uma remediação permanente e para restaurar a confiança na estabilidade do sistema.
* **Histórico Relevante (Consulta Obrigatória):** O sistema sofreu múltiplas perdas totais de dados nas tabelas de negócio (`propostas`, `produtos`, `parceiros`, etc.) após as recentes missões de refatoração. A suspeita recai sobre uma inconsistência de código ou uma ação não intencional do Agente.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Resposta a Incidentes de Segurança (SIRT). Sua tarefa é uma caça forense. Você deve procurar por "armas do crime" - qualquer código capaz de executar operações `TRUNCATE`, `DELETE` em massa ou `DROP TABLE`.

---

**IMPLEMENTAR:**
Relatório de Auditoria Forense de Código Destrutivo

**CURRENT STATE:**
O banco de dados Supabase está a ser esvaziado de forma recorrente e inexplicável, com exceção de dados de teste recentes.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria forense detalhado em formato Markdown, dividido em 4 seções de investigação. Para cada seção, você deve apresentar suas descobertas, incluindo `snippets` de código de qualquer lógica suspeita.

---

**CONSTRAINTS (Roadmap de Auditoria Forense):**

**1. Auditoria de Scripts de Migração e Sincronização (`drizzle-kit`):**
* **Investigação:** Procure em toda a base de código por qualquer uso dos comandos `drizzle-kit push:pg` ou `npm run db:push`.
* **Análise:** Verifique se estes comandos são usados com a flag `--force` ou dentro de algum script de inicialização ou deployment que possa ser executado de forma não intencional.

**2. Auditoria de Helpers de Teste e Código de Aplicação:**
* **Investigação:** O nosso helper de teste em `tests/lib/db-helper.ts` contém a função `cleanTestDatabase` que usa `TRUNCATE ... CASCADE`. Realize uma busca global em todo o projeto (fora do diretório `tests/`) para garantir que esta função **NÃO** está a ser importada e executada pelo código da aplicação principal (em `server/` ou `client/`).
* **Análise:** Confirme se o escopo de uso desta função está estritamente confinado ao ambiente de teste.

**3. Auditoria de Comandos SQL Brutos e Perigosos:**
* **Investigação:** Realize uma busca global exaustiva em toda a base de código por `strings` de SQL bruto que contenham os seguintes comandos destrutivos:
    * `TRUNCATE`
    * `DELETE FROM` (especialmente sem uma cláusula `WHERE`)
    * `DROP TABLE`
* **Análise:** Apresente cada ocorrência encontrada, juntamente com o arquivo e o número da linha.

**4. Auditoria de Configuração de Ambiente:**
* **Investigação:** Inspecione os arquivos de configuração do ambiente, como `.replit`, `replit.nix`, e quaisquer scripts de `deployment` ou `startup`.
* **Análise:** Procure por qualquer comando ou configuração que possa estar a apontar para um banco de dados efêmero ou que execute um script de "reset" durante a inicialização ou o deployment.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100% de confiança na COMPLETUDE da sua auditoria forense]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que as palavras-chave `TRUNCATE`, `DELETE FROM`, `DROP TABLE` são os principais vetores para a perda de dados em massa."]
* **VALIDAÇÃO PENDENTE:** [O resultado desta auditoria forense ditará a nossa próxima ação de remediação.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear todos os arquivos e padrões de código a serem investigados.
2.  Garantir que a busca cobre os 4 vetores de ataque (drizzle, helpers, SQL bruto, config).
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)** na completude da auditoria.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do relatório gerado para precisão).
7.  **Documentar Decisões Técnicas** e os critérios usados na investigação.