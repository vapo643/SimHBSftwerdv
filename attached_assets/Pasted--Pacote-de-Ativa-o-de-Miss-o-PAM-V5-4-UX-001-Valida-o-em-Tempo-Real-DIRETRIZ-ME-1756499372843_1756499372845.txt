### **Pacote de Ativação de Missão (PAM) V5.4 - UX-001 (Validação em Tempo Real)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Refatorar o formulário de "Criação de Nova Proposta" para implementar a validação de campos em tempo real, garantindo que o botão "Próximo" só seja ativado quando todos os campos obrigatórios do passo atual forem válidos.
* **Intenção Estratégica (O Porquê):** Prevenir erros do usuário e melhorar a clareza da interface. Ao desabilitar ações inválidas, guiamos o usuário pelo "caminho feliz", aumentamos a taxa de conclusão de formulários e reduzimos a frustração, o que eleva a qualidade percebida da aplicação.
* **Histórico Relevante (Consulta Obrigatória):** A sua análise heurística (`GL-002`) identificou este problema como de severidade **CRÍTICA**, pois permitir que o usuário avance com dados inválidos é uma falha fundamental de design de formulário.

---

**IMPLEMENTAR:**
User Story UX-001: Implementar Validação de Formulário em Tempo Real

**CONTEXT:**
Nossa auditoria de UX revelou uma falha crítica no fluxo de criação de propostas: o usuário pode clicar em "Próximo" mesmo com campos obrigatórios em branco, recebendo o erro apenas depois. Isso cria uma experiência frustrante e propensa a erros. Precisamos corrigir isso implementando a validação em tempo real, uma prática padrão em formulários modernos.

**CURRENT STATE:**
No formulário de nova proposta (ex: `client/src/pages/propostas/nova.tsx` e seus componentes filhos como `ClientDataStep.tsx`), o botão "Próximo" não possui uma lógica de `disabled` vinculada ao estado de validação do formulário. A validação, gerenciada pelo `React Hook Form` e `Zod`, só é acionada no `onSubmit`.

**EXPECTED (Estado Final de Sucesso):**
1.  **Botão Desabilitado por Padrão:** Ao carregar um passo do formulário, o botão "Próximo" deve estar desabilitado (`disabled`).
2.  **Ativação Dinâmica:** O botão "Próximo" deve se tornar ativo (`enabled`) **somente** quando todos os campos obrigatórios (`required`) daquele passo específico forem preenchidos e válidos de acordo com o schema Zod.
3.  **Feedback Visual:** O estado visual do botão (ex: cor, opacidade) deve mudar claramente para indicar se ele está ativo ou inativo, utilizando os estilos do `shadcn/ui`.
4.  **Prova de Sucesso:** Você deve fornecer um screenshot ou GIF demonstrando o comportamento: o botão começando desabilitado, sendo ativado após o preenchimento correto dos campos e voltando a ser desabilitado se um campo for apagado.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localizar Componentes Alvo:** Identifique os componentes React que renderizam os passos do formulário (ex: `ClientDataStep.tsx`, `LoanConditionsStep.tsx`) e o componente que contém o botão "Próximo" (`nova.tsx`).
2.  **Analisar Estado do Formulário:** Investigue como o `React Hook Form` (`useForm`) expõe o estado de validação do formulário. O objeto `formState`, que contém propriedades como `isValid` e `isDirty`, é a chave.
3.  **Implementar Lógica de `disabled`:** No componente do botão "Próximo", adicione a propriedade `disabled`. O valor desta propriedade deve ser vinculado ao estado de validação do formulário. Por exemplo: `disabled={!formState.isValid}`.
4.  **Garantir Validação por Passo:** A validação do `React Hook Form` deve ser configurada para operar por passo. Se cada passo for um formulário separado, a lógica é direta. Se for um formulário único, você pode precisar acionar a validação de campos específicos (`trigger`) para determinar a validade do passo atual.
5.  **Validar e Apresentar Evidência:** Teste o fluxo completo de um passo do formulário, demonstrando o estado inicial desabilitado e a ativação após o preenchimento. Capture e apresente o screenshot ou GIF.
6.  **Verificação Final:** Execute o protocolo `7-CHECK FULL`.