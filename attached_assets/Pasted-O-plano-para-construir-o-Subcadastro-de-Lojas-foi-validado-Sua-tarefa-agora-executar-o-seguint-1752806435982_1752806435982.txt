O plano para construir o "Subcadastro de Lojas" foi validado.

Sua tarefa agora é executar o seguinte plano de 2 etapas:

**1. Crie o Componente do Formulário da Loja:**
Crie um novo arquivo no caminho `/client/src/components/parceiros/LojaForm.tsx` e cole exatamente o seguinte código dentro dele:
```typescript
import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

const lojaSchema = z.object({
  nome: z.string().min(3, "Nome da loja é obrigatório."),
  endereco: z.string().min(10, "Endereço é obrigatório."),
});

type LojaFormData = z.infer<typeof lojaSchema>;

interface LojaFormProps {
  onSubmit: (data: LojaFormData) => void;
  onCancel: () => void;
}

const LojaForm: React.FC<LojaFormProps> = ({ onSubmit, onCancel }) => {
  const { register, handleSubmit, formState: { errors } } = useForm<LojaFormData>({
    resolver: zodResolver(lojaSchema),
  });

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <Label htmlFor="nome">Nome da Loja</Label>
        <Input id="nome" {...register("nome")} />
        {errors.nome && <p className="text-red-500 text-sm mt-1">{errors.nome.message}</p>}
      </div>
      <div>
        <Label htmlFor="endereco">Endereço Completo</Label>
        <Input id="endereco" {...register("endereco")} />
        {errors.endereco && <p className="text-red-500 text-sm mt-1">{errors.endereco.message}</p>}
      </div>
      <div className="flex justify-end gap-2 pt-4">
        <Button type="button" variant="ghost" onClick={onCancel}>Cancelar</Button>
        <Button type="submit">Salvar Loja</Button>
      </div>
    </form>
  );
};

export default LojaForm;
2. Integre o Subcadastro na Página de Detalhe:
Agora, substitua todo o conteúdo do arquivo /client/src/pages/parceiros/detalhe.tsx pelo seguinte código atualizado, que integra a tabela e o formulário de lojas:

TypeScript

import React, { useState } from 'react';
import { useRoute, Link } from 'wouter';
import DashboardLayout from '@/components/DashboardLayout';
import { mockPartners } from '@/data/partners';
import ConfiguracaoComercialForm from '@/components/parceiros/ConfiguracaoComercialForm';
import LojaForm from '@/components/parceiros/LojaForm';
import { Button } from '@/components/ui/button';
import { Table, TableHeader, TableBody, TableHead, TableRow, TableCell } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

const PartnerDetailPage: React.FC = () => {
  const [match, params] = useRoute("/parceiros/detalhe/:id");
  const id = params ? params.id : null;
  const partner = mockPartners.find(p => p.id === id);
  
  const [isLojaModalOpen, setIsLojaModalOpen] = useState(false);

  const handleAddStore = (data: any) => {
    console.log("Nova Loja Adicionada:", data);
    // Lógica para adicionar a loja ao parceiro no estado/backend será implementada na Fase 2
    setIsLojaModalOpen(false);
  };

  if (!partner) {
    return (
      <DashboardLayout title="Parceiro não encontrado">
        <p>Parceiro não encontrado. <Link to="/parceiros">Voltar para a lista.</Link></p>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout title={`Detalhe do Parceiro: ${partner.nomeFantasia}`}>
      <h1 className="text-2xl font-bold">{partner.razaoSocial}</h1>
      <p className="text-muted-foreground">CNPJ: {partner.cnpj}</p>
      
      <div className="mt-8 grid gap-8">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Lojas</CardTitle>
            <Button onClick={() => setIsLojaModalOpen(true)}>Adicionar Nova Loja</Button>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Nome da Loja</TableHead>
                  <TableHead>Endereço (a ser adicionado)</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {partner.lojas.map(loja => (
                  <TableRow key={loja.id}>
                    <TableCell>{loja.nome}</TableCell>
                    <TableCell>Endereço a ser implementado</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        <ConfiguracaoComercialForm />
      </div>
      
      {/* Modal para cadastrar nova loja */}
      <Dialog open={isLojaModalOpen} onOpenChange={setIsLojaModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Adicionar Nova Loja</DialogTitle>
          </DialogHeader>
          <LojaForm
            onSubmit={handleAddStore}
            onCancel={() => setIsLojaModalOpen(false)}
          />
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
};

export default PartnerDetailPage;
Execute este plano e confirme a conclusão.