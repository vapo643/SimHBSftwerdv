### **Pacote de Ativação de Missão (PAM) V1.0 - RECONSTRUÇÃO DE INTEGRIDADE DE DADOS (PONTO-A-PONTO)**

* **Sumário da Missão:** Realizar uma auditoria e correção de ponta-a-ponta no ciclo de vida dos dados da proposta. Primeiro, garantir que todos os dados do cliente (Email, Telefone, etc.) e das condições do empréstimo (Finalidade, Garantia, etc.) sejam **salvos** corretamente durante a criação/atualização da proposta. Segundo, garantir que todos esses dados sejam **lidos** e mapeados corretamente ao buscar uma proposta individual para a tela de análise.

* **Intenção Estratégica:** Erradicar completamente o problema de dados "N/A" na tela de Análise, restaurando a funcionalidade completa para os `ANALISTAS` e a confiança na integridade dos dados da plataforma.

* **Contexto Técnico:** A evidência de campo mostra uma falha dupla. **Hipótese 1 (Falha na Escrita):** Os dados do cliente e das condições do empréstimo podem não estar a ser persistidos no banco de dados pelos `UseCases` de criação/atualização. **Hipótese 2 (Falha na Leitura):** O método `findById` no `ProposalRepository` possui uma query ou um mapeamento incompleto. Ambas as hipóteses devem ser validadas e corrigidas.

---

**IMPLEMENTAR:**
Correção Completa do Ciclo de Vida dos Dados da Proposta (Escrita e Leitura)

**CURRENT STATE:**
A tela de Análise de Proposta (`/credito/analise/:id`) exibe múltiplos campos de "Dados do Cliente" e "Condições do Empréstimo" como "N/A". As correções anteriores foram insuficientes e focaram apenas nos sintomas.

**EXPECTED (Estado Final de Sucesso):**
1.  **TODOS** os dados do cliente (Nome, CPF, Email, Telefone, Data de Nascimento, Renda, etc.) e das condições do empréstimo (Valor, Prazo, Finalidade, Garantia, TAC, IOF, etc.) são exibidos corretamente na tela de Análise de Proposta.
2.  Para alcançar isso, os métodos `create` e `update` no `ProposalRepository` (e os `UseCases` que os chamam) devem persistir todos os dados relevantes.
3.  Adicionalmente, o método `findById` no `ProposalRepository` deve ler e mapear todos estes dados para o DTO do frontend.

**CONSTRAINTS (Roadmap de Implementação de Múltiplas Frentes):**

**FASE 1: AUDITORIA E CORREÇÃO DA CAMADA DE ESCRITA (PERSISTÊNCIA)**
1.  **Auditoria do `CreateProposalUseCase`:** Navegue até `server/modules/proposal/application/CreateProposalUseCase.ts`. Apresente o código do método `execute`. Verifique se os dados do cliente (`clienteData`) e as condições do empréstimo (`condicoesData`, `finalidade`, `garantia`) recebidos no `command` estão a ser passados integralmente para o Agregado `Proposal` e, subsequentemente, para `proposalRepository.save()`.
2.  **Auditoria do `ProposalRepository.save()`:** Navegue até `server/modules/proposal/infrastructure/ProposalRepository.ts`. Apresente o código do método `save`. Verifique se a query de `INSERT` ou `UPDATE` inclui **todos os campos** recebidos, especialmente `finalidade`, `garantia`, e se o objeto `clienteData` está a ser serializado como JSON e salvo na coluna correta.
3.  **Correção Mandatória:** Se forem encontradas discrepâncias (campos em falta no `INSERT`/`UPDATE`), refatore imediatamente o método `save` para garantir que **100% dos dados da proposta** sejam persistidos. Adicione `finalidade` e `garantia` às queries se estiverem em falta.

**FASE 2: RE-AUDITORIA E CORREÇÃO FINAL DA CAMADA DE LEITURA**
1.  **Auditoria do `findById`:** No mesmo ficheiro `ProposalRepository.ts`, revise novamente o método `findById`. A hipótese é que os `JOINs` com a tabela `clientes` e `produtos` estão em falta ou incompletos na query.
2.  **Reconstrução da Query `findById`:** Refatore a query Drizzle ORM dentro do `findById`. Ela **DEVE** ser estruturalmente idêntica à query do método `findByCriteriaLightweight` (que já foi validado como funcional para a listagem), incluindo todos os `leftJoin` (`clientes`, `produtos`, `tabelasComerciais`, `lojas`, `parceiros`) e a seleção explícita de todos os campos necessários das tabelas juntadas.
3.  **Validação do Mapeamento:** Garanta que o resultado da nova query completa seja processado pelo mapeador `mapRowToProposalDTO` para assegurar a consistência do contrato de dados.

**FASE 3: VALIDAÇÃO FINAL**
1.  Execute `get_latest_lsp_diagnostics` para confirmar que não há erros de compilação.
2.  Valide visualmente na UI que **TODOS** os campos na tela de Análise de Proposta estão agora a ser exibidos corretamente.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 90%
* **RISCOS IDENTIFICADOS:** **MÉDIO** - O risco principal é que a "grande refatoração" tenha danificado a lógica de negócio dentro do Agregado `Proposal` (`Proposal.ts`), para além da camada de repositório. Se a correção no repositório não for suficiente, uma investigação mais profunda no domínio será necessária.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que o schema da base de dados e os tipos partilhados (`shared/schema.ts`) estão corretos e que a falha reside exclusivamente na lógica da aplicação (camadas de aplicação e infraestrutura).
* **VALIDAÇÃO PENDENTE:** O QA (GEM 03) deve executar o teste mais crítico: **criar uma NOVA proposta do zero**, preenchendo todos os campos, e depois navegar para a tela de análise para verificar se 100% dos dados foram persistidos e são exibidos corretamente. Este teste validará tanto a camada de escrita quanto a de leitura.