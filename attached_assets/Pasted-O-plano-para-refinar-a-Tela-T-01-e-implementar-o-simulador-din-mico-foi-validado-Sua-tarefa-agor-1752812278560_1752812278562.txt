O plano para refinar a "Tela T-01" e implementar o simulador dinâmico foi validado.

Sua tarefa agora é executar a atualização. Por favor, substitua todo o conteúdo do arquivo `/client/src/pages/propostas/nova.tsx` pelo seguinte código exato, que combina a estrutura de abas existente com a nova lógica de chamada de API em tempo real:

```typescript
import React, { useState, useEffect } from 'react';
import DashboardLayout from '@/components/DashboardLayout';
import { useForm, Controller, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Checkbox } from '@/components/ui/checkbox';
import DadosClienteForm from '@/components/forms/DadosClienteForm';
import { useToast } from '@/hooks/use-toast';

const fullProposalSchema = z.object({
  clienteNome: z.string().min(3, "Nome é obrigatório"),
  clienteCpf: z.string().length(14, "CPF deve ter 14 dígitos."),
  clienteEmail: z.string().email("Email inválido."),
  valorSolicitado: z.coerce.number().positive("Valor deve ser positivo"),
  produto: z.string().nonempty("Produto é obrigatório."),
  prazo: z.string().nonempty("Prazo é obrigatório."),
  incluirTac: z.boolean().default(false),
  // Adicione outros campos conforme necessário
});

type FullFormData = z.infer<typeof fullProposalSchema>;

const NovaProposta: React.FC = () => {
    const { register, handleSubmit, control, watch, formState: { errors } } = useForm<FullFormData>({
        resolver: zodResolver(fullProposalSchema),
    });
    
    const { toast } = useToast();
    const [resumoSimulacao, setResumoSimulacao] = useState<any>(null);
    const [loadingSimulacao, setLoadingSimulacao] = useState(false);

    const valorSolicitado = watch("valorSolicitado");
    const prazo = watch("prazo");
    const produto = watch("produto");

    useEffect(() => {
        const handleSimulacao = async () => {
            if (valorSolicitado > 0 && prazo && produto) {
                setLoadingSimulacao(true);
                try {
                    // Aqui chamaria a API real. Usando um timeout para simular a chamada de rede.
                    await new Promise(resolve => setTimeout(resolve, 500));
                    const valorParcela = (valorSolicitado * 1.05) / parseInt(prazo); // Lógica de cálculo placeholder
                    const cet = 5.2; // Lógica de cálculo placeholder
                    setResumoSimulacao({ valorParcela, cet });
                } catch (error) {
                    toast({ title: "Erro na Simulação", description: "Não foi possível calcular os valores.", variant: "destructive" });
                } finally {
                    setLoadingSimulacao(false);
                }
            }
        };
        handleSimulacao();
    }, [valorSolicitado, prazo, produto, toast]);

    const onSubmit: SubmitHandler<FullFormData> = data => {
        console.log("DADOS COMPLETOS DA PROPOSTA:", data);
        toast({ title: "Proposta Enviada com Sucesso!", description: "Os dados foram registrados no console." });
    };

    return (
        <DashboardLayout title="Nova Proposta de Crédito">
            <form onSubmit={handleSubmit(onSubmit)}>
                <Tabs defaultValue="dados-cliente" className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                        <TabsTrigger value="dados-cliente">Dados do Cliente</TabsTrigger>
                        <TabsTrigger value="condicoes-emprestimo">Condições do Empréstimo</TabsTrigger>
                        <TabsTrigger value="anexo-documentos">Anexo de Documentos</TabsTrigger>
                    </TabsList>

                    <TabsContent value="dados-cliente">
                        <div className="p-4 border rounded-md mt-4">
                            <DadosClienteForm register={register} errors={errors} />
                        </div>
                    </TabsContent>

                    <TabsContent value="condicoes-emprestimo">
                        <div className="space-y-4 p-4 border rounded-md mt-4">
                             <div>
                                <Label htmlFor="valorSolicitado">Valor Solicitado</Label>
                                <Input id="valorSolicitado" type="number" {...register('valorSolicitado')} placeholder="R$ 0,00" />
                                {errors.valorSolicitado && <p className="text-red-500 text-sm mt-1">{errors.valorSolicitado.message}</p>}
                            </div>
                            <div>
                                <Label>Produto de Crédito</Label>
                                <Controller name="produto" control={control} render={({ field }) => (
                                    <Select onValueChange={field.onChange} defaultValue={field.value}><SelectTrigger><SelectValue placeholder="Selecione..." /></SelectTrigger><SelectContent><SelectItem value="pessoal">Crédito Pessoal</SelectItem></SelectContent></Select>
                                )} />
                                {errors.produto && <p className="text-red-500 text-sm mt-1">{errors.produto.message}</p>}
                            </div>
                            <div>
                                <Label>Prazo de Pagamento</Label>
                                <Controller name="prazo" control={control} render={({ field }) => (
                                    <Select onValueChange={field.onChange} defaultValue={field.value}><SelectTrigger><SelectValue placeholder="Selecione..." /></SelectTrigger><SelectContent><SelectItem value="12">12 meses</SelectItem><SelectItem value="24">24 meses</SelectItem></SelectContent></Select>
                                )} />
                                {errors.prazo && <p className="text-red-500 text-sm mt-1">{errors.prazo.message}</p>}
                            </div>
                            <div className="flex items-center space-x-2">
                                <Controller name="incluirTac" control={control} render={({ field }) => <Checkbox id="incluirTac" checked={field.value} onCheckedChange={field.onChange} />} />
                                <Label htmlFor="incluirTac">Incluir TAC na operação?</Label>
                            </div>
                            <div>
                                <Label>Resumo da Simulação</Label>
                                <Textarea readOnly value={loadingSimulacao ? "Calculando..." : (resumoSimulacao ? `Valor da Parcela: ${resumoSimulacao.valorParcela.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\nCET Anual: ${resumoSimulacao.cet}%` : "Preencha os campos para simular.")} rows={4} />
                            </div>
                        </div>
                    </TabsContent>

                    <TabsContent value="anexo-documentos">
                        <div className="space-y-4 p-4 border rounded-md mt-4">
                            <p>Funcionalidade de upload a ser implementada.</p>
                        </div>
                    </TabsContent>
                </Tabs>
                <div className="flex justify-end pt-6 mt-4">
                    <Button type="submit">Enviar Proposta</Button>
                </div>
            </form>
        </DashboardLayout>
    );
};

export default NovaProposta;
Execute este plano.