### Pacote de Ativação de Missão (PAM) V1.0 - Operação "Torre de Vigia" / Missão 1: Dashboard de Filas

* **Sumário da Missão (O Quê):** Desenvolver o componente de frontend para o Dashboard de Monitoramento, focando na visualização em tempo real do estado das filas BullMQ.
* **Intenção Estratégica (O Porquê):** Fornecer à equipe de operações uma visão imediata e centralizada da saúde do nosso sistema assíncrono, permitindo a deteção rápida de anomalias (ex: acúmulo de *jobs* em espera ou na DLQ).
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de frontend especialista em visualização de dados. Sua tarefa é criar uma interface clara, concisa e funcional que consuma os dados do nosso endpoint de monitoramento e os apresente de forma intuitiva.

---

**IMPLEMENTAR (Plano de Implementação):**
Execute a seguinte sequência de ações.

**CURRENT STATE:**
O backend possui um endpoint `GET /api/monitoring/queues/metrics` que retorna um JSON estruturado com o estado de todas as filas. O frontend precisa de uma nova página para consumir e exibir estes dados.

**EXPECTED (Estado Final de Sucesso):**
1.  Uma nova página protegida (`/admin/monitoring/dashboard`) existe no frontend.
2.  A página busca dados do endpoint `/api/monitoring/queues/metrics` a cada 10 segundos.
3.  Os dados são exibidos numa tabela ou numa série de *cards*, mostrando para cada fila (`formalization-queue`, `dead-letter-queue`, etc.) as contagens de *jobs* (total, ativos, completos, falhados).
4.  Indicadores visuais (ex: cor vermelha) são usados para destacar métricas que ultrapassam os *thresholds* de alerta definidos na resposta da API.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Criar a Estrutura da Página e Rota**
1.1. Crie um novo ficheiro de página em `client/src/pages/admin/monitoring/dashboard.tsx`.
1.2. Adicione uma nova rota protegida no sistema de roteamento (`wouter`) para o caminho `/admin/monitoring/dashboard`, que renderize o novo componente. Garanta que esta rota seja acessível apenas para utilizadores com o `Role` de `ADMINISTRADOR`.

**Passo 2: Implementar a Lógica de Busca de Dados**
2.1. Na nova página, utilize o `TanStack Query` (`useQuery`) para buscar os dados do endpoint `GET /api/monitoring/queues/metrics`.
2.2. Configure o `useQuery` para refazer a busca automaticamente a cada 10 segundos (`refetchInterval: 10000`).

**Passo 3: Desenvolver os Componentes de Visualização**
3.1. Crie um componente de `Card` (usando `shadcn/ui`) para cada fila retornada pela API.
3.2. Dentro de cada *card*, exiba as métricas principais: `totalJobs`, `activeJobs`, `completedJobs`, `failedJobs`.
3.3. Para o *card* da `dead-letter-queue`, dê um destaque especial ao `dlqSize`.
3.4. Implemente uma lógica condicional para que, se qualquer um dos alertas (`highFailureRate`, `slowProcessing`, `highDLQSize`) estiver `true` na resposta da API, o *card* correspondente seja estilizado com uma borda vermelha ou um ícone de alerta.

**Passo 4: Validação Final**
4.1. Apresente o código completo do novo ficheiro da página `dashboard.tsx`.
4.2. Apresente o código da nova rota adicionada.
4.3. Execute `get_latest_lsp_diagnostics` para confirmar que não há erros de compilação.

---

### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**
Liste a totalidade das suas descobertas, riscos e recomendações.
---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS (LISTA COMPLETA):**
    * **Risco 1 (Baixo):** A gestão do estado de *loading* e *error* do `useQuery` deve ser implementada corretamente para evitar uma UI "a piscar".
    * **Risco 2 (Baixo):** O RBAC para a nova rota administrativa deve ser testado.
* **DECISÕES TÉCNICAS ASSUMIDAS (LISTA COMPLETA):**
    * A UI será construída utilizando componentes `shadcn/ui`.
    * O `TanStack Query` é a ferramenta canónica para esta tarefa.
* **VALIDAÇÃO PENDENTE (LISTA COMPLETA):**
    * A UI final deve ser validada visualmente.
    * O controlo de acesso à nova rota precisa de ser testado com diferentes perfis.