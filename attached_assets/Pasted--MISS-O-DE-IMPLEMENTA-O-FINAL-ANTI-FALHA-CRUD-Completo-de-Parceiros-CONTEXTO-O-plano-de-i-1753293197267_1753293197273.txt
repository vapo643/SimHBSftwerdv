# MISSÃO DE IMPLEMENTAÇÃO FINAL (ANTI-FALHA): CRUD Completo de Parceiros

**CONTEXTO:** O plano de implementação foi debatido e finalizado. Esta missão contém a arquitetura aprovada para a funcionalidade full-stack de Update e Delete para a "Gestão de Parceiros".

**AÇÃO:** Implemente a funcionalidade completa, seguindo rigorosamente o roadmap de "feature slice" abaixo.

**ROADMAP DE EXECUÇÃO:**

---
**SLICE 1: FUNCIONALIDADE DE ATUALIZAÇÃO (UPDATE)**

* **1.1 (Backend): Implemente o Endpoint `PUT /api/admin/parceiros/:id`**
    * **Autorização:** A rota DEVE ser protegida por um middleware que garanta que apenas usuários com a `role` de 'ADMINISTRADOR' possam aceder. Se a verificação falhar, retorne um status `403 Forbidden`.
    * **Validação:** Utilize um schema Zod para validar o corpo da requisição. Se a validação falhar, retorne `400 Bad Request`.
    * **Lógica:** Atualize o parceiro no banco de dados.
    * **Resposta de Sucesso:** Retorne o objeto do parceiro atualizado e um status `200 OK`.

* **1.2 (Frontend): Integre a Funcionalidade de "Editar"**
    * **Ficheiro Alvo:** `/client/src/pages/parceiros/index.tsx` (ou similar).
    * **Lógica de Submissão:** Conecte a submissão do formulário de edição para chamar a `mutation` do TanStack Query que aponta para o endpoint `PUT`.
    * **Experiência do Usuário (UX):**
        * O botão "Salvar" no formulário DEVE ficar desabilitado e exibir um texto/ícone de "carregando" (`isLoading`) enquanto a `mutation` estiver em execução.
        * Exiba uma notificação "toast" de **sucesso** (ex: "Parceiro atualizado com sucesso!") quando a API retornar sucesso.
        * Exiba uma notificação "toast" de **erro** com a mensagem da API quando a `mutation` falhar.
    * **Atualização de Estado:** Em caso de sucesso, utilize `queryClient.invalidateQueries({ queryKey: ['partners'] })` para atualizar automaticamente a lista de parceiros na tabela.

---
**SLICE 2: FUNCIONALIDADE DE EXCLUSÃO (DELETE)**

* **2.1 (Backend): Implemente o Endpoint `DELETE /api/admin/parceiros/:id`**
    * **Autorização:** A rota DEVE ser protegida pelo mesmo `adminMiddleware` da etapa 1.1.
    * **Regra de Negócio:** Antes de excluir, verifique se o parceiro possui `Lojas` associadas. Se sim, bloqueie a operação e retorne um status `409 Conflict` com uma mensagem clara.
    * **Resposta de Sucesso:** Se a exclusão for permitida e bem-sucedida, a API DEVE retornar um status **`204 No Content`**, sem nenhum corpo na resposta.

* **2.2 (Frontend): Integre a Funcionalidade de "Excluir"**
    * **Ficheiro Alvo:** `/client/src/pages/parceiros/index.tsx` (ou similar).
    * **Lógica de Submissão:** Conecte o botão "Excluir", após uma janela de confirmação, para chamar a `mutation` do TanStack Query que aponta para o endpoint `DELETE`.
    * **Experiência do Usuário (UX):**
        * O botão "Excluir" pode ficar desabilitado (`isLoading`) enquanto a `mutation` de exclusão estiver em execução.
        * Exiba uma notificação "toast" de **sucesso** em caso de sucesso.
        * Exiba uma notificação "toast" de **erro** com a mensagem da API em caso de falha (especialmente para o erro `409`).
    * **Atualização de Estado:** Em caso de sucesso, utilize `queryClient.invalidateQueries({ queryKey: ['partners'] })` para remover o parceiro da lista na interface.
