### Pacote de Ativação de Missão (PAM) V1.0 (Implementação de Validação de Runtime nos Testes)

* **Sumário da Missão (O Quê):** Adicionar um hook de validação `beforeAll` nas principais suítes de teste de integração para garantir que elas só possam ser executadas contra um banco de dados explicitamente designado para testes.
* **Intenção Estratégica (O Porquê):** Criar uma segunda camada de defesa redundante (defense-in-depth). Enquanto a primeira guarda protege a *função destrutiva*, esta segunda guarda protege o *executor de testes* em si, impedindo que toda a suíte de testes sequer comece se o ambiente estiver configurado de forma insegura.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior protegeu a função `cleanTestDatabase`. Esta missão protege o ponto de entrada que a chama. Os arquivos de teste de integração, como `tests/integration/status-system.test.ts` e `propostas-tac-authenticated.test.ts`, foram identificados como os principais pontos de execução.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de programação defensiva no nível da suíte de testes. O Agente irá adicionar uma verificação de pré-condição global (`beforeAll`) que é executada uma vez antes de qualquer teste no arquivo, agindo como um "portão de segurança" para a suíte de testes.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** A string de verificação (`'test'`) pode ser muito genérica e causar falsos positivos/negativos.
    * **Contramedida:** Para o estado atual do projeto, esta verificação é uma melhoria de segurança massiva e suficiente. A solução estrutural de longo prazo (FASE 2) irá usar uma variável de ambiente dedicada.

---

**IMPLEMENTAR:**
Validação de Ambiente de Banco de Dados nos Testes

**CURRENT STATE:**
As suítes de teste de integração (`vitest`) executam contra qualquer `DATABASE_URL` fornecida no ambiente, sem uma verificação interna para garantir que a conexão aponta para um banco de dados de teste.

**EXPECTED (Estado Final de Sucesso):**
1.  Os principais arquivos de teste de integração (pelo menos `tests/integration/status-system.test.ts` e `propostas-tac-authenticated.test.ts`) são modificados.
2.  No início de cada `describe` block, um hook `beforeAll` é adicionado.
3.  Este hook implementa uma lógica de verificação que confirma se a string de conexão `process.env.DATABASE_URL` inclui a substring `'test'`.
4.  Se a condição for **falsa** (a string `'test'` não for encontrada), o hook deve lançar um `new Error('FATAL: Tentativa de executar testes de integração num banco de dados que não é de teste. Operação abortada.')`, impedindo a execução dos testes.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Local da Modificação:** A nova lógica de verificação deve ser implementada dentro de um hook `beforeAll` no topo das suítes de teste de integração que interagem com o banco de dados.
2.  **Lógica Exata:** Implemente a seguinte lógica:
    ```typescript
    beforeAll(() => {
      if (!process.env.DATABASE_URL?.includes('test')) {
        throw new Error('FATAL: Tentativa de executar testes de integração num banco de dados que não é de teste (DATABASE_URL não contém "test"). Operação abortada.');
      }
    });
    ```
3.  **Arquivos Alvo:** Aplique esta guarda de segurança a todos os arquivos de teste de integração existentes, incluindo mas não se limitando a:
    * `tests/integration/status-system.test.ts`
    * `tests/integration/propostas-tac-authenticated.test.ts`
    * `tests/integration/cliente.test.ts`

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a convenção de nomear bancos de dados de teste contendo a substring 'test' será adotada."]
* **VALIDAÇÃO PENDENTE:** [A FASE 2, com uma variável `TEST_DATABASE_URL` dedicada, será a solução definitiva.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear todos os arquivos de teste de integração a serem modificados.
2.  Garantir que a lógica da guarda `beforeAll` está correta.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão lógica do código para confirmar a implementação).
7.  **Documentar Decisões Técnicas**.