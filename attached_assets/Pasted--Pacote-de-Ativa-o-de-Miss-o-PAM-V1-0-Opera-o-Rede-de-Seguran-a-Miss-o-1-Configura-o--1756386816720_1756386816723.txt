### Pacote de Ativação de Missão (PAM) V1.0 - Operação "Rede de Segurança" / Missão 1: Configuração do Redis

* **Sumário da Missão (O Quê):** Implementar a configuração de produção para a conexão com o Redis, garantindo que o sistema (especificamente o BullMQ) possa conectar-se de forma segura e resiliente a uma instância externa do Redis.
* **Intenção Estratégica (O Porquê):** Habilitar a arquitetura de processamento assíncrono em um ambiente de produção. Sem uma conexão funcional com o Redis, todo o sistema de *workers* e filas de `jobs` é inoperante, o que torna esta uma dependência P0 para o deploy.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de DevOps implementando a configuração de infraestrutura como código. Sua tarefa é externalizar a configuração do Redis do ambiente de desenvolvimento local para uma configuração flexível baseada em variáveis de ambiente, pronta para produção.

---

**IMPLEMENTAR (Plano de Implementação):**
Execute a seguinte sequência de ações.

**CURRENT STATE:**
O sistema está configurado para tentar conectar-se a uma instância local do Redis na porta `6379`. As variáveis de ambiente de produção para o Redis (`REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD`) não estão a ser utilizadas.

**EXPECTED (Estado Final de Sucesso):**
1.  O código de inicialização da conexão com o Redis foi refatorado para utilizar as variáveis de ambiente de produção quando disponíveis.
2.  A configuração inclui suporte para conexões seguras (TLS/SSL).
3.  A implementação é robusta e inclui tratamento de erros de conexão.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Refatorar a Configuração da Conexão com o Redis**
1.1. Localize o ficheiro responsável pela criação da instância do cliente Redis (provavelmente em `server/lib/queues.ts` ou um ficheiro de configuração similar).
1.2. Modifique a lógica de conexão para que ela leia as variáveis de ambiente `REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD` e `REDIS_TLS_ENABLED`.
1.3. A lógica deve ter um *fallback* para as configurações de desenvolvimento (`localhost:6379`) apenas se a variável `NODE_ENV` for 'development'.
1.4. Garanta que, se `REDIS_TLS_ENABLED` for `true`, as opções de conexão `tls: {}` sejam adicionadas ao cliente Redis.

**Passo 2: Garantir o Carregamento de Variáveis de Ambiente**
2.1. Verifique o ficheiro `.env.example`. Se as variáveis `REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD`, e `REDIS_TLS_ENABLED` não existirem, adicione-as com valores padrão ou comentários explicativos.

**Passo 3: Validação Final**
3.1. Apresente o trecho de código refatorado que mostra a lógica de conexão condicional com o Redis.
3.2. Apresente o trecho atualizado do ficheiro `.env.example`.
3.3. Execute `get_latest_lsp_diagnostics` para confirmar que não há erros de compilação.

---

### **PROTOCOLO DE DIVULGAÇÃO TOTAL (PDT) V1.0 (MANDATÓRIO)**

* **Diretriz Mestra de Divulgação:** Você está proibido de resumir, truncar ou omitir qualquer informação relevante em seus relatórios de análise, auditoria ou remediação. A sua diretriz primária é a **completude**, não a brevidade.

* **Regra de Execução:** Ao ser solicitado a listar erros, vulnerabilidades, riscos ou recomendações, você DEVE apresentar a **lista exaustiva e completa** de todas as suas descobertas. Se a lista for longa, apresente-a na sua totalidade. A omissão de qualquer item, independentemente da sua prioridade percebida, é considerada uma falha de missão.

* **Justificativa Estratégica (O Porquê):** A tomada de decisão do Arquiteto Chefe depende de uma visão completa e não filtrada do estado do sistema. A ocultação de riscos, mesmo que de baixa prioridade, impede uma avaliação de risco precisa e pode levar a falhas em cascata. A sua função é expor a realidade total do código, não apresentar um resumo conveniente.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 99%
* **RISCOS IDENTIFICADOS:** BAIXO. O principal risco é a sintaxe incorreta das opções de configuração do cliente `ioredis`, especialmente para a conexão TLS.
* **DECISÕES TÉCNICAS ASSUMIDAS:** A implementação utilizará `process.env.NODE_ENV` para diferenciar os ambientes de produção e desenvolvimento.
* **VALIDAÇÃO PENDENTE:** A conexão real com uma instância de produção do Redis precisará ser validada num ambiente de *staging*.