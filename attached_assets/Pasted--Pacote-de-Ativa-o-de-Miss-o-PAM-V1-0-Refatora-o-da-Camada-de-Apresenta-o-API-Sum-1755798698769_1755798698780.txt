### Pacote de Ativação de Missão (PAM) V1.0 (Refatoração da Camada de Apresentação - API)

* **Sumário da Missão (O Quê):** Refatorar a camada de Apresentação (API/Controllers) do *Bounded Context* de "Credit Proposal", substituindo as chamadas diretas aos serviços antigos pelas chamadas aos novos Casos de Uso da camada de Aplicação.
* **Intenção Estratégica (O Porquê):** Completar a primeira "fatia vertical" da nossa nova arquitetura DDD. Esta ação irá desacoplar completamente o nosso framework web (Express) da nossa lógica de negócio, garantindo que a API seja apenas um mecanismo de entrega fino que orquestra a execução de Casos de Uso de negócio bem definidos.
* **Histórico Relevante (Consulta Obrigatória):** A missão anterior (Sub-Passo 9.3) criou com sucesso os Casos de Uso (`CreateProposalUseCase`, `GetProposalByIdUseCase`, etc.) na camada de `application`. Esta missão irá consumi-los.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Software a aplicar os princípios da Arquitetura Limpa. Sua tarefa é modificar os `controllers` de rota para que eles não contenham mais lógica de negócio. A sua única responsabilidade será: (1) receber a requisição HTTP, (2) chamar o Caso de Uso apropriado, e (3) retornar a resposta.

---

**IMPLEMENTAR:**
Refatoração da API de Propostas para Usar Casos de Uso

**CURRENT STATE:**
O arquivo `server/routes/propostas/core.ts` contém a lógica da API que, atualmente, pode estar a chamar serviços antigos ou a conter lógica de negócio que deveria estar na camada de domínio.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo, `server/contexts/proposal/presentation/proposalController.ts`, é criado para conter a lógica do controller.
2.  O arquivo `server/routes/propostas/core.ts` é refatorado para se tornar apenas uma definição de rotas, que delega a lógica para o novo `proposalController`.
3.  O `proposalController` importa e utiliza os Casos de Uso da camada de `application` (ex: `CreateProposalUseCase`).
4.  O fluxo de uma requisição de `POST /api/propostas`, por exemplo, será:
    * `core.ts` recebe a requisição e chama `proposalController.create`.
    * `proposalController.create` instancia e executa o `CreateProposalUseCase`.
    * O `UseCase` executa a lógica de negócio (utilizando o Agregado e o Repositório) e retorna o resultado.
    * O `controller` formata o resultado e envia a resposta HTTP.
5.  O script `./scripts/validate-dependencies.sh` continua a ser executado com sucesso, provando que a camada de `presentation` depende corretamente da camada de `application`, mas não da de `domain` ou `infrastructure`.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Controller:** Crie o arquivo `server/contexts/proposal/presentation/proposalController.ts`.
2.  **Refatore a Rota:** Mova a lógica do handler da rota de `server/routes/propostas/core.ts` para os métodos do novo `proposalController`. O arquivo de rota deve ficar o mais "fino" possível.
3.  **Use os Casos de Uso:** O `proposalController` **NÃO DEVE** interagir diretamente com o Repositório ou com o Agregado. A sua única dependência de lógica de negócio deve ser para com os Casos de Uso da camada de `application`.
4.  **Injeção de Dependência (Simples):** Instancie o Repositório e passe-o para os construtores dos Casos de Uso dentro do `proposalController`.
5.  **Validação Final Mandatória:** Execute `./scripts/validate-dependencies.sh`. A sua prova de sucesso final é o output do script a mostrar **zero violações de dependência**.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO. Risco de que a injeção de dependências manual seja complexa.]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a injeção de dependências manual (instanciar o repositório no controller) é suficiente para o nosso estágio atual, sem a necessidade de um container de DI completo."]
* **VALIDAÇÃO PENDENTE:** [Testes de integração para a API refatorada serão necessários.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear todos os ficheiros a serem criados/modificados.
2.  Garantir que a nova estrutura segue o fluxo `Presentation -> Application -> Domain`.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (executar o `validate-dependencies.sh` e garantir que ele passa).
7.  **Documentar Decisões Técnicas**.