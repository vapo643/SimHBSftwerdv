Roadmap Mestre de Implementação V1.0: "Operação Soberania dos Dados"
Missão: Isolar completamente os ambientes de banco de dados (development, staging, production), implementar governança estrita sobre migrações e estabelecer protocolos de contingência de nível bancário para garantir a integridade e a segurança dos dados do Simpix.

Ferramentas de IA Aprovadas:

Nível da Missão: Nível 4: Arquitetural

Ferramentas Alocadas: Extended Thinking para planeamento (concluído), High Power (Claude Opus) para a geração dos scripts mais complexos (ex: seeding, auditoria), e Agente Padrão ('Bazuca') para a execução das tarefas de modificação de arquivos.

FASE 1: Fundação do Isolamento (Prazo: 1 Semana)
Objetivo: Estabelecer a separação física e lógica dos ambientes de banco de dados, corrigindo a configuração base do projeto.

Passos de Execução:

[PENDENTE] 1.1 - Infraestrutura: Provisionar manualmente no Supabase uma nova instância de banco de dados dedicada exclusivamente para o ambiente de development.

[PENDENTE] 1.2 - Gestão de Segredos: Criar e popular os novos secrets no Replit (DEV_DATABASE_URL, STAGING_DATABASE_URL) com as respectivas connection strings. O DATABASE_URL original será formalmente designado como PROD_DATABASE_URL.

[PENDENTE] 1.3 - Governança de Migração: Implementar os scripts migrate:[env] propostos no package.json e o script de validação scripts/migration/validate-and-migrate.js.

[PENDENTE] 1.4 - Blindagem da Configuração: Refatorar drizzle.config.ts e server/config/environment.ts para usar a nova lógica de seleção de DATABASE_URL baseada no NODE_ENV, incluindo a validação de hostname.

[PENDENTE] 1.5 - Documentação e Comunicação: Criar um documento em docs/operations/ambiente-database.md que detalhe o novo processo de migração para toda a equipe.

Critério de Conclusão (Gate de Validação):

O comando npm run migrate:dev executa com sucesso contra o banco de desenvolvimento.

O comando npm run migrate:staging executa com sucesso contra o banco de staging.

Tentar executar npm run migrate:dev com NODE_ENV=production resulta em falha explícita de segurança.

Todos os testes de integração (npm test) passam utilizando um banco de dados de teste isolado.

FASE 2: Soberania dos Dados de Teste (Prazo: 1 Semana)
Objetivo: Eliminar 100% o uso de dados de produção em ambientes de não-produção, garantindo conformidade com LGPD e testes realistas.

Passos de Execução:

[PENDENTE] 2.1 - Estrutura de Seeding: Criar a estrutura de pastas proposta em /scripts/seeding.

[PENDENTE] 2.2 - Gerador de Cenários: Implementar o script business-scenarios.js utilizando faker.js para gerar um cenário de negócio coeso e determinístico (cliente, atendente, propostas com status variados).

[PENDENTE] 2.3 - Orquestrador de Seeding: Implementar os scripts seed:[env] no package.json que disparam o seeding apropriado para cada ambiente.

[PENDENTE] 2.4 - Integração CI/CD: Atualizar o workflow .github/workflows/ci.yml para executar o npm run seed:staging após uma migração bem-sucedida em staging.

Critério de Conclusão (Gate de Validação):

O comando npm run seed:staging popula o banco de staging com um conjunto de dados previsível e funcional.

Os testes E2E (Playwright) executam com sucesso contra o ambiente de staging populado com dados sintéticos.

Validação manual confirma que nenhum dado PII de produção existe nos ambientes de dev ou staging.

FASE 3: Resiliência e Contingência (Prazo: 1 Semana)
Objetivo: Formalizar e automatizar os processos de recuperação de desastres.

Passos de Execução:

[PENDENTE] 3.1 - Runbook de Rollback: Criar o RUNBOOK_MIGRATION_ROLLBACK.md no diretório docs/runbooks/ com o conteúdo exato proposto no debate.

[PENDENTE] 3.2 - Automação do Rollback: Implementar os scripts rollback:prepare e rollback:execute no package.json e os scripts Node.js correspondentes.

[PENDENTE] 3.3 - Manifesto de Conformidade: Criar o "manifesto de configuração" em architecture/environment-manifest.json.

[PENDENTE] 3.4 - Auditoria Automatizada: Implementar o script de "Auditoria de Conformidade de Ambiente" em scripts/audit/audit-environment.js e o comando npm run audit:env:[env].

Critério de Conclusão (Gate de Validação):

Executar com sucesso um ciclo completo de migrate:dev -> rollback:execute -> migrate:dev no ambiente de desenvolvimento.

O comando npm run audit:env:staging executa e passa, validando que o ambiente de staging está em conformidade com o environment-manifest.json.

O comando npm run audit:env:prod falha se houver qualquer desvio de configuração em produção (simular alterando uma política RLS manualmente para o teste).