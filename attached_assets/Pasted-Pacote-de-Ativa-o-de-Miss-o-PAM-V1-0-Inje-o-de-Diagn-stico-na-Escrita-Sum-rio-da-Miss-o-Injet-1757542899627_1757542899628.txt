Pacote de Ativação de Missão (PAM) V1.0 - Injeção de Diagnóstico na Escrita
Sumário da Missão: Injetar logs de diagnóstico de alta precisão na função uploadDocument do documentsService.ts para capturar a tentativa de escrita na base de dados e o seu resultado.

IMPLEMENTAR:
Refatorar a função uploadDocument no ficheiro server/services/documentsService.ts para adicionar logs de diagnóstico antes e depois da chamada this.documentsRepository.createDocument.

AÇÃO REQUERIDA:
Modifique a função uploadDocument para que corresponda à seguinte estrutura, incluindo o novo bloco try...catch e os logs.

TypeScript

// Dentro da classe DocumentsService
async uploadDocument(
  propostaId: string,
  file: any
): Promise<{
  success: boolean;
  document?: any;
  error?: string;
}> {
  try {
    // ... (lógica de verificação da proposta e upload para o storage) ...
    // ... manter o código existente até aqui ...

    const uploadResult = await this.documentsRepository.uploadToStorage(
      filePath,
      file.buffer,
      file.mimetype
    );

    if (!uploadResult) {
      // ...
    }

    // --- INÍCIO DO BLOCO DE DIAGNÓSTICO OBRIGATÓRIO ---
    const documentDataToSave = {
      proposta_id: propostaId,
      nome_arquivo: file.originalname,
      url: uploadResult.publicUrl,
      tipo: file.mmimetype,
      tamanho: file.size,
    };

    console.log('--- DIAGNÓSTICO DE ESCRITA NA BASE DE DADOS ---');
    console.log('[DB WRITE LOG] Tentando salvar os seguintes metadados:', JSON.stringify(documentDataToSave, null, 2));

    try {
      const document = await this.documentsRepository.createDocument(documentDataToSave);
      console.log('[DB WRITE LOG] SUCESSO! Resposta da base de dados:', document);
    } catch (dbError) {
      console.error('[DB WRITE LOG] ERRO EXPLÍCITO ao tentar salvar na base de dados:', dbError);
    }
    console.log('--- FIM DO DIAGNÓSTICO DE ESCRITA ---');
    // --- FIM DO BLOCO DE DIAGNÓSTICO OBRIGATÓRIO ---

    // ... (resto da função) ...
    
  } catch (error: any) {
    // ...
  }
}