### **Pacote de Ativação de Missão (PAM) V3.3 - Diagnóstico de Conexão Redis**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Criar um script de diagnóstico TypeScript (`scripts/test-redis-connection.ts`) isolado que utiliza as credenciais de ambiente (`REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD`) para tentar se conectar ao Redis Cloud e executar um comando `PING`. O script deve registrar o resultado de sucesso ou a mensagem de erro exata em caso de falha.
* **Intenção Estratégica (O Porquê):** Obter a "verdade do código" sobre a falha de conexão com o Redis. Ao isolar a lógica de conexão do resto da aplicação, eliminamos todas as outras variáveis e obteremos a mensagem de erro pura, que nos dirá a causa raiz do problema (ex: "Authentication required", "Connection timed out", "Wrong protocol").
* **Histórico Relevante (Consulta Obrigatória):** A tentativa de implementar um health check em `server/app.ts` falhou, e a falha foi contornada em vez de resolvida. Esta missão visa atacar a causa raiz daquela falha.

---

**IMPLEMENTAR:**
User Story REM-REDIS-01: Criar Script de Diagnóstico de Conexão Redis

**CONTEXT:**
Nossa tentativa de conectar a aplicação ao Redis Cloud está falhando, mas a causa exata está sendo obscurecida. Para resolver isso, vamos criar um script simples e focado com um único objetivo: tentar conectar ao Redis usando as credenciais fornecidas nos "secrets" e reportar o resultado de forma clara e inequívoca.

**CURRENT STATE:**
A aplicação está iniciando, mas apenas porque o health check obrigatório do Redis foi removido. Não temos confiança de que a conexão com o Redis Cloud esteja funcional. As credenciais (`REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD`) estão nos "secrets" do ambiente.

**EXPECTED (Estado Final de Sucesso):**
1.  **Criação do Script:** Um novo arquivo, `scripts/test-redis-connection.ts`, deve ser criado.
2.  **Lógica do Script:** O script deve:
    * Importar a biblioteca `ioredis`.
    * Ler as variáveis `REDIS_HOST`, `REDIS_PORT` e `REDIS_PASSWORD` do `process.env`.
    * Criar uma nova instância do cliente Redis. É crucial notar que conexões com Redis Cloud geralmente usam TLS, então a configuração pode precisar de `tls: {}`.
    * Tentar executar o comando `await redis.ping()`.
    * Registrar "✅ SUCESSO: Conexão com Redis Cloud bem-sucedida. Resposta do PING:" seguido da resposta, em caso de sucesso.
    * Registrar "❌ FALHA: Erro ao conectar com o Redis Cloud:" seguido do objeto de erro completo, em caso de falha.
    * Encerrar a conexão (`redis.quit()`) em ambos os casos.
3.  **Execução e Evidência:** O script deve ser executado usando `tsx`. O output completo do console, mostrando sucesso ou a mensagem de erro detalhada, deve ser fornecido como prova.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Criar Arquivo:** Crie o arquivo `scripts/test-redis-connection.ts`.
2.  **Implementar Script:** Escreva o código TypeScript conforme descrito na seção "EXPECTED". Utilize um bloco `try...catch...finally` para garantir que a conexão seja sempre encerrada. Exemplo da estrutura:
    ```typescript
    import Redis from 'ioredis';

    const testRedisConnection = async () => {
      const redis = new Redis({
        host: process.env.REDIS_HOST,
        port: parseInt(process.env.REDIS_PORT || '6379'),
        password: process.env.REDIS_PASSWORD,
        tls: {}, // Essencial para a maioria das conexões de Redis Cloud
      });

      try {
        const reply = await redis.ping();
        console.log('✅ SUCESSO: Conexão com Redis Cloud bem-sucedida. Resposta do PING:', reply);
      } catch (error) {
        console.error('❌ FALHA: Erro ao conectar com o Redis Cloud:', error);
      } finally {
        redis.quit();
      }
    };

    testRedisConnection();
    ```
3.  **Executar Diagnóstico:** Execute o script com o comando `npx tsx scripts/test-redis-connection.ts`.
4.  **Apresentar Evidência:** Cole o output completo e não resumido do terminal.

---

**Executor Humano:** Entregue este PAM ao Agente. A missão não é corrigir, é diagnosticar. Precisamos da mensagem de erro exata para planejar o próximo ataque.