### **Pacote de Ativação de Missão (PAM) V1.0 - P0.3: Blindagem de Contrato API**

* **Sumário da Missão (O Quê):** Implementar um "Adaptador de Contrato de Dados" (Data Shape Adapter) temporário na resposta da API da Fila de Análise para garantir que o formato dos dados enviados corresponda perfeitamente ao formato esperado pelo frontend, corrigindo o problema de "campos que não espelham corretamente".
* **Intenção Estratégica (O Porquê):** Esta é a Ação P0.3 da "Operação Aço Líquido". A Ação P0.2 restaurou a *visibilidade* das propostas na fila, mas as auditorias anteriores provaram que o *formato* desses dados está inconsistente. Este adaptador é uma medida de blindagem tática: ele estabiliza o frontend imediatamente, permitindo que a Fase P1 (Consolidação Arquitetural) ocorra no backend sem causar mais quebras na UI.
* **Histórico Relevante (Consulta Obrigatória):** O relatório `FLUXO_FILA_ANALISE.md` contém a análise comparativa exata entre o contrato esperado pelo frontend e o contrato retornado pelo backend. Este PAM irá usar essa análise como base para a transformação.
* **Modelo Mental (Como se Encaixa):** Estamos a inserir um "tradutor" na camada de `Controller`, no último momento antes de os dados serem enviados pela rede. Este tradutor (o adaptador) irá receber os dados "crus" do repositório e irá remodelá-los (ex: renomear `cliente.nome` para `nomeCliente`, garantir que `condicoesData` seja um objeto) para o formato exato que o componente React em `client/src/pages/credito/fila.tsx` foi construído para entender.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** O adaptador pode mascarar problemas mais profundos na camada de persistência.
    * **Contramedida:** O adaptador será marcado explicitamente no código como uma solução temporária (`// TODO P1.2: Remover este adaptador...`). A sua existência é um débito técnico deliberado para permitir a estabilização, a ser removido na Fase P1, conforme o plano mestre.

---

**IMPLEMENTAR:** Adaptador de Contrato de Dados para a Fila de Análise

**CONTEXT:** O endpoint da API que alimenta a Fila de Análise (`GET /api/propostas?queue=analysis`) está a retornar objetos de dados num formato (ex: snake_case, estrutura de join do Drizzle) que é inconsistente com o que o componente frontend (`fila.tsx`) espera (ex: camelCase, objetos aninhados específicos). Isto causa a renderização de campos incorretos ou vazios na tabela.

**CURRENT STATE:** O método `list` no `proposalController.ts` retorna os dados diretamente como vêm do repositório, causando uma quebra de contrato com o cliente.

**EXPECTED (Estado Final de Sucesso):** O método `list` no `proposalController.ts` deve ser refatorado para mapear a lista de propostas retornada pelo repositório para um formato de DTO (Data Transfer Object) bem definido, que corresponda 100% à `interface Proposta` esperada pelo frontend.

**CONSTRAINTS (Roadmap de Implementação):**

1.  **Auditoria do Contrato (Frontend):**
    * Abra `client/src/pages/credito/fila.tsx`.
    * Localize a `interface Proposta` (ou tipo similar) que define a estrutura de dados esperada pela tabela. Preste atenção especial aos nomes dos campos (ex: `nomeCliente`, `numeroProposta`, `valorSolicitado`). Este é o nosso "contrato-alvo".

2.  **Implementação do Adaptador (Backend):**
    * Abra `server/modules/proposal/presentation/proposalController.ts`.
    * Localize o método `list`.
    * Dentro do `try` block, após receber a `const result` do `this.repository.findByCriteria(...)`, **não a retorne diretamente**.
    * Crie uma função de mapeamento (o adaptador) ou use um `.map()` inline para transformar cada item da `result`.
    * O mapeamento deve transformar a estrutura de dados do repositório na estrutura do "contrato-alvo" do frontend. Por exemplo:
        ```typescript
        // Exemplo conceitual da transformação
        const propostasDTO = result.propostas.map(p => ({
          id: p.proposta.id,
          status: p.proposta.status,
          // Mapeamento explícito para corresponder ao frontend
          nomeCliente: p.cliente?.nomeCompleto || 'N/A', 
          numeroProposta: p.proposta.numeroProposta,
          valorSolicitado: p.proposta.valor,
          // Continue para todos os campos que o frontend precisa...
        }));
        
        return res.json({
          success: true,
          data: propostasDTO, // Retorne os dados transformados
          total: result.total,
        });
        ```
    * Adicione um comentário de débito técnico acima do mapeamento: `// TODO P1.2: Remover este adaptador quando o repositório for consolidado para retornar o DTO correto.`

3.  **Validação:**
    * Execute o protocolo `7-CHECK`. `get_latest_lsp_diagnostics` não deve apresentar erros. O seu relatório deve confirmar que a resposta da API agora está blindada e alinhada com as expectativas do frontend.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** \[Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** \[Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]
* **DECISÕES TÉCNICAS ASSUMIDAS:** \[Ex: "Assumi que a `interface Proposta` em `fila.tsx` é a fonte da verdade para o contrato do frontend."]
* **VALIDAÇÃO PENDENTE:** \[Ex: "Teste funcional de ponta a ponta para garantir que TODOS os campos da Fila de Análise agora são populados corretamente."]

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas afetadas.
2.  Garantir importações e tipos corretos.
3.  Executar `get_latest_lsp_diagnostics` e corrigir TODOS os erros.
4.  Declarar Nível de Confiança (0-100%) na implementação.
5.  Categorizar Riscos Descobertos (BAIXO/MÉDIO/ALTO/CRÍTICO).
6.  Realizar teste funcional (será feito no final da Fase P0).
7.  Documentar Decisões Técnicas assumidas para auditoria futura.