**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense completa para diagnosticar duas falhas críticas: 1) A inconsistência que faz com que alguns PDFs de boletos não sejam encontrados no Storage. 2) A verificação da fonte de dados do botão "Copiar PIX".
* **Intenção Estratégica (O Porquê):** Para garantir 100% de confiabilidade na "Ficha do Cliente", precisamos de prova irrefutável de que os caminhos de armazenamento de PDFs são canônicos e consistentes, e que os dados do PIX vêm da nossa fonte da verdade interna (o banco de dados), não de chamadas de API externas.
* **Histórico Relevante (Consulta Obrigatória):** A falha em encontrar PDFs sugere uma discrepância entre a lógica de escrita e a lógica de leitura. A auditoria do PIX é uma verificação de conformidade com a nossa arquitetura de "fonte da verdade interna".
* **Modelo Mental (Como se Encaixa):** Você é um auditor de integridade de dados. Sua tarefa é seguir o rastro do "caminho do PDF" e dos "dados do PIX" desde o backend até o frontend e encontrar os pontos de quebra ou inconsistência.

---

**IMPLEMENTAR:**
Um relatório de auditoria detalhado. **NÃO FAÇA MODIFICAÇÕES.**

**CURRENT STATE:**
O download de alguns PDFs na "Ficha do Cliente" falha com erro de "não encontrado". Há dúvidas se o botão "Copiar PIX" está a usar a fonte de dados correta.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria que responda a todas as questões abaixo, com evidências de código.

**CONSTRAINTS (Roadmap de Auditoria Forense):**

**1. Auditoria do "Caminho Canônico" do Storage (A Causa do PDF Não Encontrado):**
    - **Ação:** Inspecione os dois pontos críticos do ciclo de vida do PDF:
        1. O serviço que **SALVA** os boletos individuais no Storage (provavelmente `boletoStorageService.ts`).
        2. O endpoint de API que **GERA A URL** para o download do boleto individual (provavelmente em `server/routes/inter.ts` ou `cobrancas.ts`).
    - **Relatório 1 (A Evidência Crítica):** Apresente o código de **ambos** os locais que constroem o caminho do ficheiro (a string do `storagePath`). Eles são **EXATAMENTE IDÊNTICOS**? Existe uma função centralizada e compartilhada para gerar este caminho? Se houver qualquer diferença, aponte-a como a causa raiz da falha.

**2. Auditoria da Fonte de Dados do PIX (A Prova de Conformidade):**
    - **Ação:** Inspecione o ficheiro do frontend `client/src/pages/financeiro/CobrancasPage.tsx`.
    - **Relatório 2:** Localize a lógica `onClick` do botão "Copiar PIX" dentro da lista de parcelas da "Ficha do Cliente". O dado `pixCopiaECola` que ele usa vem diretamente do objeto `parcela` que é recebido como `prop` pelo componente, ou a função `onClick` dispara uma nova chamada de API para buscar esta informação? Apresente o trecho de código da função `onClick` como prova.
    - **Relatório 3:** Para confirmar, apresente também o trecho de código da chamada `useQuery` principal da "Ficha do Cliente" (`/api/cobrancas/:id/ficha`) e confirme se o `pixCopiaECola` já está incluído no `select` dos dados que são passados para a UI.

**Relatório Final:**
O critério de sucesso é um relatório que nos dê um "sim" ou "não" definitivo para cada ponto de auditoria, com o código que suporta a sua conclusão.