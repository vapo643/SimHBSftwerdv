### Pacote de Ativação de Missão (PAM) V1.0 - Auditoria Consolidada - Fase 3: Análise de Risco de Performance

* **Sumário da Missão (O Quê):** Realizar uma análise de risco de performance estática, mapeando o "caminho crítico" do fluxo de uma proposta e inspecionando o código em busca de potenciais estrangulamentos que possam impactar a capacidade do sistema de processar 50 propostas por dia.
* **Intenção Estratégica (O Porquê):** Antecipar e identificar proativamente os riscos de performance antes do deploy em produção. O objetivo é validar se a arquitetura atual suporta o volume de negócio inicial e fornecer recomendações de otimização se forem encontradas lacunas.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de performance sênior. Sua tarefa é analisar o código não pela sua funcionalidade, mas pela sua eficiência computacional. Você está a procurar por queries ineficientes, transações longas e operações síncronas bloqueantes no fluxo de negócio mais importante.

---

**IMPLEMENTAR (Plano de Análise):**
Execute a seguinte sequência de verificações e reporte suas descobertas com evidências de código.

**CURRENT STATE:**
A base de código está arquiteturalmente e funcionalmente completa para os Sprints 0-2, com uma camada de dados robusta e controlos de segurança.

**EXPECTED (Estado Final de Sucesso da Análise):**
Um relatório detalhado respondendo a cada verificação abaixo, incluindo um veredito final sobre a prontidão do sistema para a carga de 50 propostas/dia.

**CONSTRAINTS (Roadmap de Análise - Fase 3):**

**1. Mapeamento do Caminho Crítico:**
* **Verificação 1.1:** Identifique e liste a sequência de chamadas a *Use Cases* e *Domain Events* que ocorrem desde a criação de uma proposta (`CreateProposalUseCase`) até à sua aprovação (`ApproveProposalUseCase`).

**2. Análise de Eficiência de Queries:**
* **Verificação 2.1:** Inspecione a implementação do `ProposalRepository.ts` (ou `TransactionalProposalRepository.ts`). Encontre a query para a listagem principal de propostas (ex: `findPendingForAnalysis` ou similar). Valide se a query SQL gerada pelo Drizzle utiliza eficazmente os índices criados na base de dados (especificamente `idx_propostas_cliente_status`, `idx_propostas_created_status`). Apresente a construção da query no Drizzle.

**3. Análise de Transações e Bloqueios:**
* **Verificação 3.1:** Analise o `ApproveProposalUseCase.ts`. Esta operação, envolta num `UnitOfWork`, é crítica. Determine quais operações de escrita na base de dados (`save`, `update`) ocorrem dentro desta única transação.
* **Verificação 3.2:** Avalie o risco. A transação de aprovação inclui alguma operação potencialmente lenta (ex: chamadas a APIs externas, processamento de ficheiros)? Se sim, reporte como um risco de bloqueio de longa duração.

**4. Análise de Processamento Assíncrono:**
* **Verificação 4.1:** Investigue o fluxo de negócio após a aprovação de uma proposta. Confirme se as operações pesadas, como a geração do PDF da CCB e o envio para o ClickSign, são delegadas a um worker assíncrono (BullMQ) através da emissão de um *Domain Event*, em vez de serem executadas de forma síncrona no *use case* de aprovação. Apresente o código que emite o evento.

**5. Relatório de Risco de Escalabilidade:**
* **Verificação 5.1:** Com base nas descobertas acima, forneça um veredito final:
    * **Pontuação de Confiança (0-100%):** Qual a sua confiança de que a arquitetura atual suporta 50 propostas/dia sem degradação significativa?
    * **Riscos Identificados:** Liste os 1-3 principais riscos de performance.
    * **Recomendações de Otimização:** Sugira as otimizações necessárias para mitigar os riscos.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** N/A (Missão de Análise)
* **RISCOS IDENTIFICADOS:** N/A (Missão de Análise)
* **DECISÕES TÉCNICAS ASSUMIDAS:** N/A (Missão de Análise)
* **VALIDAÇÃO PENDENTE:** O resultado completo desta análise de risco de performance.