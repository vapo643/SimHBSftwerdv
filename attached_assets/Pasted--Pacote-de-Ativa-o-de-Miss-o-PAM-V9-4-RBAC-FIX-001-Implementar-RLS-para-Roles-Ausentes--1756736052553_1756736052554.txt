### **Pacote de Ativação de Missão (PAM) V9.4 - RBAC-FIX-001 (Implementar RLS para Roles Ausentes)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Criar uma nova migração de banco de dados (`.sql`) que implemente as políticas de Row Level Security (RLS) faltantes para as roles `FINANCEIRO`, `COBRANCA`, `SUPERVISOR_COBRANCA`, e `DIRETOR`, garantindo que o acesso a dados no nível do PostgreSQL esteja perfeitamente alinhado com a lógica de negócio.
* **Intenção Estratégica (O Porquê):** Blindar a camada de dados, que é nossa última e mais forte linha de defesa. Ao implementar a lógica de permissão diretamente no banco de dados com RLS, garantimos que, mesmo que haja uma falha na camada de API, os dados permaneçam seguros e isolados, aderindo ao princípio de "defesa em profundidade".
* **Histórico Relevante (Consulta Obrigatória):** A sua auditoria funcional (`RBAC-AUDIT-002`) identificou a ausência completa de políticas de RLS para estas `roles` como uma falha crítica de segurança.

---

**IMPLEMENTAR:**
User Story RBAC-FIX-001: Implementar Políticas de RLS para Roles Financeiras e de Gestão

**CONTEXT:**
Nossa auditoria de RBAC revelou uma vulnerabilidade crítica: várias roles de negócio importantes não possuem políticas de segurança no nível do banco de dados (RLS). Isso significa que, se a camada de API falhar, não há nada que impeça um usuário de acessar dados que não deveria ver. Precisamos fechar essa brecha de segurança imediatamente.

**CURRENT STATE:**
Os arquivos de migração (`drizzle/migrations/`) contêm políticas de RLS para `ATENDENTE`, `GERENTE` e `ANALISTA`, mas não há políticas definidas para `FINANCEIRO`, `COBRANCA`, `SUPERVISOR_COBRANCA` ou `DIRETOR`.

**EXPECTED (Estado Final de Sucesso):**
1.  **Nova Migração Criada:** Uma nova migração SQL deve ser criada no diretório `drizzle/migrations/`.
2.  **Políticas de RLS Implementadas:** A migração deve conter as seguintes políticas `CREATE POLICY` para a tabela `propostas`:
    * **`FINANCEIRO`:** Deve poder visualizar (`SELECT`) apenas propostas cujo status seja `ASSINATURA_CONCLUIDA` ou `BOLETOS_EMITIDOS`.
    * **`COBRANCA`:** Deve poder visualizar (`SELECT`) propostas com status `INADIMPLENTE` ou outros status relevantes para o fluxo de cobrança.
    * **`SUPERVISOR_COBRANCA`:** Deve ter a mesma visualização (`SELECT`) que a `COBRANCA`.
    * **`DIRETOR`:** Deve ter acesso total de visualização (`SELECT`) a todas as propostas, sem restrições (`USING (true)`).
3.  **Migração Aplicada:** O comando para aplicar as migrações (`npm run db:migrate`) deve ser executado com sucesso.
4.  **Prova de Sucesso:** Você deve fornecer o conteúdo do novo arquivo de migração SQL como prova da implementação e o log de sucesso da execução da migração.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Gerar Nova Migração:** Execute o comando `npm run db:generate` para criar um novo arquivo de migração SQL vazio. Dê a ele um nome descritivo (ex: `0004_add_financial_rls_policies.sql`).
2.  **Escrever Políticas SQL:** Edite o novo arquivo de migração e adicione as quatro políticas `CREATE POLICY` conforme as regras de negócio definidas na seção "EXPECTED". Use as políticas existentes como modelo para a sintaxe correta.
3.  **Aplicar Migração:** Execute o comando `npm run db:migrate` e capture o output para provar que a migração foi aplicada sem erros.
4.  **Apresentar Evidência:** Forneça o conteúdo completo do arquivo `.sql` que você criou e o log de sucesso da migração.
5.  **Verificação Final:** Execute o protocolo `7-CHECK FULL`.