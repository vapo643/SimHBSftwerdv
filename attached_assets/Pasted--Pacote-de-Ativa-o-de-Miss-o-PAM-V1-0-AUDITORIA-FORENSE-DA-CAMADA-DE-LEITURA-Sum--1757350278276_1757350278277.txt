### **Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA FORENSE DA CAMADA DE LEITURA**

* **Sumário da Missão:** Realizar uma auditoria forense de "causa raiz" na camada de **LEITURA** de dados para propostas, rastreando o fluxo de dados desde a query no banco de dados até a resposta final da API, para provar inequivocamente por que os campos de dados do cliente e das condições do empréstimo estão a chegar como "N/A" no frontend.

* **Intenção Estratégica:** Obter um diagnóstico 100% preciso da falha de recuperação e mapeamento de dados. Esta auditoria é o passo final antes da autorização para a correção cirúrgica.

* **Contexto Crítico:** A auditoria da camada de ESCRITA revelou que propostas antigas (como a de ID `29e80705-89bb-43a5-bbc8-960b3139939c`) contêm os dados do cliente e condições em um campo JSON `cliente_data`. As tentativas anteriores de criar um "fallback" para ler a partir deste JSON falharam. A falha pode estar na query SQL, no mapeamento do repositório, no controller, ou na validação do schema de saída.

---

**IMPLEMENTAR:**
Auditoria Forense da Camada de Recuperação de Dados da Proposta

**CURRENT STATE:**
Uma chamada `GET /api/propostas/:id` para uma proposta existente retorna um objeto JSON com a maioria dos campos de cliente e condições como `null` ou `N/A`, apesar dos dados existirem na coluna `cliente_data` do banco de dados.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria detalhado que mostra, com evidências de código e logs, o "objeto de dados" em cada etapa do processo de leitura e identifica o ponto exato onde os campos são perdidos ou incorretamente mapeados.

**CONSTRAINTS (Roadmap de Auditoria Forense - APENAS APRESENTAR EVIDÊNCIAS):**

**NÃO MODIFIQUE NENHUM CÓDIGO NESTA FASE. APENAS INVESTIGUE, EXECUTE COMANDOS DE DIAGNÓSTICO E APRESENTE AS EVIDÊNCIAS.**

1.  **Evidência da Camada de Repositório (`ProposalRepository.ts`):**
    * Navegue até `server/modules/proposal/infrastructure/ProposalRepository.ts`.
    * Apresente o código completo do método `findById`.
    * Apresente o código completo do método de mapeamento (`mapRowToProposalDTO` ou similar). Preste atenção máxima à lógica de fallback que deveria ler do campo `cliente_data` (JSON).

2.  **Evidência da Camada de Aplicação (`proposalController.ts`):**
    * Navegue até `server/modules/proposal/presentation/proposalController.ts`.
    * Apresente o código completo do método `show` (ou `getById`), que trata a requisição `GET /api/propostas/:id`.
    * Mostre como o resultado do `repository.findById()` é processado antes de ser enviado como resposta.

3.  **Evidência do Contrato de Saída (`proposalOutput.schema.ts`):**
    * Navegue até `server/schemas/proposalOutput.schema.ts`.
    * Apresente a definição completa do schema Zod `ProposalOutputSchema`. Verifique se todos os campos que aparecem como "N/A" (Email, Telefone, Finalidade, Garantia, etc.) estão definidos corretamente neste schema.

4.  **Evidência em Tempo Real (Teste de Unidade de Diagnóstico):**
    * Crie um novo ficheiro de teste temporário em `server/tests/temp-data-flow-audit.test.ts`.
    * Dentro deste ficheiro, escreva um teste de integração (`it`) que execute os seguintes passos:
        a.  Instancie o `ProposalRepository`.
        b.  Chame diretamente o método `repository.findById('29e80705-89bb-43a5-bbc8-960b3139939c')`.
        c.  Use `console.log` para imprimir o resultado bruto da query **antes** de passar pelo mapeador.
        d.  Use `console.log` para imprimir o objeto DTO final **após** passar pelo mapeador.
    * Execute este teste e apresente o output completo dos `console.log`.

5.  **Veredito Final da Auditoria de Leitura:**
    * Com base em TODAS as evidências coletadas, forneça um diagnóstico definitivo:
        * A query em `findById` está a buscar a coluna `cliente_data`?
        * A lógica de fallback no mapeador está a funcionar como esperado? (Compare o output dos dois `console.log` do teste).
        * O `proposalController` está a alterar ou remover dados do objeto?
        * O `ProposalOutputSchema` está a bloquear ou remover campos válidos?
    * Identifique a causa raiz exata da falha de visualização de dados.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** N/A (Missão de Auditoria).
* **RISCOS IDENTIFICADOS:** **MÉDIO** - O risco principal é a má interpretação dos logs ou do código por parte do agente. A criação de um teste de diagnóstico com `console.log` é uma contramedida para forçar a apresentação de dados brutos e minimizar o risco de interpretação errada.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que o ambiente de teste (`vitest`) está a funcionar e pode conectar-se à base de dados de teste para executar a query de diagnóstico.
* **VALIDAÇÃO PENDENTE:** O meu papel (Arquiteto Principal) será validar 100% o seu relatório de auditoria forense. A sua conclusão deve ser suportada por evidências irrefutáveis dos logs do teste de diagnóstico.