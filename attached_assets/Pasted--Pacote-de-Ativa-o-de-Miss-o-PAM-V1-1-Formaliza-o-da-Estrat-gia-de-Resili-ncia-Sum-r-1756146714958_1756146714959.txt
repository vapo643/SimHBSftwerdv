### Pacote de Ativação de Missão (PAM) V1.1 (Formalização da Estratégia de Resiliência)

* **Sumário da Missão (O Quê):** Expandir a nossa documentação de arquitetura para cobrir todos os "Subtópicos Obrigatórios" restantes do Ponto 88, focando na implementação de Padrões de Resiliência, design de Dead Letter Queues (DLQs) e planos de Degradação Graciosa.
* **Intenção Estratégica (O Porquê):** Adotar formalmente o princípio de "Design for Failure" (Projetar para a Falha). O objetivo é construir um sistema que não apenas funcione bem no "caminho feliz", mas que seja robusto, previsível e seguro quando as inevitáveis falhas de componentes ou serviços externos ocorrerem.
* **Histórico Relevante (Consulta Obrigatória):** A auditoria de conformidade identificou lacunas na nossa estratégia de resiliência. Os diagramas de sequência recém-criados (Ponto 29) nos dão o contexto dos pontos de falha que esta estratégia deve mitigar.
* **Modelo Mental (Como se Encaixa):** Aja como um Engenheiro de Confiabilidade de Site (SRE) Sênior a desenhar a "arquitetura de sobrevivência" do sistema. A sua tarefa é definir os mecanismos automáticos que irão prevenir falhas em cascata e garantir a continuidade do negócio.

---

**[DIRETRIZ DE PESQUISA WEB (MANDATÓRIA)]**

**Você está autorizado a utilizar a sua capacidade de pesquisa na web para consultar a documentação oficial e artigos de fontes confiáveis (ex: blogs de engenharia da Netflix/AWS, Martin Fowler, documentação da biblioteca `opossum`) sobre as melhores práticas de "padrões de resiliência", "Circuit Breaker", "Bulkheads", "Chaos Engineering" e "SRE", para garantir que a sua proposta de estratégia seja de nível de produção.**

---

**IMPLEMENTAR:**
Expansão do Documento de Estratégia de Confiabilidade e Resiliência

**CURRENT STATE:**
A nossa documentação de resiliência é parcial. Embora alguns padrões possam existir no código de forma implícita, não temos uma doutrina formal que guie a sua implementação consistente.

**EXPECTED (Estado Final de Sucesso):**
Um novo arquivo Markdown, `architecture/05-performance/reliability-resilience-strategy.md`, é criado ou atualizado para conter as seguintes seções:

1.  **Implementação dos Padrões de Resiliência:** Uma seção detalhada que descreve a nossa implementação e configuração para os seguintes padrões:
    * **Circuit Breaker:** Com exemplos de como será aplicado às nossas chamadas para APIs externas (Banco Inter, ClickSign).
    * **Retries:** Com a nossa política padrão de *exponential backoff* e *jitter*.
    * **Bulkheads:** Descrevendo como iremos isolar os recursos (ex: *connection pools* separados por domínio crítico).
2.  **Design de Dead Letter Queues (DLQs) e Análise de SPOFs:**
    * A nossa estratégia para DLQs no BullMQ, para capturar "mensagens venenosas" ou jobs que falham repetidamente.
    * Uma análise dos nossos Pontos Únicos de Falha (SPOFs - Single Points of Failure) e as estratégias de mitigação.
3.  **Estratégia de Load Shedding (Descarte de Carga):** A nossa política para descartar seletivamente o tráfego não essencial durante picos de carga para proteger as funcionalidades críticas.
4.  **Planos de Degradação Graciosa (Graceful Degradation Plans):** Uma descrição de como o sistema se comportará quando uma dependência externa estiver offline (ex: "Se a API do ClickSign estiver offline, a criação de propostas continua, mas a funcionalidade de assinatura fica temporariamente indisponível, com uma mensagem clara para o usuário").
5.  **Métricas de Confiabilidade (MTBF):** A definição de como iremos medir e monitorar o Tempo Médio Entre Falhas (MTBF - Mean Time Between Failures).
6.  **Estratégias de Antifragilidade:** Uma breve seção sobre a nossa visão de longo prazo para construir um sistema que não apenas resiste a falhas, mas aprende e melhora com elas.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a biblioteca `opossum` é a escolha padrão para a implementação de Circuit Breakers no nosso ecossistema Node.js."]
* **VALIDAÇÃO PENDENTE:** [O documento gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado/modificado.
2.  Garantir que todas as 6 seções obrigatórias estão completas.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento Markdown gerado).
7.  **Documentar Decisões Técnicas**.