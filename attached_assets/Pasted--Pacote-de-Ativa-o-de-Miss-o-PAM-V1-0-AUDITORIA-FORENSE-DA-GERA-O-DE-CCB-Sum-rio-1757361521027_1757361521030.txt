### **Pacote de Ativação de Missão (PAM) V1.0 - AUDITORIA FORENSE DA GERAÇÃO DE CCB**

* **Sumário da Missão:** Realizar uma auditoria forense de ponta-a-ponta no fluxo de geração de Cédula de Crédito Bancário (CCB) para identificar a causa raiz da falha que impede a criação, o salvamento e a visualização do documento.

* **Cenário de Negócio (O "Caso de Teste"):** Um `ANALISTA` está na tela de Formalização (`/formalizacao/:id`) com todos os dados da proposta sendo exibidos corretamente. Ele clica no botão "Gerar CCB". A aplicação não gera o documento, não o salva no storage e não atualiza a UI para permitir a sua visualização.

* **Vetor de Ataque / Ponto de Falha (Hipóteses):**
    1.  **Frontend (`formalizacao.tsx`):** O `onClick` do botão "Gerar CCB" não está a invocar a mutação correta ou está a falhar silenciosamente.
    2.  **Endpoint da API (Backend):** O endpoint (`POST /api/propostas/:id/gerar-ccb`) está a falhar com um erro `500 Internal Server Error` não reportado corretamente para a UI.
    3.  **UseCase / Domínio (Backend):** O `GenerateCcbUseCase` falha ao tentar ler os dados da proposta, ou a entidade `Proposal` falha ao tentar desserializar um *Value Object* (ex: `Currency`, `CPF`, `Date`), causando um `TypeError` semelhante ao do bug do `CEP`. **Esta é a hipótese principal.**
    4.  **Serviço de PDF (`CcbGenerationService.ts`):** A interação com a biblioteca `pdf-lib` está a falhar (ex: template não encontrado, erro ao preencher campos).
    5.  **Serviço de Storage (Backend):** A comunicação com o Supabase Storage para fazer o upload do PDF gerado está a falhar (ex: credenciais, permissões de bucket).

* **Evidência de Conformidade Requerida (A "Prova Irrefutável"):**

1.  **Análise do Frontend:**
    * Localize o ficheiro `client/src/pages/formalizacao.tsx`.
    * Identifique o `onClick` handler do botão "Gerar CCB". Apresente o código do hook `useMutation` que ele invoca e o endpoint da API que é chamado.

2.  **Análise do Backend (Rota e Controller):**
    * Navegue até o ficheiro de rotas relevante e localize a definição da rota para o endpoint de geração de CCB.
    * Apresente o código da rota e identifique qual método do `proposalController` (ou similar) é acionado.

3.  **Análise da Lógica de Negócio (UseCase e Domínio):**
    * Siga o fluxo do controller até o `UseCase` de geração de CCB. Apresente o código completo deste `UseCase`.
    * Preste atenção máxima à linha que busca os dados da proposta do repositório (`this.proposalRepository.findById(...)`).
    * Inspecione a entidade de domínio `Proposal.ts`, especificamente o método `fromDatabase` (ou `mapToDomain` no repositório), e procure por potenciais pontos de falha na criação de *Value Objects* a partir de dados do banco.

4.  **Diagnóstico do Erro (Logs do Servidor):**
    * Execute o fluxo de "Gerar CCB" na aplicação.
    * Imediatamente após a falha, inspecione os **logs do servidor backend** (não do navegador). Procure por um `stack trace` de erro, especialmente por um `TypeError` relacionado a um método de um objeto que não existe (como `.replace()`, `.toValue()`, etc.). Apresente o `stack trace` completo.

5.  **Veredito Final:** Com base no `stack trace` e na análise do código, aponte a linha exata e o ficheiro onde o erro ocorre e explique a causa raiz definitiva.