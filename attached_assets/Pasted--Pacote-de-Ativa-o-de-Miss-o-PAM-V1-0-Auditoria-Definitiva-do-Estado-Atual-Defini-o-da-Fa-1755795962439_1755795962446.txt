### Pacote de Ativação de Missão (PAM) V1.0 (Auditoria Definitiva do Estado Atual - 'Definição da Fase 0')

* **Sumário da Missão (O Quê):** Agir como um Arquiteto de Soluções a realizar um *due diligence* técnico e criar um **único e consolidado documento** que sirva como o "mapa" completo da arquitetura atual do sistema Simpix (código, infraestrutura, processos, segurança).
* **Intenção Estratégica (O Porquê):** Formalizar a conclusão da **"Fase 0: Mapeamento"**. Este documento será a nossa única fonte da verdade, imutável, que usaremos para planejar a **"Fase 1: Prontidão"**. O objetivo é eliminar qualquer ambiguidade ou "alucinação" sobre o estado atual do sistema antes de iniciarmos qualquer nova implementação.
* **Histórico Relevante (Consulta Obrigatória):** Nas missões anteriores, você executou múltiplas refatorações (rotas, segurança, testes) e auditorias. Esta missão exige que você sintetize todo esse conhecimento contextual e o valide contra o estado atual do código-fonte para produzir um relatório final e abrangente.
* **Modelo Mental (Como se Encaixa):** Sua única tarefa é a análise e a documentação. Você não deve corrigir ou implementar nada. Seu único entregável é o documento de arquitetura.

---

**IMPLEMENTAR:**
Relatório de Arquitetura "As-Is" do Sistema Simpix

**CURRENT STATE:**
O sistema foi significativamente modificado, mas não temos um único documento que descreva de forma holística a sua arquitetura atual de ponta a ponta.

**EXPECTED (Estado Final de Sucesso):**
Um novo e único arquivo Markdown, `architecture/00-current-state-map/phase-0-as-is-architecture.md`, é criado. O arquivo deve conter as seguintes seções, preenchidas com uma análise detalhada e `snippets` de código como prova, quando aplicável.

---

**CONSTRAINTS (Estrutura do Relatório Mandatório):**

**1. Fundamentos (Código e Estrutura):**
* **Prova 1.1 (Árvore de Diretórios):** Gere uma representação em formato de árvore (`tree`) da estrutura de diretórios principal do projeto (excluindo `node_modules`, `.git`, etc.).
* **Prova 1.2 (Stack Tecnológica):** Liste as principais bibliotecas e frameworks (`dependencies` e `devDependencies`) do `package.json`, agrupadas por função (ex: Frontend, Backend, Banco de Dados, Testes).

**2. Arquitetura de Backend:**
* **Prova 2.1 (Mapa de APIs):** Liste **todos** os principais endpoints da API, agrupados por domínio (ex: `auth`, `propostas`, `pagamentos`, etc.).
* **Prova 2.2 (Padrão Arquitetural):** Descreva o padrão principal (ex: "Monolito Modular com camada de Serviços").
* **Prova 2.3 (Acesso a Dados):** Descreva como a lógica de negócio acede ao banco de dados (ex: "Através de uma camada de `storage` que usa o Drizzle ORM", "Diretamente nos `controllers`", etc.).

**3. Arquitetura de Frontend:**
* **Prova 3.1 (Padrão Arquitetural):** Descreva o padrão principal (ex: "Single Page Application (SPA) com React").
* **Prova 3.2 (Gestão de Estado):** Descreva as estratégias de gestão de estado (ex: "TanStack Query para estado de servidor, `ProposalContext` para estado de formulários complexos").

**4. Arquitetura de Dados (Banco de Dados):**
* **Prova 4.1 (Lista de Tabelas):** Liste todas as tabelas principais definidas no schema Drizzle (`shared/schema.ts`).
* **Prova 4.2 (Estratégia de Migração):** Descreva como as migrações de schema são atualmente gerenciadas (ex: "Uso de `drizzle-kit generate` para criar scripts SQL versionados").

**5. Infraestrutura e CI/CD:**
* **Prova 5.1 (Ambiente de Execução):** Descreva onde a aplicação corre atualmente (ex: "Ambiente Replit").
* **Prova 5.2 (Processo de Deploy):** Descreva como o deploy é feito (ex: "Manual, via botão 'Run' no Replit").
* **Prova 5.3 (Gestão de Segredos):** Descreva como os segredos são gerenciados (ex: "Variáveis de ambiente no Replit Secrets").
* **Prova 5.4 (Pipelines de CI/CD):** Descreva os workflows existentes em `.github/workflows/` e o que cada um faz.

**6. Segurança:**
* **Prova 6.1 (Sumário de Defesas):** Faça um resumo das principais defesas de segurança que você sabe que estão implementadas (ex: "Isolamento de ambiente de teste com 4 camadas de proteção, validação de webhooks com HMAC, políticas de RLS no banco de dados, etc.").

**7. Análise Crítica do Auditor (Sua Sugestão para a Fase 0):**
* **Pergunta:** Com base em toda a sua análise para criar este mapa, existe algum ponto cego ou área que você acredita que foi subestimada e que deveria ser investigada mais a fundo como parte desta Fase 0 de mapeamento, antes de avançarmos para a Fase 1 de "prontidão"?

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100% de confiança na COMPLETUDE do seu mapa arquitetural]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a documentação e o código-fonte atuais são a representação fiel do sistema."]
* **VALIDAÇÃO PENDENTE:** [Este documento será a "Constituição" da nossa Fase 0. Ele deve ser ratificado pelo Arquiteto Chefe antes de qualquer outra ação.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear todos os arquivos e comandos necessários para a auditoria.
2.  Garantir que todas as 7 seções do relatório são preenchidas de forma completa e precisa.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)** na completude da auditoria.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do documento gerado para precisão).
7.  **Documentar Decisões Técnicas** e a sua sugestão final.