**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Realizar uma auditoria forense completa do fluxo de captura e persistência do campo `valorTotalFinanciado`, começando pela sua origem na tela de "Nova Proposta".
* **Intenção Estratégica (O Porquê):** O Arquiteto determinou que a causa raiz dos nossos problemas de dados na "Tela de Cobranças" não está na tela em si, mas na forma como os dados financeiros são criados e salvos no início do ciclo de vida da proposta. Precisamos de um diagnóstico preciso deste fluxo de origem.
* **Histórico Relevante (Consulta Obrigatória):** Seu último diagnóstico provou que o problema são dados `NULL` no banco. Esta missão é para descobrir *por que* esses dados se tornam `NULL`.
* **Modelo Mental (Como se Encaixa):** Você é um auditor de fluxo de dados. Sua tarefa é seguir o rastro do campo `valorTotalFinanciado` desde o input do usuário no frontend, através da chamada de API, até o comando de inserção no banco de dados.
* **Riscos Antecipados:** **Risco:** Uma análise superficial. **Contramedida:** Sua missão não é corrigir. É **PROVAR**, com evidências de código, como os dados são manuseados em cada etapa.

---

**IMPLEMENTAR:**
Um relatório de auditoria detalhado. **NÃO FAÇA MODIFICAÇÕES.**

**CURRENT STATE:**
Propostas estão a ser salvas no banco de dados com a coluna `valor_total_financiado` como `NULL`, o que causa erros em cascata em outras partes do sistema.

**EXPECTED (Estado Final de Sucesso):**
Um relatório de auditoria que responda a todas as questões abaixo, nos dando um mapa claro de como o `valorTotalFinanciado` é tratado.

**CONSTRAINTS (Roadmap de Auditoria Forense):**

**1. Auditoria do Frontend (A Origem - `nova-proposta.tsx`):**
    - **Ação:** Inspecione o formulário de "Nova Proposta".
    - **Relatório 1:** Existe um campo de input para o `valorTotalFinanciado` ou `valor` do empréstimo? Apresente o código JSX deste campo.
    - **Relatório 2:** Apresente o trecho de código que mostra como este valor é incluído no payload que é enviado para o backend na requisição `POST /api/propostas`.

**2. Auditoria do Backend (A Persistência - `routes.ts` e `storage.ts`):**
    - **Ação:** Inspecione o endpoint `POST /api/propostas`.
    - **Relatório 3:** A lógica de validação Zod para este endpoint exige que o `valorTotalFinanciado` seja um campo obrigatório? Apresente a definição do schema.
    - **Relatório 4 (A Evidência Crítica):** Apresente o trecho de código do comando `db.insert(propostas).values(...)`. Ele está a mapear e a salvar o `valorTotalFinanciado` recebido do frontend na coluna correta do banco de dados?

**Relatório Final:**
O critério de sucesso é um relatório forense completo que nos mostre o ponto exato — no frontend, na validação, ou na lógica de salvamento — que está a permitir que propostas sejam criadas sem um valor financeiro.