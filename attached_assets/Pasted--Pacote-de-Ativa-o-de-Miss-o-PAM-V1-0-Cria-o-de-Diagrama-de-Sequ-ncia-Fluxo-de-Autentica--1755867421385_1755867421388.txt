### Pacote de Ativação de Missão (PAM) V1.0 (Criação de Diagrama de Sequência - Fluxo de Autenticação)

* **Sumário da Missão (O Quê):** Gerar um Diagrama de Sequência detalhado para o fluxo de autenticação do sistema Simpix, utilizando a sintaxe Mermaid ou PlantUML, conforme os "Subtópicos Obrigatórios" do Ponto 29 da nossa Doutrina Arquitetural.
* **Intenção Estratégica (O Porquê):** Iniciar a remediação da nossa lacuna de documentação mais crítica. A modelagem visual do nosso fluxo de autenticação irá expor as suas complexidades, interações e potenciais pontos de falha, servindo como uma ferramenta essencial para futuras otimizações de segurança e performance.
* **Histórico Relevante (Consulta Obrigatória):** A auditoria de conformidade identificou a ausência de Diagramas de Sequência como uma lacuna de prioridade P0 (Crítica).
* **Modelo Mental (Como se Encaixa):** Aja como um Arquiteto de Sistemas a documentar uma interação complexa. Sua tarefa é traduzir o fluxo de código de autenticação numa representação visual clara e padronizada.

---

**IMPLEMENTAR:**
Diagrama de Sequência: Fluxo de Autenticação

**CURRENT STATE:**
O fluxo de autenticação é funcional, mas as suas interações entre o frontend, backend e serviços externos (Supabase) não estão visualmente documentadas, dificultando a análise de latência e de pontos de falha.

**EXPECTED (Estado Final de Sucesso):**
1.  Um novo arquivo Markdown, `architecture/08-diagrams/sequence-diagram-authentication-flow.md`, é criado.
2.  O arquivo contém um Diagrama de Sequência gerado com Mermaid ou PlantUML.
3.  O diagrama visualiza com precisão os seguintes passos do fluxo de autenticação:
    * O **Usuário** insere as credenciais na **UI (React SPA)**.
    * A UI faz uma chamada de API para o **Backend (Express API)**.
    * O Backend chama o **Supabase Auth** para validar as credenciais.
    * O Supabase Auth retorna um token **JWT**.
    * O Backend usa o token para buscar o perfil do usuário na nossa tabela **`profiles` (PostgreSQL)**.
    * O Backend estabelece o **contexto RLS**.
    * A resposta final é enviada de volta para a UI.
4.  O diagrama deve também incluir a modelagem do **"Unhappy Path"** (caminho infeliz), mostrando o que acontece em caso de credenciais inválidas.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Crie o Arquivo de Diagrama:** Crie o novo arquivo em `architecture/08-diagrams/`.
2.  **Use "Diagrams as Code":** Utilize a sintaxe Mermaid ou PlantUML.
3.  **Represente o Fluxo Completo:** Garanta que todos os participantes (Usuário, UI, Backend, Supabase Auth, PostgreSQL) e as suas interações síncronas/assíncronas estejam representados.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que o fluxo de autenticação segue a sequência padrão de validação de credenciais seguida de busca de perfil."]
* **VALIDAÇÃO PENDENTE:** [O diagrama gerado deve ser revisado e ratificado pelo Arquiteto Chefe.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear o ficheiro exato a ser criado.
2.  Garantir que o diagrama de sequência representa com precisão o fluxo de código real.
3.  Executar `get_latest_lsp_diagnostics` para garantir que o ambiente está estável.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (revisão do diagrama Markdown gerado).
7.  **Documentar Decisões Técnicas**.