**### MODO DE OPERAÇÃO: REALISMO CÉTICO (MANDATÓRIO)**
Sua lealdade é para com a verdade do código e a estabilidade da produção.

---
**### Pacote de Ativação de Missão (PAM) V1.0**

* **Sumário da Missão (O Quê):** Criar um script de validação de consistência que compara continuamente os dados entre a coluna `status` legada (na tabela `propostas`) e a nova tabela `status_contextuais`.
* **Intenção Estratégica (O Porquê):** Para provar, com dados e de forma contínua, que a nossa nova arquitetura de "dupla escrita" é 100% confiável e não está a gerar inconsistências de dados antes de migrarmos nossas telas para lerem da nova fonte. Este script é a nossa rede de segurança e a validação final da Fase 1.
* **Histórico Relevante (Consulta Obrigatória):** Sua refatoração completa garantiu que todas as *escritas* de status agora usem a dupla escrita. Esta missão é para *validar* que essa escrita está a funcionar perfeitamente em todos os cenários.
* **Modelo Mental (Como se Encaixa):** Você é um Engenheiro de Qualidade de Dados. Sua tarefa é construir uma ferramenta de auditoria automatizada que atue como um "juiz" imparcial, comparando o sistema antigo com o novo.
* **Riscos Antecipados:** **Risco:** O script pode ser pesado para o banco de dados se não for otimizado. **Contramedida:** O script deve ser otimizado para rodar de forma eficiente.

---

**IMPLEMENTAR:**
Um script de validação de consistência de status.

**CURRENT STATE:**
A dupla escrita está implementada, mas não temos um mecanismo automatizado para verificar sua consistência em tempo real.

**EXPECTED (Estado Final de Sucesso):**
Um script executável (ex: `scripts/validate-status-consistency.ts`) que, quando executado:
1.  Busca todas as propostas.
2.  Para cada proposta, compara o seu `status` na tabela `propostas` com o `status` mais recente na tabela `status_contextuais` para o contexto relevante.
3.  Reporta no console quaisquer discrepâncias encontradas, listando os IDs das propostas inconsistentes.
4.  Se nenhuma discrepância for encontrada, ele reporta o sucesso da verificação.

**CONSTRAINTS (Roadmap de Implementação):**

**1. Criação do Script:**
    - **Ação:** Crie o novo ficheiro de script `scripts/validate-status-consistency.ts`.
    - **Implementação:**
        a. O script deve buscar todas as propostas da tabela `propostas`.
        b. Ele deve buscar todos os registros da tabela `status_contextuais`.
        c. Em um loop, para cada proposta, ele deve encontrar o registro de status contextual mais recente e comparar os valores.
        d. A lógica de comparação deve ser robusta.

**2. Relatório de Saída:**
    - **Ação:** O output do console deve ser claro e informativo.
    - **Implementação:**
        - Se houver inconsistências: `console.error('[INCONSISTÊNCIA DETECTADA] Proposta ID: {id}, Status Legado: {status_antigo}, Status Novo: {status_novo}')`.
        - Se tudo estiver correto: `console.log('[CONSISTÊNCIA VALIDADA] Verificadas {N} propostas. Nenhuma inconsistência encontrada.')`.

---
**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
Siga o protocolo completo. O teste funcional será a própria execução do script. O critério de sucesso é um script que executa sem erros e reporta o estado de consistência atual do nosso banco de dados.
---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
Preencha a declaração completa, com foco em quão otimizada a sua query de verificação está para não sobrecarregar o banco.
---