---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*Encontramos uma falha nas fundações da nossa arquitetura de dados. A sua missão não é construir, mas sim atuar como o engenheiro estrutural que analisa as rachaduras e projeta o plano de reforço. Você deve avaliar duas soluções possíveis para a incompatibilidade de tipos na relação `propostas` ↔ `users` e documentar a sua recomendação final num ADR (Architectural Decision Record).*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** para consultar a **documentação do Supabase Auth e do PostgreSQL** sobre as melhores práticas para gerir relações entre tabelas de autenticação (que usam `UUID`) e tabelas de negócio (que podem usar `integer` serial).*

---
### **Pacote de Ativação de Missão: OPERAÇÃO RAIO-X (FASE 3.4 - ARQUITETURA DE CORREÇÃO)**

* **Sumário da Missão (O Quê):** Analisar a dívida arquitetural da chave estrangeira `propostas.analista_id`, avaliar duas estratégias de correção e produzir um ADR (Architectural Decision Record) que documente a análise, os trade-offs e a decisão final recomendada.
* **Intenção Estratégica (O Porquê):** Corrigir esta falha de design de forma reativa seria um erro. Precisamos de uma decisão deliberada e documentada para garantir que a solução escolhida seja escalável, segura e alinhada com a nossa arquitetura de longo prazo. O ADR garantirá que esta decisão seja compreendida e seguida por toda a equipe no futuro.
* **Histórico Relevante (Consulta Obrigatória):** A sua análise deve partir da descoberta na Fase 3.1: a coluna `propostas.analista_id` é do tipo `uuid` e referencia a tabela `users`, mas a coluna `users.id` é do tipo `integer`.
* **Modelo Mental (Como se Encaixa):** Você é o arquiteto a decidir sobre o padrão de identificação de usuários no sistema. A sua decisão irá definir como todas as futuras tabelas que se relacionam com usuários deverão se comportar, estabelecendo um precedente arquitetural importante.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (MÉDIO):** Ambas as soluções propostas terão um impacto significativo, exigindo ou uma migração de dados complexa ou uma refatoração da lógica de autenticação.
    * **Contramedida:** O ADR é a própria contramedida. Ao analisar e documentar os prós e contras de cada abordagem, podemos escolher o caminho com o risco calculado mais baixo e o maior benefício a longo prazo.

---

### **ANALISAR E ARQUITETAR:**
ADR para a Correção da Incompatibilidade de Tipos em `propostas.analista_id`.

**CURRENT STATE:**
Existe uma incompatibilidade de tipos de dados entre a chave estrangeira `propostas.analista_id` (que é `uuid`) e a chave primária que ela deveria referenciar, `users.id` (que é `integer`). Esta falha de design torna a relação entre as tabelas inoperável e foi estrategicamente contornada nas fases anteriores.

**EXPECTED (Estado Final de Sucesso):**
A geração de um novo documento Markdown em `architecture/07-decisions/ADR-011-analista-id-type-mismatch-resolution.md`. Este documento deve seguir o formato de um ADR e conter as seguintes seções:
1.  **Contexto:** Descrever o problema da incompatibilidade de tipos e o seu impacto.
2.  **Opções Consideradas:**
    * **Opção A: Alterar `propostas.analista_id` para `integer`.**
        * **Prós:** Simplicidade na relação; alinha-se com o ID sequencial da tabela `users`.
        * **Contras:** Usa um ID interno e potencialmente mutável como chave; não se alinha com o `UUID` imutável do provedor de autenticação (Supabase Auth).
    * **Opção B: Usar o `UUID` do Supabase Auth.**
        * **Prós:** Usa um identificador único, imutável e externo como chave, o que é uma prática arquitetural mais robusta; alinha o sistema com o provedor de identidade.
        * **Contras:** Requer que a lógica da aplicação obtenha o `UUID` do usuário autenticado e o use para a persistência; pode exigir uma nova coluna na tabela `users` para mapear o `id` interno para o `auth.uid()`.
3.  **Análise de Impacto:** Para cada opção, detalhar o impacto em: migração de dados, refatoração de código e performance.
4.  **Decisão Final Recomendada:** Declarar qual opção é a recomendada e fornecer uma justificativa técnica robusta.

**CONSTRAINTS (Roadmap de Análise):**

1.  **Análise de `users`:** Inspecione o schema da tabela `users` (`shared/schema.ts`) e a configuração de autenticação do Supabase para entender como o `id` (integer) e o `UUID` do usuário se relacionam.
2.  **Avaliação de Trade-offs:** Pese os benefícios de curto prazo (simplicidade da Opção A) contra os benefícios de longo prazo (robustez da Opção B).
3.  **Redação do ADR:** Escreva o documento `ADR-011-analista-id-type-mismatch-resolution.md`, garantindo que a sua recomendação seja clara, bem fundamentada e acionável. **Não implemente nenhuma correção.**