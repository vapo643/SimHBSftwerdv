### Pacote de Ativação de Missão (PAM) V1.0 - OPERAÇÃO BANDEIRA FALSA

* **Sumário da Missão:** Criar e executar um script de teste de simulação que irá mimetizar um webhook da ClickSign, enviando uma notificação de "documento assinado" para o nosso endpoint de backend. O objetivo é validar, de forma isolada e controlada, se o nosso sistema reage conforme o esperado, atualizando o estado da proposta no banco de dados.

* **Intenção Estratégica:** Validar a resiliência e a correção funcional da nossa nova arquitetura de webhooks e Server-Sent Events (SSE) antes da exposição a dados de produção. Este teste serve como a "certificação de qualidade" final para a "Operação Webhook Resiliente", garantindo que a fundação do nosso sistema de tempo real é sólida.

* **Modelo Mental (Como se Encaixa):** O script de teste atuará como um "simulador da ClickSign". Ele irá fabricar uma requisição `POST` idêntica à que a ClickSign enviaria no evento de `document.close` ou `envelope.finished`. Esta requisição será enviada ao nosso endpoint `/api/webhooks/clicksign`. Se a nossa implementação estiver correta, este evento único deverá desencadear toda a cadeia de reações: validação HMAC, gravação de idempotência, atualização do status da proposta no banco de dados e, por fim, a emissão de um evento SSE.

---

**[DIRETRIZ DE PESQUISA WEB (MANDATÓRIA)]**

* **Validação de Payload:** Antes de construir o script, você **deve** usar a sua capacidade de pesquisa web para consultar a **documentação oficial da API da ClickSign**. Encontre um exemplo de payload JSON para os eventos `document.close` ou `envelope.finished`. A estrutura do seu payload de teste deve ser um espelho fiel da documentação oficial para garantir que o nosso teste seja o mais realista possível.

---

**IMPLEMENTAR:**
Criação e Execução de um Script de Simulação para o Webhook da ClickSign.

**CURRENT STATE:**
A infraestrutura de webhook e SSE foi implementada, mas ainda não foi validada com um evento real simulado de ponta a ponta.

**EXPECTED (Estado Final de Sucesso):**
1.  Um script de teste (`/scripts/test-webhook-simulation.ts`) é criado.
2.  O script envia com sucesso uma requisição `POST` simulada para o endpoint `/api/webhooks/clicksign`.
3.  O endpoint responde com um status `200 OK`, indicando que o evento foi recebido e processado com sucesso.
4.  O script verifica no banco de dados e confirma que o status da proposta-alvo foi alterado para `ASSINATURA_CONCLUIDA`.
5.  O log de execução do teste é apresentado como prova de sucesso.

**CONSTRAINTS (Roadmap de Implementação do Teste):**

**Passo 1: Preparação do Cenário de Teste**
1.  Crie um script (`/scripts/seed-webhook-test-proposal.ts`) para inserir uma proposta de teste no banco de dados. Esta proposta deve estar num estado anterior à assinatura (ex: `AGUARDANDO_ASSINATURA`) e ter um `clicksign_document_key` válido (pode ser um UUID de teste, ex: `fad93897-fd8a-48a3-b03a-59c194155c2f`).
2.  Execute este script de seeding e confirme que a proposta foi criada. Apresente o ID da proposta que será usada no teste.

**Passo 2: Criação do Script de Simulação (`/scripts/test-webhook-simulation.ts`)**
1.  Crie um novo arquivo de script.
2.  **Lógica do Script:**
    * Importe as dependências necessárias (ex: `axios` ou `fetch` para fazer a requisição HTTP, e `crypto` para gerar a assinatura HMAC).
    * Defina as variáveis de teste: o ID da proposta criada no Passo 1 e o `document_key` correspondente.
    * Construa o **payload JSON** do webhook, usando a estrutura encontrada na documentação oficial da ClickSign. Certifique-se de que o `document.key` no payload corresponda ao da nossa proposta de teste e que o evento seja um dos que configuramos para escutar (ex: `document.close`).
    * Recupere o `CLICKSIGN_WEBHOOK_SECRET` das variáveis de ambiente do sistema.
    * **Calcule a assinatura HMAC-SHA256** do payload, exatamente como o nosso backend espera. O resultado deve ser uma string hexadecimal.
    * Faça uma requisição `POST` para `http://localhost:3000/api/webhooks/clicksign` (ou a URL do ambiente de desenvolvimento), enviando o payload JSON no corpo e a assinatura HMAC calculada no header `X-Clicksign-Signature`.
    * Após a requisição, conecte-se ao banco de dados e verifique se o campo `status` da proposta de teste foi atualizado para `ASSINATURA_CONCLUIDA`.
    * Imprima no console uma mensagem de `SUCESSO` ou `FALHA` com base no resultado da verificação do banco de dados.

**Passo 3: Execução e Relatório**
1.  Execute o script `test-webhook-simulation.ts`.
2.  Apresente o output completo do console do script como o relatório final da missão.