O plano para corrigir o bug do parâmetro "incluir_tac" na simulação foi validado.

Sua tarefa agora é executar o seguinte plano de 2 etapas:

**1. Atualize a Lógica do Frontend:**
Modifique o arquivo `/client/src/pages/propostas/nova.tsx`. Dentro da função `handleSimulacao` no `useEffect`, localize a criação do `URLSearchParams`. Altere a linha de `incluir_tac` para garantir que o valor seja sempre convertido para uma string "true" ou "false":

```javascript
const params = new URLSearchParams({
    valor: String(valorSolicitado),
    prazo: prazo,
    produto_id: produto,
    incluir_tac: String(incluirTac || false), // Garante "true" ou "false"
    dataVencimento: dataPrimeiroVencimento
});
2. Atualize a Lógica do Backend:
Modifique o arquivo de rotas do nosso backend (provavelmente /server/routes.ts). Substitua a rota GET /api/simulacao existente pela seguinte versão, que agora lida corretamente com o parâmetro incluir_tac:

TypeScript

app.get('/api/simulacao', (req, res) => {
  const { valor, prazo, produto_id, incluir_tac, dataVencimento } = req.query;

  const valorSolicitado = parseFloat(valor as string);
  const prazoEmMeses = parseInt(prazo as string);
  
  if (isNaN(valorSolicitado) || isNaN(prazoEmMeses) || !produto_id || !dataVencimento) {
    return res.status(400).json({ error: 'Parâmetros inválidos.' });
  }

  const dataAtual = new Date();
  const primeiroVencimento = new Date(dataVencimento as string);
  const diasDiferenca = Math.ceil((primeiroVencimento.getTime() - dataAtual.getTime()) / (1000 * 3600 * 24));

  if (diasDiferenca > 45) {
    return res.status(400).json({ error: "A data do primeiro vencimento não pode ser superior a 45 dias." });
  }

  const { taxaDeJurosMensal, valorTac } = buscarTaxas(produto_id as string);
  
  const taxaJurosDiaria = taxaDeJurosMensal / 30; 
  const jurosCarencia = valorSolicitado * (taxaJurosDiaria / 100) * diasDiferenca;

  const iof = calcularIOF(valorSolicitado);
  // Correção aqui: interpreta a string "true" como booleano
  const tac = incluir_tac === 'true' ? valorTac : 0; 
  
  const valorTotalFinanciado = valorSolicitado + iof + tac + jurosCarencia;

  const valorParcela = calcularParcela(valorTotalFinanciado, prazoEmMeses, taxaDeJurosMensal);
  
  const custoTotal = (valorParcela * prazoEmMeses);
  const cetAnual = (((custoTotal / valorSolicitado) - 1) / (prazoEmMeses / 12)) * 100;

  return res.json({ 
      valorParcela: parseFloat(valorParcela.toFixed(2)), 
      taxaJurosMensal, 
      iof: parseFloat(iof.toFixed(2)),
      valorTac: tac,
      cet: parseFloat(cetAnual.toFixed(2)) 
  });
});