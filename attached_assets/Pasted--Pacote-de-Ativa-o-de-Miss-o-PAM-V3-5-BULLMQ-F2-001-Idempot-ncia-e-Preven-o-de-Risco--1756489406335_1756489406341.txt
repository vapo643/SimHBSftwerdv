### **Pacote de Ativação de Missão (PAM) V3.5 - BULLMQ-F2-001 (Idempotência e Prevenção de Risco)**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

* **Sumário da Missão (O Quê):** Refatorar o código que adiciona jobs à `paymentsQueue` para garantir que cada job de pagamento receba um `jobId` único e determinístico, tornando a operação inerentemente idempotente.
* **Intenção Estratégica (O Porquê):** Prevenir o risco catastrófico de processamento duplicado de transações financeiras. Ao atribuir um ID único baseado nos dados da transação, garantimos que, mesmo que o sistema tente enfileirar o mesmo pagamento múltiplas vezes (devido a um duplo clique do usuário, um retry de rede, etc.), o BullMQ aceitará apenas a primeira ocorrência, descartando todas as duplicatas subsequentes.
* **Histórico Relevante (Consulta Obrigatória):** O alinhamento estratégico (QAE) identificou "Jobs Duplicados" como o maior risco financeiro na implementação das filas. Esta missão é a contramedida direta para esse risco.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **MÉDIO** - A geração do `jobId` pode não ser suficientemente única, levando a colisões indesejadas onde um pagamento legítimo é descartado como duplicado.
    * **Contramedida:** A chave de idempotência deve ser composta por múltiplos atributos de negócio que garantam sua unicidade (ex: `payment-${propostaId}-${numeroParcela}-${timestamp}`).

---

**IMPLEMENTAR:**
User Story REM-RISK-001: Garantir Idempotência na Fila de Pagamentos

**CONTEXT:**
Nossa infraestrutura de filas agora é resiliente, mas ainda vulnerável a um risco crítico: o processamento duplicado de jobs. Em um sistema financeiro, isso é inaceitável. Precisamos fortalecer nossa `paymentsQueue` para que ela seja idempotente, ou seja, que uma tentativa de adicionar o mesmo job várias vezes resulte em apenas uma execução.

**CURRENT STATE:**
O código que adiciona jobs à fila de pagamentos (e outras) provavelmente usa `queue.add('jobName', { ...data })` sem especificar um `jobId` nas opções. Isso significa que cada chamada a `add` cria um novo job, mesmo que os dados sejam idênticos.

**EXPECTED (Estado Final de Sucesso):**
1.  **Código Refatorado:** O(s) local(is) no código onde os jobs são adicionados à `paymentsQueue` devem ser modificados. A chamada `queue.add()` deve agora incluir um terceiro parâmetro de opções com uma propriedade `jobId`.
2.  **Chave de Idempotência Única:** O valor do `jobId` deve ser uma string única e determinística, construída a partir dos dados do próprio job. Por exemplo: `jobId: \`payment-${proposta.id}-${parcela.numero}\``.
3.  **Validação por Teste:** Um novo teste de integração deve ser criado para provar que a idempotência funciona. O teste deve:
    * Adicionar um job de pagamento com um `jobId` específico à fila.
    * Imediatamente tentar adicionar o **mesmo job** (mesmo nome, mesmos dados e mesmo `jobId`) uma segunda vez.
    * Verificar se o tamanho da fila aumentou em apenas 1, provando que a segunda adição foi ignorada.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Localizar Ponto de Enfileiramento:** Use ferramentas de busca (`rg`, `grep`) para encontrar todas as ocorrências de `.add(` no código que interagem com a `paymentsQueue`.
2.  **Implementar Geração de `jobId`:** No local encontrado, modifique a chamada `.add()` para incluir o objeto de opções com a chave `jobId`. Construa a string do `jobId` usando dados de negócio relevantes para garantir unicidade.
3.  **Criar Teste de Idempotência:** Crie um novo arquivo de teste, `tests/integration/idempotency.test.ts`.
4.  **Implementar Cenário de Teste:** Dentro do novo arquivo, escreva um teste `it('should not add a duplicate payment job with the same jobId', ...)` que execute os passos descritos na seção "EXPECTED".
5.  **Executar e Validar:** Execute o novo teste (`npx vitest run tests/integration/idempotency.test.ts`) e forneça o output completo, mostrando que o teste passou.
6.  **Verificação Final:** Execute o protocolo `7-CHECK FULL` e preencha a declaração de incerteza.

---

**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO e uma breve descrição]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Listar decisões tomadas que podem ter implicações futuras]
* **VALIDAÇÃO PENDENTE:** [Listar ações que o Orquestrador (GEM 02) ou o QA (GEM 03) devem validar]
---