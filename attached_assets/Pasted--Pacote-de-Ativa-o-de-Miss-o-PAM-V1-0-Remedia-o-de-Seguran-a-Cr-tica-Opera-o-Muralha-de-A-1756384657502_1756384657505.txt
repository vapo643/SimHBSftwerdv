### Pacote de Ativação de Missão (PAM) V1.0 - Remediação de Segurança Crítica (Operação Muralha de Aço)

* **Sumário da Missão (O Quê):** Corrigir as vulnerabilidades de segurança P0 e P1 identificadas na auditoria "Fundação de Aço", incluindo a aplicação de autenticação e autorização (RBAC) em endpoints desprotegidos, a implementação de controlo de acesso a dados nos repositórios e a criação de *use cases* em falta com trilhas de auditoria.
* **Intenção Estratégica (O Porquê):** Restaurar a postura de segurança do sistema para o nível bancário exigido, eliminando os riscos de exposição de dados financeiros, acesso não autorizado e manipulação de pagamentos. A conclusão bem-sucedida desta missão é um pré-requisito mandatório para continuar o desenvolvimento.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de segurança de aplicação (AppSec) a executar um plano de remediação de emergência. A sua prioridade é a precisão e a aplicação rigorosa de controlos de segurança em todas as camadas afetadas.

---

**IMPLEMENTAR (Plano de Remediação de Segurança):**
Execute a seguinte sequência de ações de correção.

**CURRENT STATE:**
Vulnerabilidades críticas e de alto risco foram identificadas nos módulos de CCB, Boletos e Webhooks, incluindo falta de autenticação, autorização e auditoria.

**EXPECTED (Estado Final de Sucesso):**
1.  Todos os endpoints da API estão protegidos por autenticação e autorização granular (RBAC).
2.  As consultas aos repositórios implementam o controlo de acesso a dados para prevenir fugas de informação.
3.  As operações financeiras críticas são encapsuladas em *Use Cases* com a devida auditoria.
4.  Os webhooks estão protegidos contra acesso não autorizado.

**CONSTRAINTS (Roadmap de Implementação):**

**Passo 1: Remediação de Vulnerabilidades P0 (Execução Imediata)**

1.1. **Proteger Rota de Teste de CCB:**
    * Localize o ficheiro `server/routes/ccb-test.ts`.
    * Adicione os middlewares `jwtAuthMiddleware` e `requireFinanceiro` à rota `POST /test` para garantir que apenas utilizadores autenticados com o papel `FINANCEIRO` ou `ADMINISTRADOR` a possam aceder.

1.2. **Implementar Controlo de Acesso nos Repositórios:**
    * Refatore o método `findByPropostaId` nos ficheiros `server/modules/ccb/infrastructure/CcbRepository.ts` e `server/modules/boleto/infrastructure/BoletoRepository.ts`.
    * Adicione um parâmetro `userId: string` a estes métodos.
    * Modifique a query Drizzle para incluir um `INNER JOIN` com a tabela `propostas` e uma cláusula `WHERE` que valide se o `userId` fornecido corresponde ao `atendenteId` (ou outro campo de propriedade relevante) na proposta, garantindo que um utilizador só pode consultar dados relacionados com as suas próprias propostas.

1.3. **Criar e Aplicar Role Guard `requireFinanceiro`:**
    * No ficheiro `server/lib/role-guards.ts`, crie uma nova função de middleware `requireFinanceiro` que permita o acesso apenas a utilizadores com os papéis 'FINANCEIRO' ou 'ADMINISTRADOR'.
    * Aplique este novo *guard* a todos os endpoints sensíveis relacionados com CCBs e Boletos.

**Passo 2: Remediação de Vulnerabilidades P1**

2.1. **Proteger Webhook do Banco Inter:**
    * Localize o ficheiro `server/routes/webhooks/inter.ts`.
    * Implemente uma estratégia de validação para este webhook. (Sugestão: se o Banco Inter usar assinaturas HMAC, implemente uma validação semelhante à do ClickSign; caso contrário, implemente uma verificação baseada em IP (ACL) ou um *secret* no URL como medida de segurança inicial).

2.2. **Criar Use Cases Ausentes com Auditoria:**
    * Crie o ficheiro `server/modules/ccb/application/GenerateCcbUseCase.ts`. Implemente a lógica para gerar a CCB e, crucialmente, chame o `AuditService` para registar a operação.
    * Crie o ficheiro `server/modules/boleto/application/MarkBoletoAsPaidUseCase.ts`. Implemente a lógica para marcar um boleto como pago e chame o `AuditService`.

**Passo 3: Validação Final**
3.1. Apresente os *snippets* de código para cada uma das correções implementadas (rota `ccb-test.ts` protegida, método `findByPropostaId` refatorado, middleware `requireFinanceiro`, endpoint de webhook do Inter protegido e um dos novos *use cases* com a chamada de auditoria).
3.2. Execute `get_latest_lsp_diagnostics` para confirmar que a refatoração não introduziu erros de compilação.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** 95%
* **RISCOS IDENTIFICADOS:** ALTO. A modificação de queries de repositório e a adição de middlewares de segurança são operações de alto risco. Uma implementação incorreta pode bloquear o acesso a utilizadores legítimos ou falhar na proteção contra os maliciosos.
* **DECISÕES TÉCNICAS ASSUMIDAS:** Assume-se que o campo de propriedade para o controlo de acesso nos repositórios é `propostas.atendenteId`. O agente deve validar isto e ajustar se necessário.
* **VALIDAÇÃO PENDENTE:** Um ciclo completo de testes de integração e testes de penetração é mandatório após estas correções para validar a eficácia das defesas e garantir que não houve regressões funcionais.