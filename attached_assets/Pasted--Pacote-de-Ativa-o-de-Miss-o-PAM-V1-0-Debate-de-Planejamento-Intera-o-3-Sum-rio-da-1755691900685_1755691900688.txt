### Pacote de Ativação de Missão (PAM) V1.0 (Debate de Planejamento - Interação 3)

* **Sumário da Missão (O Quê):** Arquitetar a implementação da nova regra de negócio de "Negação Automática por Comprometimento de Renda", detalhando sua localização no código, interação com a FSM e tratamento de casos de borda.
* **Intenção Estratégica (O Porquê):** Garantir que a regra de negócio mais crítica da nova funcionalidade seja implementada de forma segura, robusta e alinhada com a arquitetura existente (especificamente a nossa Máquina de Estados Finitos), antes que qualquer código seja escrito.
* **Histórico Relevante (Consulta Obrigatória):** A FASE 1 deste planejamento definiu os campos de banco de dados necessários (`clienteRenda`, `clienteDividasExistentes`). A arquitetura atual possui um `statusFsmService` que governa todas as transições de estado.

---

**TASK (Sua Tarefa):**
Responda às seguintes perguntas de arquitetura de software para projetar a implementação da regra de "Negação Automática".

**1. Localização e Gatilho (Trigger):**
   * Em qual serviço existente (ex: `proposalService.ts`) e em qual função específica esta nova lógica de verificação de comprometimento de renda deve residir?
   * Em que momento exato do ciclo de vida da proposta esta regra deve ser acionada? (Ex: durante a chamada de `createProposal`, como um passo de um `job` assíncrono após a criação, etc.). Qual abordagem você recomenda e por quê?

**2. Interação com a Máquina de Estados Finitos (FSM):**
   * Como esta nova regra irá interagir com o `statusFsmService` que já implementamos?
   * Se a verificação determinar que a renda está comprometida (>25%), qual deve ser o `novoStatus` e o `contexto` a serem passados para a função `transitionTo` da FSM? (Ex: status `REPROVADO`, contexto "reprovado_automaticamente_renda").

**3. Tratamento de Casos de Borda (Edge Cases):**
   * Como o sistema deve se comportar se a regra for acionada para uma proposta onde os novos campos financeiros (`clienteDividasExistentes` ou `clienteRenda`) são `NULL`? A regra deve ser simplesmente ignorada, ou isso deve resultar em um status específico que indique a necessidade de preenchimento de dados (ex: `DOCUMENTOS_PENDENTES`)?

**4. Esboço da Implementação (Pseudocódigo):**
   * Para garantir clareza total, forneça um rascunho em pseudocódigo ou TypeScript da função que irá conter esta lógica de verificação. O esboço deve mostrar como os dados são recebidos, como o cálculo de 25% é feito e como a decisão (chamar a FSM ou não) é tomada.