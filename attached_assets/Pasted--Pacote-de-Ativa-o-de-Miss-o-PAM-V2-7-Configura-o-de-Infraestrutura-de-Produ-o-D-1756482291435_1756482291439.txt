### **Pacote de Ativação de Missão (PAM) V2.7 - Configuração de Infraestrutura de Produção**

**[DIRETRIZ MESTRA DE DIVULGAÇÃO - PDT V2.0 ATIVADA]**
*Sua resposta deve ser exaustiva. Reporte a realidade técnica sem omissões. A transparência radical é mandatória.*

---
### **MISSÃO 1: Integração Final do Sentry (Observabilidade)**

* **Sumário da Missão (O Quê):** Integrar as credenciais de produção (DSN) do Sentry na configuração de ambiente do sistema.
* **Intenção Estratégica (O Porquê):** Garantir que todos os erros do backend e do frontend em um ambiente de produção sejam capturados, registrados e analisados em tempo real, permitindo uma resposta rápida a incidentes e garantindo a estabilidade do sistema (SLA 99.95%).
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **BAIXO** - Configuração incorreta do DSN, levando à não captura de erros.
    * **Contramedida:** A implementação deve ser seguida por um teste de verificação que deliberadamente gera um erro para confirmar que ele aparece no dashboard do Sentry.

**IMPLEMENTAR:**
User Story INFRA-001: Configurar DSN do Sentry de Produção

**CONTEXT:**
A integração técnica com o Sentry já está no código, mas está usando DSNs de desenvolvimento ou placeholders. Para preparar o deploy de produção, precisamos inserir a chave DSN real da nossa conta Sentry paga, garantindo que a telemetria de erros seja enviada para o nosso dashboard de monitoramento oficial.

**CURRENT STATE:**
O arquivo de configuração de ambiente (ex: `.env.example`, `server/config/environment.ts`) contém uma variável `SENTRY_DSN` com um valor de placeholder. A inicialização do Sentry nos arquivos `server/lib/sentry.ts` e `client/src/main.tsx` depende dessa variável.

**EXPECTED (Estado Final de Sucesso):**
1.  A variável de ambiente `SENTRY_DSN` deve ser atualizada com o valor da nova DSN de produção. (Nota para o Agente: Você solicitará ao Executor Humano que forneça este valor seguro).
2.  A aplicação, tanto no backend quanto no frontend, deve inicializar o Sentry com sucesso usando esta nova DSN.
3.  Um teste de ponta-a-ponta deve ser executado para provar que a integração está funcional.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Solicitar Credencial:** Peça ao Executor Humano (Arquiteto Chefe) para fornecer a nova `SENTRY_DSN` de produção e para adicioná-la como um "secret".
2.  **Atualizar Configuração:** Verifique se o código em `server/config/environment.ts` e `client/src/main.tsx` está corretamente lendo a variável de ambiente `SENTRY_DSN`.
3.  **Criar Rota de Teste:** Crie uma rota de teste temporária no backend (ex: `/api/debug/test-sentry`) que, quando acessada, deliberadamente lança uma exceção (ex: `throw new Error('Teste de integração Sentry - Backend ${new Date().toISOString()}');`).
4.  **Validar Backend:** Execute a aplicação e acesse a rota de teste. Confirme com o Executor Humano que o erro apareceu no dashboard do Sentry.
5.  **Validar Frontend:** Crie um botão de teste na UI que, ao ser clicado, lança um erro. Confirme com o Executor Humano que o erro também foi capturado no Sentry.
6.  **Limpeza:** Remova a rota e o botão de teste.

---
### **MISSÃO 2: Configuração do Redis Cloud (Filas e Cache)**

* **Sumário da Missão (O Quê):** Configurar o sistema para se conectar à instância de produção do Redis Cloud.
* **Intenção Estratégica (O Porquê):** Mover nosso sistema de processamento assíncrono (BullMQ) e caching de um ambiente local (inadequado para escala) para uma infraestrutura de nuvem gerenciada, garantindo alta disponibilidade, performance e resiliência para as operações em segundo plano.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** **MÉDIO** - Erros de conexão com o Redis Cloud (firewall, credenciais inválidas) podem paralisar todo o processamento de tarefas em fila.
    * **Contramedida:** A implementação deve incluir um "health check" que verifica a conexão com o Redis na inicialização do servidor e reporta falhas imediatamente.

**IMPLEMENTAR:**
User Story INFRA-002: Configurar Conexão com Redis Cloud de Produção

**CONTEXT:**
Atualmente, o sistema está configurado para usar uma instância local do Redis via Docker, o que é ideal para desenvolvimento, mas inaceitável para produção. Precisamos reconfigurar a aplicação para usar a string de conexão da nossa instância provisionada no Redis Cloud.

**CURRENT STATE:**
O arquivo `docker-compose.yml` define um serviço Redis local. O código de conexão em `server/lib/queues.ts` e `server/services/cacheService.ts` provavelmente aponta para o endereço local (`redis://redis:6379`).

**EXPECTED (Estado Final de Sucesso):**
1.  A variável de ambiente `REDIS_URL` deve ser atualizada com a string de conexão do Redis Cloud. (Nota para o Agente: Você solicitará ao Executor Humano que forneça este valor).
2.  O código de inicialização do BullMQ e do cliente de cache deve usar exclusivamente a variável `REDIS_URL`.
3.  O serviço Redis no `docker-compose.yml` pode ser mantido para ambientes locais, mas a configuração da aplicação deve priorizar a `REDIS_URL` de produção quando disponível.
4.  Um teste de "health check" deve ser adicionado para verificar o status da conexão com o Redis na inicialização do servidor.

**CONSTRAINTS (Roadmap de Implementação):**
1.  **Solicitar Credencial:** Peça ao Executor Humano para fornecer a `REDIS_URL` de produção e para adicioná-la como um "secret".
2.  **Analisar Código de Conexão:** Audite `server/lib/queues.ts` e `server/services/cacheService.ts` para garantir que a conexão com o Redis é instanciada usando a variável de ambiente `process.env.REDIS_URL`.
3.  **Implementar Health Check:** Na inicialização do servidor (em `server/index.ts` ou `server/app.ts`), adicione uma função que tenta executar um comando PING no cliente Redis. Se falhar, deve logar um erro crítico no console.
4.  **Validar Conexão:** Execute a aplicação. O log do health check deve indicar "Conexão com Redis estabelecida com sucesso."
5.  **Validar Funcionalidade:** Execute uma ação que sabidamente enfileira um job (ex: criar uma proposta que precisa de processamento). Confirme com o Executor Humano que o job aparece na fila do BullMQ no dashboard apropriado.

---

**Executor Humano:** A diretriz está clara. Execute o PAM acima, começando pela **Missão 1: Integração Final do Sentry**.