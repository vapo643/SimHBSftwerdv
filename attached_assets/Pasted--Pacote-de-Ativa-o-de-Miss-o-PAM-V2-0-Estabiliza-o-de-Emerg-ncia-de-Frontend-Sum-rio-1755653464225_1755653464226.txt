### Pacote de Ativação de Missão (PAM) V2.0 (Estabilização de Emergência de Frontend)

* **Sumário da Missão (O Quê):** Diagnosticar e corrigir um loop de renderização infinito (`Maximum update depth exceeded`) na tela de "Nova Proposta", que tem origem no `ProposalContext`.
* **Intenção Estratégica (O Porquê):** Restaurar a operacionalidade básica do frontend. A aplicação está atualmente inutilizável devido a esta falha. A estabilização é o único objetivo; otimizações são secundárias.
* **Histórico Relevante (Consulta Obrigatória):** Os logs de erro (que serão anexados) apontam inequivocamente para uma chamada da função `clearSimulation` (em `ProposalContext.tsx:439`) dentro de um `useEffect` localizado em `useProposalEffects.ts:28`. Esta é a zona de impacto primária.
* **Modelo Mental (Como se Encaixa):** Esta é uma missão de depuração de React de alta prioridade. O Agente deve atuar como um especialista em React, focado em identificar e corrigir a causa de um ciclo de re-renderização vicioso.
* **Riscos Antecipados e Contramedidas:**
    * **Risco:** Uma correção apressada pode quebrar a lógica de negócio pretendida pelo `useEffect`.
    * **Contramedida:** O plano de execução força uma fase de diagnóstico (read-only) antes de autorizar qualquer modificação, garantindo que a correção seja precisa e informada.

---

**IMPLEMENTAR:**
Plano de Estabilização de Emergência para Loop de Renderização do React

**CURRENT STATE (Evidência Bruta):**
A tela de "Nova Proposta" está inoperante. O console do navegador está a ser inundado com milhares de erros `Warning: Maximum update depth exceeded`. O stack trace aponta para uma cadeia de eventos iniciada por um `useEffect` em `useProposalEffects.ts` que chama uma função de atualização de estado no `ProposalContext`.

*(Os logs completos serão anexados a este prompt.)*

**EXPECTED (Estado Final de Sucesso):**
1.  O erro `Maximum update depth exceeded` é **completamente eliminado** do console.
2.  A tela de "Nova Proposta" carrega e permanece estável, sem loops de renderização.
3.  O Agente deve incluir em seu relatório final uma **Análise de Causa Raiz (RCA)** precisa, explicando qual dependência ou padrão de código causou o loop.

**CONSTRAINTS (Roadmap de Implementação):**
Siga este plano de diagnóstico e execução em três fases, **na ordem exata**:

**FASE 1: AUDITORIA CIRÚRGICA (Read-Only - NÃO MODIFICAR CÓDIGO)**
1.  **Inspecione o `useEffect`:** Vá diretamente ao arquivo `client/src/hooks/useProposalEffects.ts`. Localize o `useEffect` por volta da linha 28 que chama a função `clearSimulation`.
2.  **Inspecione a Função de Update:** Em seguida, vá ao arquivo `client/src/contexts/ProposalContext.tsx`. Localize a função `clearSimulation` por volta da linha 439.
3.  **Diagnóstico da Causa-Raiz:** Analise o array de dependências do `useEffect` e a lógica da função `clearSimulation`. Identifique a causa exata do loop. **Responda a esta pergunta antes de prosseguir:** *Qual dependência no array do `useEffect` está a ser recriada a cada render, ou como a função `clearSimulation` está a causar uma mudança em uma das dependências do `useEffect` que a chama?*

**FASE 2: PLANEJAMENTO DA CORREÇÃO (Aguardar Aprovação)**
4.  Com base na sua análise, proponha a correção **mínima e mais segura** para quebrar o loop. A solução provável envolve uma das seguintes táticas:
    * (a) Envolver uma função ou objeto no array de dependências com `useCallback` ou `useMemo` para estabilizá-lo entre renders.
    * (b) Remover a dependência instável do array do `useEffect`, se for seguro fazê-lo.
    * (c) Refatorar a `clearSimulation` para não acionar o `useEffect` que a chama.
    * **Apresente o seu plano antes de implementar.**

**FASE 3: EXECUÇÃO E VALIDAÇÃO**
5.  Após a minha aprovação do seu plano, implemente a correção proposta.
6.  **Validação Final Mandatória:** Recarregue a página de "Nova Proposta". A prova de sucesso é a ausência total de erros `Maximum update depth exceeded` no console.

---
**DECLARAÇÃO DE INCERTEZA (OBRIGATÓRIO):**
* **CONFIANÇA NA IMPLEMENTAÇÃO:** [Preencher com a porcentagem de 0 a 100%]
* **RISCOS IDENTIFICADOS:** [Preencher com a categoria BAIXO/MÉDIO/ALTO/CRÍTICO]
* **DECISÕES TÉCNICAS ASSUMIDAS:** [Ex: "Assumi que a correção do loop de renderização irá estabilizar a aplicação, mesmo que os erros de API persistam."]
* **VALIDAÇÃO PENDENTE:** [A funcionalidade de negócio do formulário deve ser testada manualmente após a correção para garantir que não houve regressões.]
---

**PROTOCOLO OBRIGATÓRIO 7-CHECK EXPANDIDO:**
1.  Mapear ficheiros e funções exatas a serem afetadas pela correção.
2.  Garantir importações e tipos corretos.
3.  Executar `get_latest_lsp_diagnostics` para garantir 0 erros novos.
4.  **Declarar Nível de Confiança (0 a 100%)**.
5.  **Categorizar Riscos Descobertos**.
6.  **Realizar teste funcional completo** (verificar se a página de "Nova Proposta" carrega sem erros de loop no console).
7.  **Documentar Decisões Técnicas** e a Análise de Causa Raiz.