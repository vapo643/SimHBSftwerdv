### **Pacote de Ativação de Missão (PAM) V9.5 - RBAC-AUDIT-002 (Auditoria Funcional de RBAC)**

**[PROTOCOLO DE AUDITORIA DE CENÁRIO DE NEGÓCIO (PACN) V1.0 ATIVADO]**
*Sua resposta deve ser exaustiva. Para cada cenário, prove com evidências de código e SQL como a regra de negócio é garantida.*

* **Sumário da Missão:** Validar, através de cenários de negócio, que a implementação de Role-Based Access Control (RBAC) agora reflete perfeitamente as permissões, ações e visualizações permitidas para cada `role`.
* **Intenção Estratégica:** Obter a certificação final e irrefutável de que nosso sistema de autorização é de nível bancário, não apenas na teoria, mas na prática, garantindo que nenhum usuário possa ver ou fazer algo além de seus privilégios definidos.

---

**AUDITAR E VALIDAR:**
Conformidade Funcional do Sistema de Roles e Permissões

**CONTEXT:**
Após uma remediação crítica, nosso sistema de RBAC foi significativamente fortalecido com novas políticas de RLS e correção de `guards` na API. Agora, precisamos executar uma auditoria final, baseada em cenários de negócio do mundo real, para provar que a implementação está 100% correta.

**EXPECTED (Estado Final de Sucesso):**
Você deve produzir um **Relatório de Auditoria Funcional de RBAC**. Para cada um dos cenários abaixo, você deve fornecer a evidência de conformidade requerida.

---
**CENÁRIO 1: O `ATENDENTE`**
* **Regra de Negócio:** Um `ATENDENTE` só pode executar ações (aceitar proposta, gerar boletos) nas propostas que ele mesmo criou. Ele não pode modificar propostas de outros atendentes, mesmo que sejam da mesma loja.
* **Vetor de Ataque:** Um atendente malicioso (`att-01`) obtém o ID de uma proposta de outro atendente (`att-02`) e tenta mudar seu status através da API `PUT /api/propostas/:id/status`.
* **Evidência de Conformidade Requerida:**
    1.  Localize o método no `propostaService.ts` que lida com a mudança de status.
    2.  Apresente o trecho de código exato do `guard` que compara o `userId` do token JWT com o `proposta.userId` do registro no banco.
    3.  Explique como este `guard` previne o vetor de ataque.

---
**CENÁRIO 2: O `GERENTE`**
* **Regra de Negócio:** Um `GERENTE` pode ver todas as propostas de todas as lojas que ele gerencia (armazenadas no array `loja_ids` de seu perfil), mas não de outras lojas.
* **Vetor de Ataque:** Um gerente tenta listar propostas (`GET /api/propostas`) e o sistema, por engano, retorna propostas de lojas que não estão no seu array `loja_ids`.
* **Evidência de Conformidade Requerida:**
    1.  Localize a política de RLS para a `role` `GERENTE` na tabela `propostas`.
    2.  Apresente a cláusula `USING` completa.
    3.  Explique como a lógica `loja_id IN (SELECT unnest(loja_ids) ...)` garante o isolamento de dados, provando que o vetor de ataque está mitigado.

---
**CENÁRIO 3: O `FINANCEIRO`**
* **Regra de Negócio:** Um usuário com a `role` `FINANCEIRO` só pode ver propostas que estão prontas para pagamento (ex: status `ASSINATURA_CONCLUIDA` ou `BOLETOS_EMITIDOS`).
* **Vetor de Ataque:** Um usuário `FINANCEIRO` tenta listar propostas e a query, por engano, retorna propostas em `RASCUNHO` ou `EM_ANALISE`.
* **Evidência de Conformidade Requerida:**
    1.  Localize a nova política de RLS para a `role` `FINANCEIRO` que você implementou na missão anterior.
    2.  Apresente a cláusula `USING` completa.
    3.  Explique como a condição `status IN (...)` garante que apenas propostas nos estágios corretos do fluxo sejam visíveis, provando que o vetor de ataque está mitigado.

---
**CENÁRIO 4: O `DIRETOR`**
* **Regra de Negócio:** Um `DIRETOR` tem visão irrestrita sobre todas as propostas de todas as lojas.
* **Vetor de Ataque:** Um `DIRETOR` tenta listar propostas, mas uma política de RLS incorreta filtra os resultados, escondendo parte dos dados.
* **Evidência de Conformidade Requerida:**
    1.  Localize a nova política de RLS para a `role` `DIRETOR`.
    2.  Apresente a cláusula `USING` completa.
    3.  Explique como a condição (`USING (auth.jwt() ->> 'role' = 'DIRETOR')`) concede acesso de leitura a todos os registros, provando que a regra de negócio foi cumprida.