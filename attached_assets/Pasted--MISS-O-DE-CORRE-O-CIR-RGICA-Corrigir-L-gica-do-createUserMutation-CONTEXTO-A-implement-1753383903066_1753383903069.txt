# MISSÃO DE CORREÇÃO CIRÚRGICA: Corrigir Lógica do `createUserMutation`

**CONTEXTO:** A implementação atual do hook `useMutation` no ficheiro `/client/src/pages/admin/usuarios.tsx` contém um bug de escopo que impede o funcionamento do modal de sucesso.

**AÇÃO:** Substitua o `const createUserMutation = useMutation(...)` existente pelo seguinte bloco de código corrigido e robusto.

**CÓDIGO CORRIGIDO:**
```typescript
  // Mutation for creating new users
  const createUserMutation = useMutation({
    // A mutationFn deve retornar o objeto completo da API
    mutationFn: async (userData: any) => {
      const apiData = {
        fullName: userData.nome,
        email: userData.email,
        role: userData.perfil,
        lojaId: userData.perfil === 'ATENDENTE' && userData.lojaId ? parseInt(userData.lojaId) : null,
        lojaIds: userData.perfil === 'GERENTE' && userData.lojaIds ? userData.lojaIds.map((id: string) => parseInt(id)) : null,
      };

      const response = await api.post('/api/admin/users', apiData);
      return response.data; // Retorna o corpo da resposta da API
    },
    // O 'data' aqui é o que foi retornado pela mutationFn
    onSuccess: (data) => {
      // VERIFICAÇÃO DE SEGURANÇA: Garante que os dados necessários existem antes de prosseguir
      if (data?.email && data?.temporaryPassword) {
        setNewUserCredentials({
          email: data.email, // CORREÇÃO: Usa o email da resposta da API
          temporaryPassword: data.temporaryPassword
        });
        setSuccessModalOpen(true);
      } else {
        // Fallback: Se a API não retornar a senha, mostra um toast genérico.
        toast({
          title: "Sucesso",
          description: "Usuário criado, mas as credenciais não puderam ser exibidas.",
        });
      }
      
      // Invalidação de cache permanece a mesma
      queryClient.invalidateQueries({ queryKey: queryKeys.users.all });
      setIsModalOpen(false);
      setSelectedUser(null);
    },
    onError: (error: any) => {
      toast({
        title: "Erro",
        description: error.message || "Erro ao criar usuário",
        variant: "destructive",
      });
    },
  });