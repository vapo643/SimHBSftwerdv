---
### **PROTOCOLO DE ATIVAÇÃO DE MISSÃO (PAM) V1.0**

**1. Princípio Mestre: Transferência de Consciência**
*O seu modo operacional muda de "Detetive" para "Executor de Elite". O diagnóstico está concluído. A sua missão é executar o plano de batalha definido em `docs/diagnostics/OPERACAO_TOLERANCIA_ZERO_TRIAGEM.md` com precisão cirúrgica. A sua métrica de sucesso é a erradicação dos "fantasmas" na ordem de prioridade estabelecida.*

**2. Doutrina de Engenharia de Contexto Dinâmico (DECD) V1.0 - ATIVADA**
*A pesquisa está **autorizada** com um foco restrito: encontrar a implementação canónica para (A) mock de conexões `ioredis` no `vitest` para resolver `ECONNREFUSED`, e (B) a melhor prática para mock de queries encadeadas do Drizzle ORM, especificamente o método `innerJoin`.*

---
### **Pacote de Ativação de Missão: OPERAÇÃO TOLERÂNCIA ZERO (FASE 2 - REMEDIAÇÃO CIRÚRGICA)**

* **Sumário da Missão (O Quê):** Executar o roadmap de remediação priorizado, começando pelas missões P0-A e P0-B, para erradicar as 23 falhas de teste (74%) relacionadas à infraestrutura de teste (conexão Redis e mocks de banco de dados).
* **Intenção Estratégica (O Porquê):** O objetivo é a máxima eficiência. Ao resolver a "Dupla Crítica" P0 primeiro, vamos limpar a maior parte do ruído da nossa suíte de testes com o mínimo de esforço, o que nos dará uma visão clara dos bugs de lógica de negócio reais que precisam ser corrigidos nas missões P1 e P2.
* **Histórico Relevante (Consulta Obrigatória):** A sua **única fonte da verdade** para esta missão é o relatório `docs/diagnostics/OPERACAO_TOLERANCIA_ZERO_TRIAGEM.md`. Execute as missões na ordem exata definida no roadmap que você criou.
* **Modelo Mental (Como se Encaixa):** Você é um engenheiro de DevOps a reparar uma pipeline de CI/CD quebrada. A sua tarefa é consertar a fundação da suíte de testes – as conexões e os mocks – para que os testes possam executar de forma isolada e confiável.
* **Riscos Antecipados e Contramedidas:**
    * **Risco (BAIXO):** A correção da infraestrutura de teste pode revelar que alguns dos testes que falhavam por esta razão também têm falhas de lógica secundárias.
    * **Contramedida:** Este é um resultado desejado. A validação completa ao final da missão irá capturar estas novas informações e nos permitirá avaliar o progresso real.

---

### **IMPLEMENTAR:**
Remediação Priorizada da Suíte de Testes Conforme Roadmap "Tolerância Zero".

**CURRENT STATE:**
A análise de triagem confirmou que 23 das 31 falhas de teste (74%) são causadas por dois problemas de infraestrutura:
1.  **Crise de Conexão Redis (P0-A):** 14 testes falham com `Error: connect ECONNREFUSED 127.0.0.1:6379`.
2.  **Crise de Mock de Banco de Dados (P0-B):** 9 testes falham com `TypeError: db.select(...).from(...).innerJoin is not a function`.

**EXPECTED (Estado Final de Sucesso):**
As missões P0-A e P0-B são implementadas com sucesso. A prova irrefutável será o output de uma nova execução da suíte de testes que demonstre:
1.  A erradicação completa dos erros `ECONNREFUSED` relacionados ao Redis.
2.  A erradicação completa dos erros `TypeError: ... .innerJoin is not a function`.
3.  Uma redução massiva no número de testes falhando (de 31 para aproximadamente 8, conforme a sua projeção).

**CONSTRAINTS (Roadmap de Implementação):**

1.  **Execute a Missão P0-A (Crise de Conexão Redis):**
    * **Plano de Ação:** Modifique a configuração dos testes (provavelmente em `tests/setup.ts` ou num `helper`) para interceptar as chamadas ao Redis. Em vez de tentar uma conexão real, utilize uma biblioteca de mock como `ioredis-mock` ou a funcionalidade `vi.mock` do `vitest` para simular o comportamento do Redis em memória.
    * **Prova de Sucesso:** Execute `npx vitest run --reporter=verbose`. O output **não deve mais conter nenhum erro `ECONNREFUSED`**.

2.  **Execute a Missão P0-B (Crise de Mock de Banco de Dados):**
    * **Plano de Ação:** Refatore o mock do Drizzle ORM (provavelmente num `helper` de banco de dados em `tests/lib/`) para suportar corretamente métodos encadeados. Implemente um "chain mock" robusto que inclua o método `.innerJoin()`, retornando `mockReturnThis()` para permitir o encadeamento contínuo.
    * **Prova de Sucesso:** Execute `npx vitest run tests/routes/tabelasComerciais.test.ts`. O teste que antes falhava com o `TypeError` de `innerJoin` deve agora passar ou falhar por uma razão de lógica de negócio.

3.  **Validação Final:** Após completar P0-A e P0-B, execute a suíte de testes completa e reporte o resultado final.
    ```bash
    npx vitest run --reporter=verbose
    ```