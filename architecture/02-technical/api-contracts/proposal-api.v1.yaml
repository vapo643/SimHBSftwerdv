openapi: 3.0.3
info:
  title: Simpix Proposal API
  description: |
    API for credit proposal management within the Simpix platform.
    
    This API follows Domain-Driven Design (DDD) architecture with clear separation between:
    - Presentation Layer (Controllers & Routes)
    - Application Layer (Use Cases & Orchestration)  
    - Domain Layer (Business Logic & Entities)
    - Infrastructure Layer (Data Persistence)
    
    All endpoints follow a consistent response format using RFC 7807 Problem Details for errors.
    PII data is masked in GET responses according to ADR-008 security policies.
  version: 1.0.0
  contact:
    name: Simpix Development Team
    email: dev@simpix.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.simpix.com/api
    description: Production server
  - url: https://staging-api.simpix.com/api
    description: Staging server
  - url: http://localhost:5000/api
    description: Development server

paths:
  /v1/proposals:
    post:
      summary: Create a new credit proposal
      description: |
        Creates a new credit proposal with customer data and loan conditions.
        The proposal will be initialized with status 'aguardando_analise' (awaiting analysis).
      operationId: createProposal
      tags:
        - Proposals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProposalRequest'
            examples:
              basicProposal:
                summary: Basic proposal example
                value:
                  customerData:
                    name: "João Silva"
                    cpf: "12345678901"
                    email: "joao.silva@email.com"
                    phone: "11999887766"
                    monthlyIncome: 5000
                  loanConditions:
                    requestedAmount: 10000
                    term: 24
                    purpose: "Reforma residencial"
                  storeId: "1"
                  productId: "1"
      responses:
        '201':
          description: Proposal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSuccessResponse'
              examples:
                success:
                  summary: Successful proposal creation
                  value:
                    success: true
                    data:
                      id: "b3b5433f-0efe-4bbb-be01-411e37c262a9"
                      status: "aguardando_analise"
                      customerData:
                        name: "João Silva"
                        cpfMasked: "***.***.789-**"
                        email: "joao.silva@email.com"
                        phone: "11999887766"
                        monthlyIncome: 5000
                      loanConditions:
                        requestedAmount: 10000
                        term: 24
                        purpose: "Reforma residencial"
                      storeId: "1"
                      productId: "1"
                      createdAt: "2025-08-21T21:00:00.000Z"
                      updatedAt: "2025-08-21T21:00:00.000Z"
                    message: "Proposal created successfully"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                validationError:
                  summary: Validation error example
                  value:
                    type: "https://docs.simpix.com/errors/validation-error"
                    title: "Validation Error"
                    status: 400
                    detail: "O campo 'customerData.cpf' deve conter exatamente 11 dígitos numéricos."
                    instance: "urn:uuid:123e4567-e89b-12d3-a456-426614174000"
                    timestamp: "2025-08-22T13:15:30.123Z"
                    path: "/api/v1/proposals"
                    method: "POST"
                    context:
                      field: "customerData.cpf"
                      providedValue: "123.456.789-0"
                      expectedFormat: "11 dígitos numéricos"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    get:
      summary: Get all proposals
      description: |
        Retrieves all credit proposals. Returns an array of proposals with pagination metadata.
        PII data is masked in responses according to security policies.
      operationId: getAllProposals
      tags:
        - Proposals
      responses:
        '200':
          description: Proposals retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalListResponse'
              examples:
                success:
                  summary: Successful proposals retrieval
                  value:
                    success: true
                    data:
                      - id: "b3b5433f-0efe-4bbb-be01-411e37c262a9"
                        status: "aguardando_analise"
                        customerData:
                          name: "Cliente 1"
                          cpfMasked: "***.***.111-**"
                        loanConditions:
                          requestedAmount: 10000
                          term: 24
                        createdAt: "2025-08-20T19:32:58.573Z"
                        updatedAt: "2025-08-20T19:32:58.573Z"
                    total: 1
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}:
    get:
      summary: Get proposal by ID
      description: |
        Retrieves a specific credit proposal by its unique identifier.
        PII data is masked in responses according to security policies.
      operationId: getProposalById
      tags:
        - Proposals
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
          example: "b3b5433f-0efe-4bbb-be01-411e37c262a9"
      responses:
        '200':
          description: Proposal found and returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSuccessResponse'
              examples:
                success:
                  summary: Successful proposal retrieval
                  value:
                    success: true
                    data:
                      id: "b3b5433f-0efe-4bbb-be01-411e37c262a9"
                      status: "aguardando_analise"
                      customerData:
                        name: "Cliente 1"
                        cpfMasked: "***.***.111-**"
                        email: "cliente1@teste.com"
                        phone: "11999888777"
                        monthlyIncome: 15000
                      loanConditions:
                        requestedAmount: 10000
                        term: 24
                      storeId: "1"
                      productId: "1"
                      createdAt: "2025-08-20T19:32:58.573Z"
                      updatedAt: "2025-08-20T19:32:58.573Z"
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                notFound:
                  summary: Proposal not found
                  value:
                    type: "https://docs.simpix.com/errors/not-found"
                    title: "Resource Not Found"
                    status: 404
                    detail: "Proposal with ID 'b3b5433f-0efe-4bbb-be01-411e37c262a9' not found"
                    instance: "urn:uuid:123e4567-e89b-12d3-a456-426614174000"
                    timestamp: "2025-08-22T13:15:30.123Z"
                    path: "/api/v1/proposals/b3b5433f-0efe-4bbb-be01-411e37c262a9"
                    method: "GET"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/submit:
    put:
      summary: Submit proposal for analysis
      description: |
        Submits a proposal for credit analysis by transitioning its status to 'aguardando_analise'.
        This endpoint follows FSM state transitions.
      operationId: submitProposalForAnalysis
      tags:
        - Proposals - Workflow
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
          example: "b3b5433f-0efe-4bbb-be01-411e37c262a9"
      responses:
        '200':
          description: Proposal submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSuccessResponse'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Invalid state transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                invalidTransition:
                  summary: Invalid state transition
                  value:
                    type: "https://docs.simpix.com/errors/invalid-transition"
                    title: "State Transition Error"
                    status: 409
                    detail: "Cannot transition from 'aprovada' to 'aguardando_analise'"
                    instance: "urn:uuid:123e4567-e89b-12d3-a456-426614174000"
                    timestamp: "2025-08-22T13:15:30.123Z"
                    path: "/api/v1/proposals/b3b5433f-0efe-4bbb-be01-411e37c262a9/submit"
                    method: "PUT"
                    context:
                      currentStatus: "aprovada"
                      attemptedStatus: "aguardando_analise"
                      allowedTransitions: ["formalizada", "rejeitada"]
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/approve:
    put:
      summary: Approve proposal
      description: |
        Approves a credit proposal by transitioning its status to 'aprovada'.
        Requires appropriate permissions and valid FSM state.
      operationId: approveProposal
      tags:
        - Proposals - Workflow
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                observations:
                  type: string
                  description: Approval observations
                approvalData:
                  type: object
                  description: Additional approval metadata
      responses:
        '200':
          description: Proposal approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSuccessResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Invalid state transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/reject:
    put:
      summary: Reject proposal
      description: |
        Rejects a credit proposal by transitioning its status to 'rejeitada'.
        Requires appropriate permissions and valid FSM state.
      operationId: rejectProposal
      tags:
        - Proposals - Workflow
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  description: Rejection reason
                  example: "Insufficient credit score"
                observations:
                  type: string
                  description: Additional observations
      responses:
        '200':
          description: Proposal rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSuccessResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Invalid state transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/toggle-status:
    put:
      summary: Toggle proposal suspension status
      description: |
        Toggles a proposal between active and suspended states.
        Only available for proposals in specific statuses.
      operationId: toggleProposalStatus
      tags:
        - Proposals - Workflow
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                suspend:
                  type: boolean
                  description: True to suspend, false to activate
                reason:
                  type: string
                  description: Reason for status change
      responses:
        '200':
          description: Status toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSuccessResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Invalid state transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/buscar-por-cpf/{cpf}:
    get:
      summary: Find proposals by CPF
      description: |
        Searches for proposals associated with a specific CPF.
        The CPF parameter is masked in logs for security.
        Response contains masked PII data.
      operationId: findProposalsByCpf
      tags:
        - Proposals
      parameters:
        - name: cpf
          in: path
          required: true
          description: Customer's CPF (11 digits)
          schema:
            type: string
            pattern: '^[0-9]{11}$'
          example: "12345678901"
      responses:
        '200':
          description: Proposals found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalListResponse'
        '400':
          description: Invalid CPF format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No proposals found for this CPF
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/documents:
    get:
      summary: List proposal documents
      description: |
        Retrieves all documents associated with a specific proposal.
      operationId: listProposalDocuments
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentInfo'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    post:
      summary: Upload document to proposal
      description: |
        Uploads a new document and associates it with a proposal.
      operationId: uploadProposalDocument
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - documentType
              properties:
                file:
                  type: string
                  format: binary
                  description: Document file (PDF, JPG, PNG)
                documentType:
                  type: string
                  enum: [cpf, rg, comprovante_renda, comprovante_residencia, ccb, outros]
                  description: Type of document
                description:
                  type: string
                  description: Optional document description
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/DocumentInfo'
                  message:
                    type: string
                    example: "Document uploaded successfully"
        '400':
          description: Invalid document or format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/ccb:
    get:
      summary: Download signed CCB
      description: |
        Downloads the signed CCB (Cédula de Crédito Bancário) for a formalized proposal.
      operationId: downloadCcb
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: CCB file returned successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: CCB not found or not yet generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/gerar-ccb:
    post:
      summary: Generate CCB document
      description: |
        Generates a new CCB (Cédula de Crédito Bancário) for an approved proposal.
      operationId: generateCcb
      tags:
        - Formalization
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                templateOverrides:
                  type: object
                  description: Optional template value overrides
      responses:
        '201':
          description: CCB generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      ccbId:
                        type: string
                        description: Generated CCB identifier
                      documentUrl:
                        type: string
                        description: URL to access the CCB
                  message:
                    type: string
                    example: "CCB generated successfully"
        '400':
          description: Cannot generate CCB in current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/formalizacao:
    get:
      summary: Get formalization status
      description: |
        Retrieves the current formalization status and progress of a proposal.
      operationId: getFormalizationStatus
      tags:
        - Formalization
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Formalization status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/FormalizationStatus'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/etapa-formalizacao:
    patch:
      summary: Update formalization step
      description: |
        Updates the current formalization step/stage of a proposal.
      operationId: updateFormalizationStep
      tags:
        - Formalization
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - etapa
              properties:
                etapa:
                  type: string
                  enum: [aceite_solicitado, aceite_confirmado, ccb_gerada, assinatura_enviada, assinatura_concluida, boletos_gerados]
                  description: New formalization step
                  example: "aceite_confirmado"
                observacoes:
                  type: string
                  description: Optional step notes
                metadata:
                  type: object
                  description: Additional step metadata
      responses:
        '200':
          description: Formalization step updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSuccessResponse'
        '400':
          description: Invalid step transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /v1/proposals/{id}/audit-logs:
    get:
      summary: Get proposal audit logs
      description: |
        Retrieves complete audit trail for a proposal including all state transitions and modifications.
      operationId: getProposalAuditLogs
      tags:
        - Audit
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the proposal
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLogEntry'
        '403':
          description: Insufficient permissions to view audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

components:
  schemas:
    # RFC 7807 Problem Details Schema (Mandatório para todos os erros)
    ProblemDetails:
      type: object
      required:
        - type
        - title
        - status
        - detail
        - instance
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type
          example: "https://docs.simpix.com/errors/validation-error"
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: "Validation Error"
        status:
          type: integer
          description: The HTTP status code
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence
          example: "O campo 'clienteCpf' deve conter exatamente 11 dígitos numéricos."
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence
          example: "urn:uuid:123e4567-e89b-12d3-a456-426614174000"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
          example: "2025-08-22T13:15:30.123Z"
        path:
          type: string
          description: The API path where the error occurred
          example: "/api/v1/proposals"
        method:
          type: string
          description: The HTTP method used
          example: "POST"
        traceId:
          type: string
          description: Distributed tracing identifier
          example: "abc123def456"
        context:
          type: object
          additionalProperties: true
          description: Additional context specific to this error
          example:
            field: "customerData.cpf"
            providedValue: "123.456.789-0"
            expectedFormat: "11 dígitos numéricos"

    CreateProposalRequest:
      type: object
      required:
        - customerData
        - loanConditions
      properties:
        customerData:
          $ref: '#/components/schemas/CustomerDataInput'
        loanConditions:
          $ref: '#/components/schemas/LoanConditions'
        partnerId:
          type: string
          format: uuid
          description: ID of the partner/broker
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        storeId:
          type: string
          description: ID of the store/branch
          example: "1"
        productId:
          type: string  
          description: ID of the credit product
          example: "1"

    # Schema para entrada de dados (POST) - pode conter PII completo
    CustomerDataInput:
      type: object
      required:
        - name
        - cpf
      properties:
        name:
          type: string
          minLength: 1
          description: Full name of the customer
          example: "João Silva Santos"
        cpf:
          type: string
          pattern: '^[0-9]{11}$'
          description: Customer's CPF (Brazilian tax ID) - 11 digits
          example: "12345678901"
        email:
          type: string
          format: email
          description: Customer's email address
          example: "joao.silva@email.com"
        phone:
          type: string
          description: Customer's phone number
          example: "11999887766"
        birthDate:
          type: string
          format: date
          description: Customer's birth date (ISO 8601 format)
          example: "1985-03-15"
        monthlyIncome:
          type: number
          minimum: 0
          description: Customer's monthly income in BRL
          example: 5000.00
        rg:
          type: string
          description: Customer's RG (Brazilian ID document)
          example: "123456789"
        issuingBody:
          type: string
          description: RG issuing authority
          example: "SSP/SP"
        maritalStatus:
          type: string
          description: Customer's marital status
          enum: [solteiro, casado, divorciado, viuvo, separado]
          example: "solteiro"
        nationality:
          type: string
          description: Customer's nationality
          example: "Brasileira"
        zipCode:
          type: string
          pattern: '^[0-9]{8}$'
          description: ZIP code (CEP) - 8 digits
          example: "01234567"
        address:
          type: string
          description: Full address
          example: "Rua das Flores, 123, Apt 45, Centro"
        occupation:
          type: string
          description: Customer's profession/occupation
          example: "Engenheiro de Software"

    # Schema para saída de dados (GET) - PII mascarado
    CustomerDataMasked:
      type: object
      properties:
        name:
          type: string
          description: Full name of the customer
          example: "João Silva Santos"
        cpfMasked:
          type: string
          description: Masked CPF for privacy
          example: "***.***.789-**"
        email:
          type: string
          format: email
          description: Customer's email address
          example: "joao.silva@email.com"
        phone:
          type: string
          description: Customer's phone number
          example: "11999887766"
        birthDate:
          type: string
          format: date
          description: Customer's birth date (ISO 8601 format)
          example: "1985-03-15"
        monthlyIncome:
          type: number
          minimum: 0
          description: Customer's monthly income in BRL
          example: 5000.00
        rgMasked:
          type: string
          description: Masked RG for privacy
          example: "**.***.**9-*"
        issuingBody:
          type: string
          description: RG issuing authority
          example: "SSP/SP"
        maritalStatus:
          type: string
          description: Customer's marital status
          enum: [solteiro, casado, divorciado, viuvo, separado]
          example: "solteiro"
        nationality:
          type: string
          description: Customer's nationality
          example: "Brasileira"
        zipCode:
          type: string
          pattern: '^[0-9]{8}$'
          description: ZIP code (CEP) - 8 digits
          example: "01234567"
        addressMasked:
          type: string
          description: Masked address for privacy
          example: "Rua das ******, ***, Apt **, Centro"
        occupation:
          type: string
          description: Customer's profession/occupation
          example: "Engenheiro de Software"

    LoanConditions:
      type: object
      required:
        - requestedAmount
        - term
      properties:
        requestedAmount:
          type: number
          minimum: 0.01
          description: Requested loan amount in BRL
          example: 10000.00
        term:
          type: integer
          minimum: 1
          maximum: 84
          description: Loan term in months
          example: 24
        purpose:
          type: string
          description: Purpose of the loan
          example: "Reforma residencial"
        collateral:
          type: string
          description: Collateral for the loan
          example: "Imóvel próprio"
        tacValue:
          type: number
          minimum: 0
          description: TAC (Taxa de Abertura de Crédito) value in BRL
          example: 150.00
        iofValue:
          type: number
          minimum: 0  
          description: IOF (Imposto sobre Operações Financeiras) value in BRL
          example: 38.00
        totalFinancedAmount:
          type: number
          minimum: 0
          description: Total financed amount including fees
          example: 10188.00
        monthlyPayment:
          type: number
          minimum: 0
          description: Monthly payment amount in BRL
          example: 512.50
        interestRate:
          type: number
          minimum: 0
          maximum: 100
          description: Annual interest rate as percentage
          example: 2.99

    # Response com PII mascarado para endpoints GET
    ProposalResponseMasked:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the proposal
          example: "b3b5433f-0efe-4bbb-be01-411e37c262a9"
        status:
          type: string
          enum: 
            - aguardando_analise
            - em_analise
            - aprovada
            - rejeitada
            - pendente
            - formalizada
            - paga
          description: Current status of the proposal
          example: "aguardando_analise"
        customerData:
          $ref: '#/components/schemas/CustomerDataMasked'
        loanConditions:
          $ref: '#/components/schemas/LoanConditions'
        partnerId:
          type: string
          format: uuid
          description: ID of the partner/broker
        storeId:
          type: string
          description: ID of the store/branch
        productId:
          type: string
          description: ID of the credit product
        createdAt:
          type: string
          format: date-time
          description: Proposal creation timestamp
          example: "2025-08-21T21:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-21T21:00:00.000Z"
        pendingReason:
          type: string
          description: Reason for pending status (if applicable)
        observations:
          type: string
          description: Additional observations about the proposal
        analysisResult:
          type: object
          description: Results from credit analysis (if completed)

    ProposalSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/ProposalResponseMasked'
        message:
          type: string
          description: Success message
          example: "Proposal created successfully"

    ProposalListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProposalResponseMasked'
        total:
          type: integer
          description: Total number of proposals
          example: 25

    DocumentInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique document identifier
          example: "d3b5433f-0efe-4bbb-be01-411e37c262a9"
        proposalId:
          type: string
          format: uuid
          description: Associated proposal ID
          example: "b3b5433f-0efe-4bbb-be01-411e37c262a9"
        documentType:
          type: string
          enum: [cpf, rg, comprovante_renda, comprovante_residencia, ccb, outros]
          description: Type of document
          example: "cpf"
        filename:
          type: string
          description: Original filename
          example: "cpf_joao_silva.pdf"
        fileSize:
          type: integer
          description: File size in bytes
          example: 204800
        mimeType:
          type: string
          description: MIME type of the document
          example: "application/pdf"
        uploadedAt:
          type: string
          format: date-time
          description: Upload timestamp
          example: "2025-08-21T21:00:00.000Z"
        uploadedBy:
          type: string
          description: User who uploaded the document
          example: "user_123"

    FormalizationStatus:
      type: object
      properties:
        proposalId:
          type: string
          format: uuid
          description: Associated proposal ID
        currentStep:
          type: string
          enum: [aceite_solicitado, aceite_confirmado, ccb_gerada, assinatura_enviada, assinatura_concluida, boletos_gerados]
          description: Current formalization step
          example: "ccb_gerada"
        completedSteps:
          type: array
          items:
            type: string
          description: List of completed steps
          example: ["aceite_solicitado", "aceite_confirmado", "ccb_gerada"]
        pendingSteps:
          type: array
          items:
            type: string
          description: List of pending steps
          example: ["assinatura_enviada", "assinatura_concluida", "boletos_gerados"]
        formalizationDate:
          type: string
          format: date-time
          description: When formalization was completed (if applicable)
        ccbDocument:
          type: object
          properties:
            id:
              type: string
              description: CCB document ID
            status:
              type: string
              enum: [pending, generated, signed, cancelled]
              description: CCB status
            generatedAt:
              type: string
              format: date-time
              description: When CCB was generated
            signedAt:
              type: string
              format: date-time
              description: When CCB was signed

    AuditLogEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique audit log identifier
        proposalId:
          type: string
          format: uuid
          description: Associated proposal ID
        eventType:
          type: string
          enum: [status_change, data_update, document_upload, access_granted, security_violation]
          description: Type of audit event
          example: "status_change"
        oldStatus:
          type: string
          description: Previous status (for status changes)
          example: "aguardando_analise"
        newStatus:
          type: string
          description: New status (for status changes)
          example: "aprovada"
        userId:
          type: string
          description: User who performed the action
          example: "user_456"
        userRole:
          type: string
          description: Role of the user
          example: "ANALISTA"
        ipAddress:
          type: string
          description: IP address of the request
          example: "192.168.1.100"
        userAgent:
          type: string
          description: User agent string
          example: "Mozilla/5.0..."
        changedFields:
          type: array
          items:
            type: string
          description: Fields that were modified
          example: ["status", "observations"]
        timestamp:
          type: string
          format: date-time
          description: When the event occurred
          example: "2025-08-22T13:15:30.123Z"
        correlationId:
          type: string
          format: uuid
          description: Request correlation ID for tracing
          example: "abc123def456"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token for authentication.
        Obtained via Supabase Auth login endpoint.

security:
  - bearerAuth: []

tags:
  - name: Proposals
    description: Core proposal management operations
  - name: Proposals - Workflow
    description: FSM state transition operations
  - name: Documents
    description: Document management operations
  - name: Formalization
    description: Loan formalization process
  - name: Audit
    description: Audit trail and logging operations