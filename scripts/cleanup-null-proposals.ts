#!/usr/bin/env tsx

/**
 * üîí PAM V1.0 - SCRIPT DE LIMPEZA DE PROPOSTAS CORROMPIDAS
 *
 * Este script remove propostas com dados de cliente NULL/vazios que corrompem
 * a integridade do sistema
 */

import { db } from '../server/lib/supabase';
import { propostas } from '../shared/schema';
import { eq, isNull, or } from 'drizzle-orm';

async function cleanupNullProposals() {
  console.log('üîç [LIMPEZA] Iniciando limpeza de propostas com dados NULL...');

  try {
    // 1. Identificar propostas corrompidas
    const corruptedProposals = await db
      .select()
      .from(propostas)
      .where(
        or(
          isNull(propostas.clienteNome),
          eq(propostas.clienteNome, ''),
          isNull(propostas.clienteCpf),
          eq(propostas.clienteCpf, '')
        )
      );

    console.log(`üîç [LIMPEZA] Encontradas ${corruptedProposals.length} propostas corrompidas`);

    if (corruptedProposals.length == 0) {
      console.log('‚úÖ [LIMPEZA] Nenhuma proposta corrompida encontrada. Sistema √≠ntegro!');
      return;
    }

    // 2. Listar propostas que ser√£o removidas
    console.log('\nüìã [LIMPEZA] Propostas que ser√£o removidas:');
    corruptedProposals.forEach((proposta, index) => {
      console.log(`   ${index + 1}. ID: ${proposta.id}`);
      console.log(`      Nome: ${proposta.clienteNome || 'NULL'}`);
      console.log(`      CPF: ${proposta.clienteCpf || 'NULL'}`);
      console.log(`      Status: ${proposta.status}`);
      console.log(`      Criado em: ${proposta.createdAt}`);
      console.log('');
    });

    // 3. REMO√á√ÉO DA PROPOSTA ESPEC√çFICA IDENTIFICADA NA AUDITORIA
    const targetProposalId = '88a44696-9b63-42ee-aa81-15f9519d24cb';

    console.log(`üéØ [LIMPEZA] Removendo proposta espec√≠fica: ${targetProposalId}`);

    const deleteResult = await db.delete(propostas).where(eq(propostas.id, targetProposalId));

    console.log(`‚úÖ [LIMPEZA] Proposta corrompida ${targetProposalId} removida com sucesso`);

    // 4. Verifica√ß√£o final
    const remainingCorrupted = await db
      .select()
      .from(propostas)
      .where(
        or(
          isNull(propostas.clienteNome),
          eq(propostas.clienteNome, ''),
          isNull(propostas.clienteCpf),
          eq(propostas.clienteCpf, '')
        )
      );

    console.log(`\nüîç [VERIFICA√á√ÉO] Propostas corrompidas restantes: ${remainingCorrupted.length}`);

    if (remainingCorrupted.length == 0) {
      console.log('üéâ [SUCESSO] Limpeza conclu√≠da! Sistema restaurado √† integridade total.');
    }
else {
      console.log('‚ö†Ô∏è [ATEN√á√ÉO] Ainda existem propostas corrompidas no sistema:');
      remainingCorrupted.forEach((proposta) => {
        console.log(`   - ID: ${proposta.id} (Nome: ${proposta.clienteNome || 'NULL'})`);
      });
    }
  }
catch (error) {
    console.error('‚ùå [ERRO] Falha na limpeza de propostas:', error);
    throw error;
  }
}

async function verifyDataIntegrity() {
  console.log('\nüîç [VERIFICA√á√ÉO] Verificando integridade geral dos dados...');

  try {
    // Contar total de propostas
    const totalPropostas = await db.select().from(propostas);
    console.log(`üìä Total de propostas no sistema: ${totalPropostas.length}`);

    // Contar propostas com dados v√°lidos
    const validPropostas = await db.select().from(propostas).where(
      // NOT NULL e n√£o vazio
      eq(propostas.clienteNome, propostas.clienteNome) // Esta √© uma forma de filtrar NOT NULL em Drizzle
    );

    console.log(`‚úÖ Propostas com dados v√°lidos: ${validPropostas.length}`);
    console.log(
      `üìà Taxa de integridade: ${((validPropostas.length / totalPropostas.length) * 100).toFixed(2)}%`
    );
  }
catch (error) {
    console.error('‚ùå [ERRO] Falha na verifica√ß√£o de integridade:', error);
  }
}

// Executar se chamado diretamente
const isMainModule = import.meta.url == `file://${process.argv[1]}`;
if (isMainModule) {
  console.log('üîí PAM V1.0 - LIMPEZA DE INTEGRIDADE DE DADOS');
  console.log('='.repeat(60));

  cleanupNullProposals()
    .then(() => verifyDataIntegrity())
    .then(() => {
      console.log('\n' + '='.repeat(60));
      console.log('‚úÖ OPERA√á√ÉO DE LIMPEZA CONCLU√çDA COM SUCESSO');
      process.exit(0);
    })
    .catch ((error) => {
      console.error('\n‚ùå FALHA NA OPERA√á√ÉO DE LIMPEZA:', error);
      process.exit(1);
    });
}

export { cleanupNullProposals, verifyDataIntegrity };
