#!/usr/bin/env tsx
/**
 * Script de Migra√ß√£o - TAC em Produtos Legados
 *
 * Define valores padr√£o de TAC para produtos antigos que n√£o possuem configura√ß√£o.
 * Valores padr√£o: tacValor = R$ 50,00 | tacTipo = 'fixo'
 *
 * @created 2025-01-20
 * @module scripts/migrate-legacy-products-tac
 */

import { db } from '../server/lib/supabase.js';
import { produtos } from '../shared/schema.js';
import { isNull } from 'drizzle-orm';

async function migrateLegacyProductsTac() {
  console.log('üöÄ [MIGRA√á√ÉO TAC] Iniciando migra√ß√£o de produtos legados...');
  console.log('üìã [MIGRA√á√ÉO TAC] Configura√ß√£o padr√£o: TAC = R$ 50,00 (fixo)');

  try {
    // Buscar produtos sem configura√ß√£o de TAC
    console.log('üîç [MIGRA√á√ÉO TAC] Buscando produtos com tacValor NULL...');

    const productsToUpdate = await db
      .select({
        id: produtos.id,
        nomeProduto: produtos.nomeProduto,
        tacValor: produtos.tacValor,
        tacTipo: produtos.tacTipo,
      })
      .from(produtos)
      .where(isNull(produtos.tacValor));

    console.log(
      `üìä [MIGRA√á√ÉO TAC] Encontrados ${productsToUpdate.length} produtos sem configura√ß√£o de TAC`
    );

    if (productsToUpdate.length == 0) {
      console.log('‚úÖ [MIGRA√á√ÉO TAC] Nenhum produto precisa de atualiza√ß√£o!');
      return;
    }

    // Listar produtos que ser√£o atualizados
    console.log('üìù [MIGRA√á√ÉO TAC] Produtos que ser√£o atualizados:');
    productsToUpdate.forEach((produto) => {
      console.log(`   - ID: ${produto.id} | Nome: ${produto.nomeProduto}`);
    });

    // Executar UPDATE em massa
    console.log('‚öôÔ∏è [MIGRA√á√ÉO TAC] Executando UPDATE...');

    const updatedProducts = await db
      .update(produtos)
      .set({
        tacValor: '50.00',
        tacTipo: 'fixo',
      })
      .where(isNull(produtos.tacValor))
      .returning({
        id: produtos.id,
        nomeProduto: produtos.nomeProduto,
        tacValor: produtos.tacValor,
        tacTipo: produtos.tacTipo,
      });

    // Reportar sucesso
    console.log(
      `‚úÖ [MIGRA√á√ÉO TAC] Migra√ß√£o conclu√≠da. ${updatedProducts.length} produtos legados foram atualizados com a TAC padr√£o.`
    );

    // Mostrar valores atualizados
    console.log('üìä [MIGRA√á√ÉO TAC] Valores finais:');
    updatedProducts.forEach((produto) => {
      console.log(
        `   - ID: ${produto.id} | Nome: ${produto.nomeProduto} | TAC: R$ ${produto.tacValor} (${produto.tacTipo})`
      );
    });

    // Estat√≠sticas finais
    console.log('\nüìà [MIGRA√á√ÉO TAC] Resumo da migra√ß√£o:');
    console.log(`   Total de produtos atualizados: ${updatedProducts.length}`);
    console.log(`   Valor TAC aplicado: R$ 50,00`);
    console.log(`   Tipo TAC aplicado: fixo`);
    console.log(`   Timestamp: ${new Date().toISOString()}`);
  }
catch (error) {
    console.error('‚ùå [MIGRA√á√ÉO TAC] Erro durante a migra√ß√£o:', error);
    process.exit(1);
  }

  // Encerrar conex√£o
  process.exit(0);
}

// Executar migra√ß√£o
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('   MIGRA√á√ÉO DE DADOS - TAC PRODUTOS LEGADOS   ');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('');

migrateLegacyProductsTac().catch ((error) => {
  console.error('‚ùå [MIGRA√á√ÉO TAC] Erro fatal:', error);
  process.exit(1);
});
