import Redis from 'ioredis';

const testRedisConnection = async () => {
  console.log('üîç [DIAGN√ìSTICO REDIS] Iniciando teste de conex√£o...');
  console.log('üìã [CREDENCIAIS] Verificando vari√°veis de ambiente:');
  console.log(`   REDIS_HOST: ${process.env.REDIS_HOST || 'N√ÉO DEFINIDO'}`);
  console.log(`   REDIS_PORT: ${process.env.REDIS_PORT || 'N√ÉO DEFINIDO'}`);
  console.log(`   REDIS_PASSWORD: ${process.env.REDIS_PASSWORD ? '[CONFIGURADO]' : 'N√ÉO DEFINIDO'}`);

  if (!process.env.REDIS_HOST || !process.env.REDIS_PORT || !process.env.REDIS_PASSWORD) {
    console.error('‚ùå FALHA: Credenciais Redis incompletas nas vari√°veis de ambiente.');
    return;
  }

  const redis = new Redis({
    host: process.env.REDIS_HOST,
    port: parseInt(process.env.REDIS_PORT || '6379'),
    password: process.env.REDIS_PASSWORD,
    tls: {}, // Essencial para a maioria das conex√µes de Redis Cloud
    connectTimeout: 10000, // 10 segundos
    lazyConnect: true, // Para capturar erros de conex√£o
  });

  try {
    console.log('üîå [CONEX√ÉO] Tentando conectar ao Redis Cloud...');
    await redis.connect();
    console.log('‚úÖ [CONEX√ÉO] Conectado com sucesso ao Redis Cloud.');
    
    console.log('üì° [PING] Executando comando PING...');
    const reply = await redis.ping();
    console.log('‚úÖ SUCESSO: Conex√£o com Redis Cloud bem-sucedida. Resposta do PING:', reply);
    
    // Teste adicional - SET e GET
    console.log('üß™ [TESTE] Executando teste SET/GET...');
    await redis.set('test:diagnostic', 'redis-working');
    const getValue = await redis.get('test:diagnostic');
    console.log('‚úÖ TESTE SET/GET: Valor recuperado:', getValue);
    
    // Limpar teste
    await redis.del('test:diagnostic');
    console.log('üßπ [LIMPEZA] Teste removido com sucesso.');
    
  } catch (error) {
    console.error('‚ùå FALHA: Erro ao conectar com o Redis Cloud:');
    console.error('üìÑ [DETALHES DO ERRO]:');
    console.error('   Tipo:', error.constructor.name);
    console.error('   Mensagem:', error.message);
    console.error('   Code:', error.code || 'N/A');
    console.error('   Errno:', error.errno || 'N/A');
    console.error('   Syscall:', error.syscall || 'N/A');
    console.error('   Address:', error.address || 'N/A');
    console.error('   Port:', error.port || 'N/A');
    console.error('üìÑ [STACK TRACE]:');
    console.error(error.stack);
  } finally {
    console.log('üîå [DESCONEX√ÉO] Encerrando conex√£o...');
    await redis.quit();
    console.log('‚úÖ [DESCONEX√ÉO] Conex√£o encerrada.');
  }
};

// Executar diagn√≥stico
testRedisConnection().catch(console.error);